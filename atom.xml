<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zimu-66ccff.github.io</id>
    <title>木子亭</title>
    <subtitle>那年满身灰白，唯此亭溢彩，今日不染尘埃，静坐此亭相伴</subtitle>
    <icon>https://zimu-66ccff.github.io/images/favicon.ico</icon>
    <link href="https://zimu-66ccff.github.io" />
    <author>
      <name>ziMu</name>
    </author>
    <updated>2023-02-16T02:20:17.000Z</updated>
    <category term="前端" />
    <category term=" Vue" />
    <entry>
        <id>https://zimu-66ccff.github.io/eventLoop/</id>
        <title>理解事件循环</title>
        <link rel="alternate" href="https://zimu-66ccff.github.io/eventLoop/"/>
        <content type="html">&lt;h1 id=&#34;浏览器中的事件循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器中的事件循环&#34;&gt;#&lt;/a&gt; 浏览器中的事件循环&lt;/h1&gt;
&lt;h2 id=&#34;同步与异步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步与异步&#34;&gt;#&lt;/a&gt; 同步与异步&lt;/h2&gt;
&lt;p&gt;浏览器是&lt;strong&gt;单线程&lt;/strong&gt;的，所以为了不堵塞代码的运行，我们将任务分为了&lt;strong&gt;同步任务&lt;/strong&gt;，和&lt;strong&gt;异步任务&lt;/strong&gt;（ &lt;code&gt;setTimeout&lt;/code&gt;  和 &lt;code&gt;setInterval&lt;/code&gt; 、 &lt;code&gt;axios&lt;/code&gt; 、事件绑定等这种带回调函数的），那么同步任务和异步任务又是按照怎样的顺序进入主线程执行的呢，废话不多说，直接上图好叭 😎&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/16/mJuAZ.png&#34; alt=&#34;事件循环&#34; /&gt;&lt;/p&gt;
&lt;p&gt;先看一段代码，我们会结合这张图和代码来先简单认识一下同步和异步的执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.328888.xyz/2023/02/16/mKZNF.png&#34; alt=&#34;演示代码&#34; /&gt;&lt;br /&gt;
执行的结果很简单 start -&amp;gt; end -&amp;gt; 时间到了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个  &lt;code&gt;script&lt;/code&gt;  代码进入主线程，遇到&lt;strong&gt;同步任务&lt;/strong&gt;  &lt;code&gt;start&lt;/code&gt;  的打印，执行打印&lt;/li&gt;
&lt;li&gt;遇到&lt;strong&gt;异步任务&lt;/strong&gt;  &lt;code&gt;setTimeout&lt;/code&gt; ，将 setTimeout 放到 &lt;strong&gt;Event Table&lt;/strong&gt; 开始计时（注：setTimeout 回调函数被调用的前提是时间到了，所以是在 &lt;strong&gt;Event Table&lt;/strong&gt; 中等待计时结束，如果是其他的回调，例如 on 绑定的事件，则是在 Table 中等待事件被触发）&lt;/li&gt;
&lt;li&gt;遇到&lt;strong&gt;同步任务&lt;/strong&gt;  &lt;code&gt;end&lt;/code&gt;  的打印，执行打印，同步任务执行完毕，&lt;strong&gt;monitoring process&lt;/strong&gt; 进程检测到主线程为空，开始去 &lt;strong&gt;Event Queue&lt;/strong&gt; 那里检查是否有等待被调用的函数&lt;/li&gt;
&lt;li&gt;setTimeout 的计时结束，将其放到 &lt;strong&gt;Event Queue&lt;/strong&gt; 中（&lt;strong&gt;monitoring process&lt;/strong&gt; 进程检测到 &lt;strong&gt;Event Queue&lt;/strong&gt; 存在等待被调用的函数，就将 setTimeout 的回调函数放进主线程执行）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是不是觉得还是很简单的，那么我们现在开始上难度，将异步任务细分为&lt;strong&gt;宏任务&lt;/strong&gt;和&lt;strong&gt;微任务&lt;/strong&gt;，进一步认识事件循环&lt;/p&gt;
&lt;h2 id=&#34;宏任务微任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宏任务微任务&#34;&gt;#&lt;/a&gt; 宏任务，微任务&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;异步任务&lt;/strong&gt;可以细分为&lt;strong&gt;宏任务&lt;/strong&gt;，&lt;strong&gt;微任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;宏任务（&lt;em&gt;task&lt;/em&gt;）大概包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;script (整体代码)&lt;/li&gt;
&lt;li&gt;setTimeout&lt;/li&gt;
&lt;li&gt;setInterval&lt;/li&gt;
&lt;li&gt;setImmediate&lt;/li&gt;
&lt;li&gt;I/O&lt;/li&gt;
&lt;li&gt;UI render&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微任务（&lt;em&gt;jobs&lt;/em&gt;）大概包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;process.nextTick&lt;/li&gt;
&lt;li&gt;Promise.then( )&lt;/li&gt;
&lt;li&gt;Async/Await (实际就是 promise)&lt;/li&gt;
&lt;li&gt;MutationObserver (html5 新特性)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;简述事件循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述事件循环&#34;&gt;#&lt;/a&gt; 简述事件循环：&lt;/h2&gt;
&lt;p&gt;执行&lt;strong&gt;宏任务&lt;/strong&gt;，然后执行该&lt;strong&gt;宏任务产生的微任务&lt;/strong&gt;，若&lt;strong&gt;微任务在执行过程中产生了新的微任务&lt;/strong&gt;，则&lt;strong&gt;继续执行微任务&lt;/strong&gt;，微任务执行完毕后，&lt;strong&gt;再回到宏任务&lt;/strong&gt;中进行下一轮循环。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.328888.xyz/2023/02/16/mKIJw.png&#34; alt=&#34;事件循环&#34; /&gt;&lt;/p&gt;
&lt;p&gt;光这样大家可能不会很理解，那么我们上例子，结合例子来分析讲解&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.328888.xyz/2023/02/16/mK7Xy.png&#34; alt=&#34;代码实列&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第一轮事件循环分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整体 &lt;code&gt;script&lt;/code&gt;  代码作为第一个宏任务进入主线程，遇到同步任务 &lt;code&gt;console.log&lt;/code&gt; ，输出 1。&lt;/li&gt;
&lt;li&gt;遇到宏任务 &lt;code&gt;setTimeout&lt;/code&gt; ，其回调函数被分发到&lt;strong&gt;宏任务 Event Queue&lt;/strong&gt; 中（注：setTimeout 是先被放到&lt;strong&gt; Event Table&lt;/strong&gt; 中进行计时的，等到时间到了，其回调函数才放到宏任务&lt;strong&gt; Event Queue&lt;/strong&gt; 中，并不是直接就放到宏任务&lt;strong&gt; Event Queue&lt;/strong&gt;）。我们暂且记为&lt;em&gt; setTimeout1&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;遇到微任务 &lt;code&gt;process.nextTick()&lt;/code&gt; ，其回调函数被分发到&lt;strong&gt;微任务 Event Queue&lt;/strong&gt; 中。我们记为&lt;em&gt; process1&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;遇到 Promise，new Promise 里面的参数函数作为&lt;strong&gt;同步任务&lt;/strong&gt;直接执行，输出 7。then 里面的回调函数作为微任务被分发到&lt;strong&gt;微任务 Event Queue 中&lt;/strong&gt;。我们记为&lt;em&gt; then1&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;又遇到了宏任务 &lt;code&gt;setTimeout&lt;/code&gt; ，其回调函数被分发到&lt;strong&gt;宏任务 Event Queue&lt;/strong&gt; 中，我们记为&lt;em&gt; setTimeout2&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏任务 Event Queue&lt;/th&gt;
&lt;th&gt;微任务 Event Queue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;setTimeout1&lt;/td&gt;
&lt;td&gt;process1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setTimeout2&lt;/td&gt;
&lt;td&gt;then1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;上表是第一轮事件循环宏任务结束时各 Event Queue 的情况，此时已经输出了 1 和 7。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第一轮宏任务结束&lt;/strong&gt;后，开始处理产生的&lt;strong&gt;微任务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 process1, 输出 6。&lt;/li&gt;
&lt;li&gt;执行 then1，输出 8。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第一轮事件循环正式结束&lt;/strong&gt;，接着开始&lt;strong&gt;第二轮&lt;/strong&gt;，从&lt;strong&gt;宏任务 Event Queue&lt;/strong&gt; 中取出&lt;strong&gt;宏任务 setTimeout1&lt;/strong&gt; 开始处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先执行同步任务输出 2。接下来遇到了微任务 &lt;code&gt;process.nextTick()&lt;/code&gt; ，同样将其分发到&lt;strong&gt;微任务 Event Queue&lt;/strong&gt; 中，记为&lt;em&gt; process2&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new Promise&lt;/code&gt;  参数里的参数函数作为&lt;strong&gt;同步任务&lt;/strong&gt;立即执行输出 4，&lt;strong&gt;微任务&lt;/strong&gt; &lt;code&gt;then&lt;/code&gt;  也分发到&lt;strong&gt;微任务 Event Queue&lt;/strong&gt; 中，记为&lt;em&gt; then2&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏任务 Event Queue&lt;/th&gt;
&lt;th&gt;微任务 Event Queue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;setTimeout2&lt;/td&gt;
&lt;td&gt;process2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;then2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;上表是第二轮事件循环宏任务结束时各 Event Queue 的情况，此时已经输出了 2 和 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第二轮宏任务结束&lt;/strong&gt;，开始处理产生的&lt;strong&gt;微任务&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 process2, 输出 3。&lt;/li&gt;
&lt;li&gt;执行 then2，输出 5。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第二轮事件循环正式结束&lt;/strong&gt;，接着开始&lt;strong&gt;第三轮&lt;/strong&gt;，从&lt;strong&gt;宏任务 Event Queue&lt;/strong&gt; 中取出宏任务 &lt;code&gt;setTimeout2&lt;/code&gt;  开始处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先执行同步任务输出 9。接下来遇到了微任务 &lt;code&gt;process.nextTick()&lt;/code&gt; ，同样将其分发到&lt;strong&gt;微任务 Event Queue&lt;/strong&gt; 中，记为&lt;em&gt; process3&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new Promise&lt;/code&gt;  参数里的参数函数作为同步任务立即执行输出 11，微任务 &lt;code&gt;then&lt;/code&gt;  也分发到&lt;strong&gt;微任务 Event Queue&lt;/strong&gt; 中，记为&lt;em&gt; then3&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏任务 Event Queue&lt;/th&gt;
&lt;th&gt;微任务 Event Queue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;process3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;then3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;上表是&lt;strong&gt;第三轮事件循环宏任务结束&lt;/strong&gt;时各 Event Queue 的情况，此时已经输出了 9 和 11。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第三轮宏任务结束&lt;/strong&gt;，开始处理产生的&lt;strong&gt;微任务&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 process3, 输出 10。&lt;/li&gt;
&lt;li&gt;执行 then3，输出 12。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三次事件循环结束，整个事件循环结束，共经历了三次循环，完整的输出为 1，7，6，8，2，4，3，5，9，11，10，12&lt;/p&gt;
&lt;h2 id=&#34;asyncawait-执行顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#asyncawait-执行顺序&#34;&gt;#&lt;/a&gt; async/await 执行顺序&lt;/h2&gt;
&lt;p&gt;首先我们来看一段代码：&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/16/mMF2Q.png&#34; alt=&#34;代码实列&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输出结果为：script start =&amp;gt; async2 end =&amp;gt; Promise =&amp;gt; script end =&amp;gt; async1 end =&amp;gt; promise1 =&amp;gt; promise2 =&amp;gt; setTimeout&lt;/p&gt;
&lt;p&gt;如果 await 后面直接跟的为一个&lt;strong&gt;变量&lt;/strong&gt;，比如：await 1；这种情况的话相当于&lt;strong&gt;直接把 await 后面的代码注册为一个微任务&lt;/strong&gt;，可以简单理解为 &lt;strong&gt;promise.then (await 下面的代码)&lt;/strong&gt;。然后跳出 async1 函数，执行其他代码，当遇到 promise 函数的时候，会注册 promise.then () 函数到微任务队列，注意此时微任务队列里面已经存在 await 后面的微任务。所以这种情况会先执行 await 后面的代码（async1 end），再执行 async1 函数后面注册的微任务代码 (promise1,promise2)。&lt;/p&gt;
&lt;p&gt;我们再来看另外一段代码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.328888.xyz/2023/02/16/mMSpX.png&#34; alt=&#34;代码实列&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输出结果为： script start =&amp;gt; async2 end =&amp;gt; Promise =&amp;gt; script end =&amp;gt; async2 end1 =&amp;gt; promise1 =&amp;gt; promise2 =&amp;gt; async1 end =&amp;gt; setTimeout&lt;/p&gt;
&lt;p&gt;如果 await 后面跟的为&lt;strong&gt;一个异步函数的调用&lt;/strong&gt;，此时执行完 await&lt;strong&gt; 并不先把 await 后面的代码放到微任务队列中去，而是执行完 await 之后，直接跳出 async1 函数，执行其他代码&lt;/strong&gt;。然后遇到 promise 的时候，把 promise.then 注册为微任务。&lt;strong&gt;其他代码执行完毕后，需要回到 async1 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中&lt;/strong&gt;，注意此时微任务队列中是有之前注册的微任务的。所以这种情况会先执行 async1 函数之外的微任务 (promise1,promise2)，然后才执行 async1 内注册的微任务 (async1 end). &lt;strong&gt;可以理解为，这种情况下，await 后面的代码会在本轮循环的最后被执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总的来说：如果 await 后面是一个变量，则直接把 await 后面的代码放到微任务队列里面。如果后面为一个异步函数的调用，则等到本轮循环中宏任务执行完毕后再把 await 后面的代码放到微任务队列，也就是说这个时候 await 后面的代码时是本轮循环中的微任务队列中的最后一个微任务，会在本轮循环的最后被执行。&lt;/p&gt;
</content>
        <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
        <category term="JavaScript" scheme="https://zimu-66ccff.github.io/categories/note/front-end/javaScript/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="浏览器" scheme="https://zimu-66ccff.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/" />
        <category term="JS高级" scheme="https://zimu-66ccff.github.io/tags/JS%E9%AB%98%E7%BA%A7/" />
        <category term="事件循环" scheme="https://zimu-66ccff.github.io/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/" />
        <updated>2023-02-16T02:20:17.000Z</updated>
    </entry>
    <entry>
        <id>https://zimu-66ccff.github.io/reactivity-effect/</id>
        <title>Vue响应式模块-reactivity-effect</title>
        <link rel="alternate" href="https://zimu-66ccff.github.io/reactivity-effect/"/>
        <content type="html">&lt;h1 id=&#34;effect-方法剖析与实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#effect-方法剖析与实现&#34;&gt;#&lt;/a&gt; effect 方法剖析与实现&lt;/h1&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h2&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;EffectFn&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  deps&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Set&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;EffectFn&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  options&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Options&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  scheduler&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fn&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; EffectFn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  lazy&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; activeEffect&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; EffectFn&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; effectStarck&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;EffectFn&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; targetMap&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; WeakMap&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  object&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Map&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Set&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;EffectFn&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;WeakMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;effect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Options&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; effectFn&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;EffectFn&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;clearUp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    activeEffect &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; effectFn&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    effectStarck&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    effectStarck&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    activeEffect &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; effectStarck&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;effectStarck&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  effectFn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;deps &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Set&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;EffectFn&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  effectFn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;lazy&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; effectFn&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;effectFn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;clearUp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fn&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; EffectFn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  fn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;deps&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;deps&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    deps&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;effect-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#effect-概述&#34;&gt;#&lt;/a&gt; effect 概述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;effect&lt;/code&gt;  是一个用来注册副作用的函数，它默认会将注册的副作用立即执行一次，并支持传递一个选项参数 &lt;code&gt;options&lt;/code&gt; ，可以配置是否立即执行，将副作用函数返回以便于手动执行 and 配置调度器 &lt;code&gt;scheduler&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;部分变量属性方法介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分变量属性方法介绍&#34;&gt;#&lt;/a&gt; 部分变量，属性，方法介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;activeEffect&lt;/code&gt; &lt;/strong&gt; : 用来存储当前的副作用函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;effectStrack&lt;/code&gt; &lt;/strong&gt; : 因为 &lt;code&gt;effect&lt;/code&gt;  可能会嵌套  &lt;code&gt;effect&lt;/code&gt;  ，所以需要用 &lt;code&gt;effectStrack&lt;/code&gt;  来存储这些嵌套的&lt;strong&gt;副作用函数&lt;/strong&gt;，当内层的 &lt;code&gt;effect&lt;/code&gt;  执行完毕后，将&lt;strong&gt;内层的副作用函数&lt;/strong&gt;弹出，将&lt;strong&gt;外层的副作用函数&lt;/strong&gt;赋值给用来存储&lt;strong&gt;当前的副作用函数&lt;/strong&gt;的 &lt;code&gt;activeEffect&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;targetMap&lt;/code&gt; &lt;/strong&gt;: 一种 &lt;code&gt;WeakMap&lt;/code&gt;  结构，用来存储 &lt;code&gt;target&lt;/code&gt; ,  &lt;code&gt;key&lt;/code&gt; , &lt;strong&gt;副作用&lt;/strong&gt;之间的对应关系。&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/14/mVXrd.png&#34; alt=&#34;关系图&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;effectFn.deps&lt;/code&gt; &lt;/strong&gt;: 类型为 &lt;code&gt;Array&amp;lt;Set&amp;gt;&lt;/code&gt; ，用来存储保存的有该副作用的 &lt;code&gt;target&lt;/code&gt;  对应的 &lt;code&gt;key&lt;/code&gt;  对应的 &lt;code&gt;Set&lt;/code&gt; , 以便于在副作用函数&lt;strong&gt;再次执行&lt;/strong&gt;的时候调用的 &lt;code&gt;clearUp&lt;/code&gt;  方法来将 &lt;code&gt;effectFn&lt;/code&gt;  从这些 &lt;code&gt;Set&lt;/code&gt;  中移除。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;clearUp&lt;/code&gt; &lt;/strong&gt; : 利用 &lt;code&gt;effectFn.deps&lt;/code&gt;  将 &lt;code&gt;effectFn&lt;/code&gt;  从其所在的 &lt;code&gt;Set&lt;/code&gt;  中移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;详细步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#详细步骤&#34;&gt;#&lt;/a&gt; 详细步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义 &lt;code&gt;effectFn&lt;/code&gt;  增强版副作用函数，以便于增强它，并做进一步处理
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;effectFn&lt;/code&gt;  函数将做的事情
&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;clearUp&lt;/code&gt;  来将 &lt;code&gt;effectFn&lt;/code&gt;  从其所在的 &lt;code&gt;Set&lt;/code&gt;  中移除，从而避免 &lt;code&gt;trigger&lt;/code&gt;  触发没必要的副作用函数。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;effectFn&lt;/code&gt;  赋值给 &lt;code&gt;activeEffect&lt;/code&gt; , 并将 &lt;code&gt;effectFn&lt;/code&gt;  放进 &lt;code&gt;effectStack&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;fn&lt;/code&gt;  副作用函数，将返回值保存进 &lt;code&gt;res&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;effectFn&lt;/code&gt;  从 &lt;code&gt;activeEffect&lt;/code&gt;  中弹出，并将 &lt;code&gt;activeEffect&lt;/code&gt;  的最后一个元素赋值给 &lt;code&gt;activeEffect&lt;/code&gt; （让 &lt;code&gt;activeEffect&lt;/code&gt;  指向外层的副作用函数）&lt;/li&gt;
&lt;li&gt;返回 &lt;code&gt;res&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;effectFn&lt;/code&gt;  函数上添加属性，增强它
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;effectFn&lt;/code&gt;  上添加 &lt;code&gt;deps&lt;/code&gt;  属性，用来存储保存有该副作用函数的 &lt;code&gt;target&lt;/code&gt;  对应的 &lt;code&gt;key&lt;/code&gt;  的对应的 &lt;code&gt;Set&lt;/code&gt; , 以提供给 &lt;code&gt;clearUp&lt;/code&gt;  函数使用。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;effectFn&lt;/code&gt;  函数上添加 &lt;code&gt;options&lt;/code&gt;  属性，保存副作用函数的配置选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据 &lt;code&gt;effectFn&lt;/code&gt;  函数的配置选项 &lt;code&gt;options&lt;/code&gt;  属性，来进行下一步的操作
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;effectFn.options.lazy&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt; ，则不立即执行 &lt;code&gt;effectFn&lt;/code&gt; , 而是将 &lt;code&gt;effectFn&lt;/code&gt;  返回，手动调用。&lt;/li&gt;
&lt;li&gt;如果为 &lt;code&gt;false&lt;/code&gt; ， 则立即执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;track-方法剖析与实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#track-方法剖析与实现&#34;&gt;#&lt;/a&gt; track 方法剖析与实现&lt;/h1&gt;
&lt;h2 id=&#34;完整代码-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码-2&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h2&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;activeEffect&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; depsMap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; targetMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;depsMap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; targetMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;depsMap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; deps &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; depsMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;deps&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; depsMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;deps &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  deps&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;activeEffect&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  activeEffect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;deps&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;deps&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;track-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#track-概述&#34;&gt;#&lt;/a&gt; track 概述&lt;/h2&gt;
&lt;p&gt;用来收集副作用，将副作用存储进对应的 &lt;code&gt;target&lt;/code&gt;  对应的 &lt;code&gt;key&lt;/code&gt;  对应的 &lt;code&gt;Set&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;详细步骤-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#详细步骤-2&#34;&gt;#&lt;/a&gt; 详细步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;边界处理
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;activeEffect == undefined&lt;/code&gt; ，则直接返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将副作用函数存储进对应的 &lt;code&gt;Set&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;targetMap.get(target)&lt;/code&gt;  取出 &lt;code&gt;target&lt;/code&gt;  对应的 &lt;code&gt;Map&lt;/code&gt; （里面存储的是 &lt;code&gt;key&lt;/code&gt;  和对应的 &lt;code&gt;Set&lt;/code&gt; ）并赋值给 &lt;code&gt;depsMap&lt;/code&gt; 。如果 &lt;code&gt;depsMao&lt;/code&gt;  为空，则调用 &lt;code&gt;targetMap.set(target, (depsMap = new Map))&lt;/code&gt;  新建一个 &lt;code&gt;Map&lt;/code&gt;  存进 &lt;code&gt;targetMap&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;depsMap.get(key)&lt;/code&gt;  取出 &lt;code&gt;key&lt;/code&gt;  对应的 &lt;code&gt;Set&lt;/code&gt;  (里面存储的是 &lt;code&gt;key&lt;/code&gt;  对应的副作用函数) 并赋值给 &lt;code&gt;deps&lt;/code&gt; 。如果 &lt;code&gt;deps&lt;/code&gt;  不存在，则调用 &lt;code&gt;depsMap.set(key, (deps = new Set()))&lt;/code&gt;  新建一个 &lt;code&gt;Set&lt;/code&gt;  存进 &lt;code&gt;depsMap&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;deps.add(activeEffect)&lt;/code&gt;  将副作用函数存储进 &lt;code&gt;Set&lt;/code&gt; .&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;将存有该副作用函数的 &lt;code&gt;Set&lt;/code&gt;  存储进 &lt;code&gt;activeEffect.deps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;trigger-方法剖析与实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trigger-方法剖析与实现&#34;&gt;#&lt;/a&gt; trigger 方法剖析与实现&lt;/h1&gt;
&lt;h2 id=&#34;完整代码-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码-3&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h2&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; depsMap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; targetMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;depsMap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; effects &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; depsMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;effects&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; effectsToRun&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Set&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;EffectFn&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  effects&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFn &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; activeEffect&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      effectsToRun&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  effectsToRun&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFnToRun&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFnToRun&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;scheduler&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      effectFnToRun&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;scheduler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;effectFnToRun&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;effectFnToRun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;trigger-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trigger-概述&#34;&gt;#&lt;/a&gt; trigger 概述&lt;/h2&gt;
&lt;p&gt;用来调用 &lt;code&gt;track&lt;/code&gt;  收集的副作用，如果有调度器，则调用调度器。&lt;/p&gt;
&lt;h3 id=&#34;详细步骤-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#详细步骤-3&#34;&gt;#&lt;/a&gt; 详细步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;取出对应的 &lt;code&gt;target&lt;/code&gt;  的对应的 &lt;code&gt;key&lt;/code&gt;  的对应的 &lt;code&gt;Set&lt;/code&gt; , 并做边界处理
&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;targetMap.get(target)&lt;/code&gt;  取出 &lt;code&gt;target&lt;/code&gt;  对应的 &lt;code&gt;Map&lt;/code&gt;  赋值给 &lt;code&gt;depsMap&lt;/code&gt; 。如果 &lt;code&gt;depsMap&lt;/code&gt;  不存在，则直接返回&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;depsMap.get(key)&lt;/code&gt;  取出 &lt;code&gt;key&lt;/code&gt;  对应的 &lt;code&gt;Set&lt;/code&gt;  并复制给 &lt;code&gt;effects&lt;/code&gt; ，如果 &lt;code&gt;effects&lt;/code&gt;  不存在，则直接返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;定义一个 &lt;code&gt;effectsToRun&lt;/code&gt; , 将 &lt;code&gt;effects&lt;/code&gt;  存储的副作用函数全部添加到 &lt;code&gt;effectsToRun&lt;/code&gt; , 以等待遍历 &lt;code&gt;effectsToRun&lt;/code&gt;  执行存储的所有副作用函数。（之所以这么做是因为，副作用函数在执行的时候会先调用 &lt;code&gt;clearUp&lt;/code&gt;  将其从 &lt;code&gt;Set&lt;/code&gt;  中删除，执行 &lt;code&gt;fn&lt;/code&gt;  的时候又会将 &lt;code&gt;effectFn&lt;/code&gt;  添加到 &lt;code&gt;Set&lt;/code&gt; , 这样就会陷入无限循环， 所以定义一个新的 &lt;code&gt;Set&lt;/code&gt;  来避免这个问题）&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;effectsToRun.forEach&lt;/code&gt;  来遍历它，并调用存储的副作用函数，但是在调用前会做判断，如果 &lt;code&gt;effectToRun.options.scheduler&lt;/code&gt;  存在的话，会调用 &lt;code&gt;effectToRun.options.sheduler&lt;/code&gt;  而不是调用 &lt;code&gt;effectToRun&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
        <category term="Vue" scheme="https://zimu-66ccff.github.io/categories/note/front-end/vue/" />
        <category term="Vue原理实现" scheme="https://zimu-66ccff.github.io/categories/note/front-end/vue/vueCore/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="Vue" scheme="https://zimu-66ccff.github.io/tags/Vue/" />
        <category term="Vue原理刨析" scheme="https://zimu-66ccff.github.io/tags/Vue%E5%8E%9F%E7%90%86%E5%88%A8%E6%9E%90/" />
        <category term="Vue响应式模块刨析" scheme="https://zimu-66ccff.github.io/tags/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E6%A8%A1%E5%9D%97%E5%88%A8%E6%9E%90/" />
        <category term="effect" scheme="https://zimu-66ccff.github.io/tags/effect/" />
        <updated>2023-02-14T05:57:48.000Z</updated>
    </entry>
    <entry>
        <id>https://zimu-66ccff.github.io/reactivity-reactive/</id>
        <title>Vue响应式模块-reactivity-reactive</title>
        <link rel="alternate" href="https://zimu-66ccff.github.io/reactivity-reactive/"/>
        <content type="html">&lt;h1 id=&#34;ractive-方法剖析与实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ractive-方法剖析与实现&#34;&gt;#&lt;/a&gt; ractive 方法剖析与实现&lt;/h1&gt;
&lt;h2 id=&#34;完整代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码实现&#34;&gt;#&lt;/a&gt; 完整代码实现&lt;/h2&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; isArray&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; isObject&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hasChanged &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;../utils/index&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; effect&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; track&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; trigger &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./effect&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reactiveMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;has&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; reactiveMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; reactiveProxy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Record&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;symbol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;_isReactive&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; newValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; oldValue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; oldLength &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;length&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; newValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasChanged&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;oldValue&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; newValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            oldLength &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;length&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            key &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;length&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;length&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  reactiveMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reactiveProxy&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; reactiveProxy&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__isReactive&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;边界处理对特殊情况的处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边界处理对特殊情况的处理&#34;&gt;#&lt;/a&gt; 边界处理（对&lt;strong&gt;特殊情况&lt;/strong&gt;的处理）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt;  的类型不为  &lt;code&gt;Object&lt;/code&gt;  时：
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;isObject&lt;/code&gt;  方法判断 &lt;code&gt;target&lt;/code&gt;  的类型是否为 &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isObject&lt;/code&gt;  方法的返回值为 &lt;code&gt;false&lt;/code&gt;  时，即 &lt;code&gt;target&lt;/code&gt;  的类型不为 &lt;code&gt;Object&lt;/code&gt; , 则直接返回 &lt;code&gt;target&lt;/code&gt; , 不做接下来的响应式处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; &lt;strong&gt; 本身&lt;/strong&gt;已经为一个&lt;strong&gt;响应式代理&lt;/strong&gt;时:
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;isRective&lt;/code&gt;  方法判断 &lt;code&gt;target&lt;/code&gt;  是否为&lt;strong&gt;响应式代理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isReactive&lt;/code&gt;  方法的返回值为 &lt;code&gt;true&lt;/code&gt;  时， 即 &lt;code&gt;target&lt;/code&gt;  已经为一个&lt;strong&gt;响应式代理&lt;/strong&gt;，则直接返回 &lt;code&gt;target&lt;/code&gt; ，不再做接下来的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt;  已经&lt;strong&gt;被做过响应式代理&lt;/strong&gt;时:
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;reactiveMap.has(target)&lt;/code&gt;  方法来判断 &lt;code&gt;target&lt;/code&gt;  是否已经被做过&lt;strong&gt;响应式代理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reactiveMap.has(target)&lt;/code&gt;  方法返回值为 &lt;code&gt;true&lt;/code&gt;  时， 即 &lt;code&gt;target&lt;/code&gt;  已经被做过&lt;strong&gt;响应式代理&lt;/strong&gt;，则直接调用 &lt;code&gt;reactiveMap.get(targey)&lt;/code&gt;  方法返回&lt;strong&gt;它的响应值代理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;响应式处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应式处理&#34;&gt;#&lt;/a&gt; 响应式处理&lt;/h2&gt;
&lt;h3 id=&#34;整体概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整体概述&#34;&gt;#&lt;/a&gt; 整体概述&lt;/h3&gt;
&lt;p&gt;利用 &lt;code&gt;Proxy&lt;/code&gt;  对 &lt;code&gt;target&lt;/code&gt;  做一个&lt;strong&gt;数据代理&lt;/strong&gt;，拦截其 &lt;code&gt;getter&lt;/code&gt;  and  &lt;code&gt;setter&lt;/code&gt; , 最后返回这个&lt;strong&gt;数据代理&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;详细步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#详细步骤&#34;&gt;#&lt;/a&gt; 详细步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拦截 getter&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;做边界处理&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if(key === &#39;_isReactive&#39;)&lt;/code&gt;  判断其要获取的 &lt;code&gt;key&lt;/code&gt;  是否为 &lt;code&gt;_isReactive&lt;/code&gt; , 当 &lt;code&gt;if&lt;/code&gt;  判断为 &lt;code&gt;true&lt;/code&gt;  时，则直接返回 &lt;code&gt;false&lt;/code&gt; ，&lt;strong&gt;不再进行接下来的处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;收集副作用&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;track&lt;/code&gt;  方法来收集&lt;strong&gt;副作用函数&lt;/strong&gt;，将其收集到 &lt;code&gt;target&lt;/code&gt;  对应的 &lt;code&gt;key&lt;/code&gt;  的对应的 &lt;code&gt;Set&lt;/code&gt;  里面，等待 &lt;code&gt;setter&lt;/code&gt;  被触发，并修改 &lt;code&gt;target[key]&lt;/code&gt;  的时候调用 &lt;code&gt;trigger&lt;/code&gt;  来将这个 &lt;code&gt;Set&lt;/code&gt;  里面存储的&lt;strong&gt;副作用函数&lt;/strong&gt;一一触发.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ps&lt;/strong&gt;: &lt;em&gt;&lt;a href=&#34;https://zimu-66ccff.github.io/reactivity-effect/&#34;&gt;(track 方法的讲解请点击这里奥)&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;返回 &lt;code&gt;target[key]&lt;/code&gt;  的值，做深度响应式处理&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;Reflect.get(target, key)&lt;/code&gt;  取出 &lt;code&gt;target[key]&lt;/code&gt;  的值&lt;/li&gt;
&lt;li&gt;判断 &lt;code&gt;target[key]&lt;/code&gt;  的值的类型是否为 &lt;code&gt;Object&lt;/code&gt; , 当为 &lt;code&gt;Object&lt;/code&gt;  时，则返回 &lt;code&gt;reactive(target[key])&lt;/code&gt;  对其做深度响应式处理，当不为 &lt;code&gt;Object&lt;/code&gt;  时，则直接返回 &lt;code&gt;target[key]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拦截 setter&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;取出相关数据， 进行更新操作&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;Reflect.get&lt;/code&gt;  方法取出没有修改前的 &lt;code&gt;target[key]&lt;/code&gt;  即 &lt;code&gt;oldValue&lt;/code&gt;  and 没有修改前的 &lt;code&gt;target[length]&lt;/code&gt;  即 &lt;code&gt;oldLength&lt;/code&gt; , 利用 &lt;code&gt;Reflect.set&lt;/code&gt;  进行对 &lt;code&gt;target[key]&lt;/code&gt;  的更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;判断是否需要调用对应的 &lt;code&gt;key&lt;/code&gt;  对应的 &lt;code&gt;Set&lt;/code&gt;  存储的副作用函数&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;hasChanged()&lt;/code&gt;  判断新旧值是否发生了改变，如果没有改变则不进行接下来的处理。如果发生了改变，则调用 &lt;code&gt;trigger&lt;/code&gt;  方法，来调用对应的 &lt;code&gt;key&lt;/code&gt;  对应的 &lt;code&gt;Set&lt;/code&gt;  存储的副作用函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ps&lt;/strong&gt;: &lt;em&gt;&lt;a href=&#34;https://zimu-66ccff.github.io/reactivity-effect/&#34;&gt;trigger 方法的讲解请点击这里奥&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;判断 &lt;code&gt;target&lt;/code&gt;  是否为 &lt;code&gt;Array&lt;/code&gt; , 并且数组的长度是否发生了改变&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;isArray&lt;/code&gt;  判断 &lt;code&gt;target&lt;/code&gt; ，并利用 &lt;code&gt;Reflect.get()&lt;/code&gt;  取得更新后数组的长度，并与之前数组的长度 &lt;code&gt;oldLength&lt;/code&gt;  比较，看是否发生了改变，如果发生了改变，则调用 &lt;code&gt;tigger&lt;/code&gt;  方法，来调用 &lt;code&gt;length&lt;/code&gt;  对应的 &lt;code&gt;Set&lt;/code&gt;  存储的副作用。&lt;em&gt;（之所以要这样做，是因为当给数组增加 or 删除元素的时候，数组的 &lt;code&gt;length&lt;/code&gt;  就已经改变了， 当对 &lt;code&gt;length&lt;/code&gt;  的更新的拦截的时候，就会发现新值和旧值是一样的，就不会触发 &lt;code&gt;trigger&lt;/code&gt; ）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将响应式代理存储起来，并返回响应式代理&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;reactiveMap.set&lt;/code&gt;  方法，将响应式代理和 &lt;code&gt;target&lt;/code&gt;  关联起来并存储，以便于做上文的&lt;strong&gt;边界处理&lt;/strong&gt; ( &lt;code&gt;target&lt;/code&gt;  已经被做过响应式代理时)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回响应式代理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
        <category term="Vue" scheme="https://zimu-66ccff.github.io/categories/note/front-end/vue/" />
        <category term="Vue原理实现" scheme="https://zimu-66ccff.github.io/categories/note/front-end/vue/vueCore/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="Vue" scheme="https://zimu-66ccff.github.io/tags/Vue/" />
        <category term="Vue原理刨析" scheme="https://zimu-66ccff.github.io/tags/Vue%E5%8E%9F%E7%90%86%E5%88%A8%E6%9E%90/" />
        <category term="Vue响应式模块刨析" scheme="https://zimu-66ccff.github.io/tags/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E6%A8%A1%E5%9D%97%E5%88%A8%E6%9E%90/" />
        <category term="reactive" scheme="https://zimu-66ccff.github.io/tags/reactive/" />
        <updated>2023-02-14T02:21:11.000Z</updated>
    </entry>
    <entry>
        <id>https://zimu-66ccff.github.io/promiseLearn/</id>
        <title>理解为什么需要Promise</title>
        <link rel="alternate" href="https://zimu-66ccff.github.io/promiseLearn/"/>
        <content type="html">&lt;h1 id=&#34;为什么需要-promise&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要-promise&#34;&gt;#&lt;/a&gt; 为什么需要 Promise？🤔&lt;/h1&gt;
&lt;h2 id=&#34;明白同步任务-and-异步任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#明白同步任务-and-异步任务&#34;&gt;#&lt;/a&gt; 明白同步任务 and 异步任务&lt;/h2&gt;
&lt;p&gt;首先，前端 er 们需要明确一点，在 js 这种单线程的事件循环模型中，一件事情没做完是不能做下一件事情的。这时候睿智的友友们就会说这又咋了呢，会有什么问题吗？哎嘿，还真有问题，问题还大了，要是中间有一件事情耗时太长，导致后面耗时很短的事情做不了怎么办呢？你看，这不就堵车了，还会堵很久。但是我们聪明的前端 er 们马上就有了解决方法，我们先不管那个耗时很长的事情，先做后面的事情，最后再管这个耗时很长的事情不就完事了吗 😁。&lt;br /&gt;
对的，就是这种解决方案，敲黑板 😸，js 中代码分为同步任务和异步任务，异步任务通常为那种可能会耗时很长 or 需要触发条件的，也就是前面说的可能会堵车，还堵很久的那种。同步任务当然就是除了异步任务以外的任务啦。在 js 的执行机制中，会先执行同步任务，等同步任务执行完毕再执行异步任务。&lt;/p&gt;
&lt;h2 id=&#34;早期异步操作的种种问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#早期异步操作的种种问题&#34;&gt;#&lt;/a&gt; 早期异步操作的种种问题&lt;/h2&gt;
&lt;p&gt;早期 js 中只支持定义回调函数来表明异步操作的完成，接下来我们会以 setTimeout 这个异步操作为例子进行讲解。&lt;br /&gt;
试想这样的一种场景，我们需要在 setTimeout 中传递一个回调函数，在几秒后执行，这显然是一个异步操作，它有明显的触发条件，时间。这个回调函数中我们会进行时间到了后我们希望进行的操作，那么问题来了，如果我们在这个回调函数希望对外返回一个数据，以便于进一步的处理怎么办？🤔 这时候你就会发现问题，我们无法直接返回数据。好的，这是一个问题。其实还有更严重的问题，如果我们进一步的操作也是异步操作，比如也是在几秒后执行怎么办，你会想到，再使用一次 setTimeout，再传递一个回调函数。那么现在回调函数里面又嵌套了一个回调函数，如果还要进一步操作呢，还是异步操作呢，再嵌套，嵌套，嵌套，嵌套，最后你一个回调函数里面嵌套了 n 个函数，最后的场景是什么样子呢。回调地狱！！！请看下图。&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/12/cwAbF.png&#34; alt=&#34;回调地狱&#34; /&gt;&lt;/p&gt;
&lt;p&gt;相信前端 er 看到类似这种代码，血压是马上就会上升的，所以可不要写这种代码奥。&lt;/p&gt;
&lt;p&gt;实际上异步操作的问题可不止这些，比如如果异步操作失败了，怎么进行后续的处理，怎么拿到失败的原因，这都是需要解决的。&lt;br /&gt;
那么为了解决，如何拿到返回值； 异步操作失败后如何拿到失败的原因，并进一步处理；如何避免回调地狱；Promise 应运而生 😍&lt;/p&gt;
&lt;h1 id=&#34;promise-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-是什么&#34;&gt;#&lt;/a&gt; Promise 是什么？🤔&lt;/h1&gt;
&lt;p&gt;Promise 是一种异步编程机制，是对回调地狱的一种解决方案。&lt;br /&gt;
Promise 实列则是一种状态机，它有三种基本状态，待定（pending），兑现（fulfilled)， 拒绝 (rejected)，最初的状态为 pending，状态一旦改变，就定了，就不会再发生任何改变了。&lt;/p&gt;
&lt;h1 id=&#34;promise-是怎么解决早期异步操作的疑难杂症的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-是怎么解决早期异步操作的疑难杂症的&#34;&gt;#&lt;/a&gt; Promise 是怎么解决早期异步操作的疑难杂症的 🤔&lt;/h1&gt;
&lt;h2 id=&#34;解决如何拿到返回值当异步操作失败后如何拿到失败的原因并进一步处理的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决如何拿到返回值当异步操作失败后如何拿到失败的原因并进一步处理的问题&#34;&gt;#&lt;/a&gt; 解决如何拿到返回值；当异步操作失败后如何拿到失败的原因，并进一步处理的问题&lt;/h2&gt;
&lt;p&gt;构造函数 Promise（）中可以传递一个回调函数，我们一般称这个回调函数为执行器函数，执行器函数主要有两项职责：1. 初始化期约的异步行为（在执行器函数中进行我们需要执行的异步操作）和控制状态的最终转换（将 Promise 实列的状态由最初的 pending 转换为 fulfilled or rejected）。那么它是怎么来控制状态的最终转换的呢？🤔 很简单，这个执行器函数是自带两个参数的，这两个参数都为函数，我们一般称为 resolve， reject。你可以在 resolve 中传递参数，来返回你需要的数据；可以在 reject 中传递参数，来返回异步操作失败的原因。当你在执行器函数中调用 resolve，Promise 实列的状态就由 pending 变为了 fulfilled（注：这里不是十分准确，需要格外注意一种特别情况，如果返回的也是一个 Promise，那么 Promise 实列的状态将由返回的这个 Promise 决定，为这个 Promise 的状态，不一定为 fulfilled）；同理，当你调用了 reject，Promise 实列的状态就由 pending 变为了 rejected。&lt;br /&gt;
通过执行器函数的两个参数函数，resolve，reject 我们成功的解决了如何拿到返回值，异步操作结束后拿到失败的原因的问题。&lt;br /&gt;
那么我们接下来，解决怎么进一步处理的问题。这里我们就需要知道 Promise 实列上面其实是由一个 then 方法的，不过其实这个方法是定义在 Promise 实列的构造函数的原型上面的。这个 then 方法一样有两个参数函数，一般称为 onResolved, onRejected。当 promise 实列的状态为 fulfilled 的时候，就会执行第一个参数函数，即 onResolved；当 promise 实列的状态为 rejected 的时候，就会执行第二个参数函数，即 onRejected。我们可以在这两个参数函数中写入对应的进一步处理的逻辑。&lt;br /&gt;
至此，我们就解决了如何拿到返回值，拿到异步操作失败的时候失败的原因，并进一步处理的问题ヽ (✿ ﾟ ▽ ﾟ) ノ 😁&lt;/p&gt;
&lt;h2 id=&#34;解决回调地狱的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决回调地狱的问题&#34;&gt;#&lt;/a&gt; 解决回调地狱的问题&lt;/h2&gt;
&lt;p&gt;这里我们需要知道 promise 实列身上的 then 方法是会返回一个 promise 实列的，返回的这个新的实列是基于 onResolved 函数 or onRejected 函数的返回值构建的，是将返回值传递给 Promise.resolve 函数来包装生成新的 promise 实列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1. 当触发的 onResolved or onRejected 函数没有返回值时，会默认返回 undefined 来传递给 Promise.resolve 函数来生成新的成功的 promise 实列。&lt;/li&gt;
&lt;li&gt;2. 当有返回值的时候会将返回值传递给 Promise.resolve 函数来生成新的成功的 promise 实列。&lt;/li&gt;
&lt;li&gt;3. 当返回值为一个 promise 实列的时候会将该 promise 实列传递 Promise.resolve 函数来返回该 promise 实列。&lt;/li&gt;
&lt;li&gt;4. 当在触发的 onResolved or onRejected 函数中抛出了一个错误时，会将该错误传递给 promise.resolve 来返回一个新的失败的 promise 实列。&lt;/li&gt;
&lt;li&gt;5. 当压根没有需要触发的 onResolved or onRejected 函数时，会将调用 then 方法的 Promise 实列原样返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 then 方法固定会返回 promise 实列，这就为链式调用提供了可能，而链式调用便可给嵌套解套，避免嵌套，解决回调地狱。&lt;br /&gt;
至此，也解决了回调地狱的问题。请看下图 😁&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/12/cwD6H.png&#34; alt=&#34;解决回调地狱&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当然，Promise 还有很多的实列方法，这些方法就不一一讲解，读者们下去了可以自行了解。&lt;/p&gt;
</content>
        <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
        <category term="JavaScript" scheme="https://zimu-66ccff.github.io/categories/note/front-end/javaScript/" />
        <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="JS高级" scheme="https://zimu-66ccff.github.io/tags/JS%E9%AB%98%E7%BA%A7/" />
        <category term="Promise" scheme="https://zimu-66ccff.github.io/tags/Promise/" />
        <updated>2023-02-12T10:23:50.000Z</updated>
    </entry>
    <entry>
        <id>https://zimu-66ccff.github.io/mySelf/</id>
        <title>关于我</title>
        <link rel="alternate" href="https://zimu-66ccff.github.io/mySelf/"/>
        <content type="html">&lt;p&gt;一只前端小白&lt;/p&gt;
</content>
        <category term="随笔" scheme="https://zimu-66ccff.github.io/categories/life/" />
        <category term="自我" scheme="https://zimu-66ccff.github.io/tags/%E8%87%AA%E6%88%91/" />
        <updated>2023-02-11T05:49:30.000Z</updated>
    </entry>
</feed>
