{
    "version": "https://jsonfeed.org/version/1",
    "title": "木子亭",
    "subtitle": "那年满身灰白，唯此亭溢彩，今日不染尘埃，静坐此亭相伴",
    "icon": "https://zimu-66ccff.github.io/images/favicon.ico",
    "description": "干净澄澈，真诚自然",
    "home_page_url": "https://zimu-66ccff.github.io",
    "items": [
        {
            "id": "https://zimu-66ccff.github.io/promiseWrite/",
            "url": "https://zimu-66ccff.github.io/promiseWrite/",
            "title": "手写Promise及其相关方法",
            "date_published": "2023-02-16T08:02:20.000Z",
            "content_html": "<h1 id=\"手写-promise\"><a class=\"anchor\" href=\"#手写-promise\">#</a> 手写 promise</h1>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILL</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">REJECT</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">myPromise</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/* 初始化 promise pending 状态 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/* 记录当前 promise 兑现值和拒因 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      记录当前 promise 的 fulfilled 与 rejected 回调</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      使用数组是因为一个 promise 可以接受多次 then,catch 回调，否则只需各存储一个函数即可</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulFilledFns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedFns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        此处存在两次判断 promise 状态，分别是执行 executor 和执行微任务时</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        保证 promise 状态一经确定不再改变</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/* resolve 方法处理 promise 和 thenable 特殊参数 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">myPromise</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/* 使用微任务 API，加入到微任务栈中 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">/* 执行 fulfilled 回调 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulFilledFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>              <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> reason<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>              <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">/* 此处捕获 executor 执行中抛出的错误，若存在错误则 promise 变成拒绝状态 */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulFilledFn<span class=\"token punctuation\">,</span> onRejectedFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/* 根据 Promise A + 标准，若回调不为函数类型则忽视，默认值回调会将状态继续传入下一个 promise 中 */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    onFulFilledFn <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token keyword\">typeof</span> onFulFilledFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onFulFilledFn</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    onRejectedFn <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token keyword\">typeof</span> onRejectedFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejectedFn</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">/* then 方法返回值是一个新 promise */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token comment\">/* 若捕获当前 promise 已经改变状态，则直接调用回调 */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">FULFILL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">/* 捕获 fulfilled 回调错误，捕获到则改变新 promise 状态为拒绝状态 */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>          <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onFulFilledFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          <span class=\"token comment\">/* 返回值传递给下一个 fulfilled 回调 */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">REJECT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>          <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onRejectedFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>          <span class=\"token comment\">/* 返回值传递给下一个 fulfilled 回调 */</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token comment\">/* 若当前 promise 没改变状态 / 改变状态的异步还未执行，先储存回调 */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulFilledFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onFulFilledFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onRejectedFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>onRejectedFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">/* catch 方法类似 then 方法的语法糖 */</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> onRejectedFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>onFinallyFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token comment\">/* finally 无任何影响，仅单独调用，且无任何参数 */</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token function\">onFinallyFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token function\">onFinallyFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"构造函数-constructor-讲解\"><a class=\"anchor\" href=\"#构造函数-constructor-讲解\">#</a> 构造函数 constructor 讲解</h2>\n<ul>\n<li>\n<p>初始化相关属性</p>\n<ol>\n<li>\n<p>初始化状态 status</p>\n<ul>\n<li><code>this.status = PENDING</code>  将状态初始化为 <code>PENDING</code></li>\n</ul>\n</li>\n<li>\n<p>保存 promise 成功时的要传递的值 value 和失败时的原因 reason</p>\n<ul>\n<li><code>this.value = undefined</code> ,  <code>this.reason = undefind</code>  初始化 <code>value</code>  and  <code>reason</code>  用来保存成功时要传递的值，和失败时要传递的原因</li>\n</ul>\n</li>\n<li>\n<p>设计 onFullfilledFns, onRejectedFns 两个数组</p>\n<ul>\n<li><code>this.onFullfilledFns = []</code> ,  <code>this,onRejectedFns = []</code> ，初始化 <code>onFullfilledFns</code> , <code>onRejectedFns</code>  来存储成功时和失败时要触发的 <code>callback</code> 。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>设计 resolve 函数</p>\n<ol>\n<li>\n<p>判断当前 promise 的状态</p>\n<ul>\n<li><code>if (this.status === PENDING)</code>  判断当前 promise 的状态是否为 <code>PENDING</code></li>\n<li>是的话，则进行接下来的操做</li>\n<li>不是的话，则什么都不做（因为 promise 的状态一旦确定就不能再更改。）</li>\n</ul>\n</li>\n<li>\n<p>判断 value 是否为 promise or thenabale</p>\n<ul>\n<li><code>if (value instanceof myPromise || typeof value.then === 'function')</code>  判断 value 是否为 promise or thenable。</li>\n<li>是的话， <code>return value.then(resolve, reject)</code>  则调用 value 的 <code>then</code>  方法并将 <code>resolve</code>  和 <code>reject</code>  作为参数传递， 并结束 resolve 函数的调用，不再进行接下来的操作。这样当 value 的状态发生改变时就会触发 <code>resolve</code>  or  <code>reject</code>  来修改现在这个 promise 的状态。（因为当 <code>resolve</code>  的 <code>value</code>  为 promise or thenable 的时候，当前 promise 的状态将随 value 的状态改变而改变，并保持一致）。</li>\n<li>不是的话，则进行接下来的操作</li>\n</ul>\n</li>\n<li>\n<p>将 promise 状态的更改，以及 promise 状态更改时要触发的响应的回调函数的触发操作，放进微任务里面</p>\n<ul>\n<li>调用 <code>queueMicrotask()</code>  将接下来的操作注册为微任务放进微任务队列</li>\n<li><code>this.status === PENDING</code>  判断当前 promise 的状态是否为 PENDING，是的话进行接下来的操作，不是的话，则不做接下来的操作（这样做也是为了保证 promise 的状态一旦确定就不再改变）</li>\n<li><code>this.status = FULLFILL</code> ,  <code>this.value = value</code> , 将 promise 的状态修改为成功，并将成功的值 value 赋值给 promise.value。</li>\n<li><code>this.onFullfilledFns.forEach((fn) =&gt; fn(this.value))</code>  遍历 <code>onFullfilledFns</code> ，将其中存储的成功时的 <code>callback</code>  全部调用，并将 <code>this.value</code>  作为参数赋值</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>设计 rejeted 函数</p>\n<ol>\n<li>\n<p>判断当前 promise 的状态</p>\n<ul>\n<li><code>if (this.status === PENDING)</code>  判断当前 promise 的状态是否为 <code>PENDING</code></li>\n<li>是的话，则进行接下来的操作</li>\n<li>不是的话，则什么都不做（因为 promise 的状态一旦确定就不能再更改。）</li>\n</ul>\n</li>\n<li>\n<p>将 promise 状态的更改，以及 promise 状态更改时要触发的响应的回调函数的触发操作，放进微任务里面</p>\n<ul>\n<li>调用 <code>queueMicrotask()</code>  将接下来的操作注册为微任务放进微任务队列</li>\n<li><code>this.status === PENDING</code>  判断当前 promise 的状态是否为 PENDING，是的话进行接下来的操作，不是的话，则不做接下来的操作（这样做也是为了保证 promise 的状态一旦确定就不再改变）</li>\n<li><code>this.status = REJECT</code> ,  <code>this.reason = reason</code> , 将 promise 的状态修改为失败，并将成功的值 reason 赋值给 promise.reason。</li>\n<li><code>this.onRejectedFns.forEach((fn) =&gt; fn(this.reason))</code>  遍历 <code>onRejectedFns</code> ，将其中存储的成功时的 <code>callback</code>  全部调用，并将 <code>this.reason</code>  作为参数赋值</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>以 try-catch 的形式调用传递来的 executor 函数，并捕获错误</p>\n<ol>\n<li>在 try 里面调用 <code>executor</code> ，并将 <code>resolve</code>  和 <code>reject</code>  作为参数传递</li>\n<li>在 catch 里面捕获错误，一点捕获到错误，立刻调用 <code>reject</code>  (这样做是因为 executor 执行器函数在执行的时候，一旦发生错误，promise 的状态将马上变成失败)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"then-方法讲解\"><a class=\"anchor\" href=\"#then-方法讲解\">#</a> then 方法讲解</h2>\n<ol>\n<li>判断 onFullfilledFn, onRejectedFn 类型</li>\n</ol>\n<ul>\n<li><code>onFullfilledFn = typeof onFullfilled === 'function ? onFullfilled : (res) =&gt; res</code>  判断 <code>onFullfilledFn</code>  是否为一个函数，当不为函数时，则默认将其赋值为 (res) =&gt; res (这样做时因为根据 Promise A + 标准，若回调不为函数类型则忽视，默认值回调会将状态继续传入下一个 promise 中)。</li>\n<li><code>onRejectedFn</code>  的处理同上</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>new 一个 promise 返回，并在 executor 中做如下操作</p>\n</li>\n<li>\n<p>判断调用 then 方法的 promise 状态</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>状态为 <code>FULLFILL</code>  时</p>\n<ol>\n<li>将接下来的操作放到 try-catch 中</li>\n<li>在 try 中调用 <code>onFullfilledFn</code>  并将调用 <code>then</code>  方法的 promise 的 <code>value</code>  作为参数传递，将返回值赋值给 <code>result</code> ， 调用 <code>resolve</code>  并将 <code>result</code>  作为参数传递，来修改要返回的 promise 的状态。</li>\n<li>在 catch 中捕获错误，一旦捕获到错误，马上调用 <code>reject</code>  将要返回的 promise 修改为失败（之所以这样做是因为 onFullfilledFn, onRejectedFn 执行中发生了错误，则会立即返回一个错误的 promise）</li>\n</ol>\n</li>\n<li>\n<p>状态为 <code>REJECT</code>  时</p>\n<ol>\n<li>将接下来的操作放到 try-catch 中</li>\n<li>在 try 中调用 <code>onRejectedFn</code>  并将调用 <code>then</code>  方法的 promise 的 <code>reason</code>  作为参数传递，将返回值赋值给 <code>result</code> ， 调用 <code>resolve</code>  并将 <code>result</code>  作为参数传递，来修改要返回的 promise 的状态。</li>\n<li>在 catch 中捕获错误，一旦捕获到错误，马上调用 <code>reject</code>  将要返回的 promise 修改为失败（之所以这样做是因为 onFullfilledFn, onRejectedFn 执行中发生了错误，则会立即返回一个错误的 promise）</li>\n</ol>\n</li>\n<li>\n<p>状态为 <code>PENDING</code>  时<br />\n将 <code>FULLFILL</code> ,  <code>REJECT</code>  时要进行的操作，分别封装到两个箭头函数里面（必须用箭头函数，这样 <code>this</code>  才能指向调用 <code>then</code>  方法的 promise），在分别添加到调用 <code>then</code>  方法的 promise 的 <code>onFullfilledFns</code>  and  <code>onRejectedFns</code>  中。</p>\n</li>\n</ul>\n<h1 id=\"手写-promiseall-方法\"><a class=\"anchor\" href=\"#手写-promiseall-方法\">#</a> 手写 Promise.all 方法</h1>\n<h2 id=\"完整代码-2\"><a class=\"anchor\" href=\"#完整代码-2\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">PromiseAll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 没有传入参数 or 传入的参数内部没有迭代器的时候会返回一个错误的 promise</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> promises<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'argument is not iterator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将迭代器对象转化为数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>promises<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 处理空数组的情况</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> resolvedCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> promiseNum <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 判断数组元素是否为 promise</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>promise <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      promise</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          resolvedCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedCount <span class=\"token operator\">===</span> promiseNum<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"promiseall-方法实现讲解\"><a class=\"anchor\" href=\"#promiseall-方法实现讲解\">#</a> Promise.all 方法实现讲解</h2>\n<ul>\n<li>返回一个 promise, 在 executor 里进行接下来的操作</li>\n<li>判断传递的参数 <code>promises</code>  是否可迭代，参数是否为空\n<ul>\n<li><code>if (promises == null || typeof promises[Symbol.iterator] !== 'function')</code>  进行判断</li>\n<li>如果参数为空 or 参数不能迭代，则调用抛出一个错误，让返回的 promise 状态变为失败</li>\n<li>如果有参数并且可以迭代，则进行接下来的操作</li>\n</ul>\n</li>\n<li>将可迭代的参数转换为数组\n<ul>\n<li><code>promises = [...promises]</code></li>\n</ul>\n</li>\n<li>判断转换为数组后的参数是否为空，并进行相关操作\n<ul>\n<li>如果数组为空，则调用 <code>resolve</code>  将一个空数组作为参数传递，让返回的 promise 状态变为成功</li>\n<li>如果数组不为空，则进行接下来的接下来的操作</li>\n</ul>\n</li>\n<li>初始化相关变量\n<ul>\n<li><code>promisesNum = promises.length</code>  保存参数数组元素的数量</li>\n<li><code>resolvedCount = 0</code>  保存已经处理过的 promise 的数量</li>\n<li><code>values = []</code>  保存处理过的 promise 的 <code>value</code></li>\n</ul>\n</li>\n<li>遍历参数数组，并进行相关处理\n<ul>\n<li>判断数组元素是否为 promise\n<ul>\n<li>不是 promise 则调用 <code>Promise.resolve()</code>  将其转换为 promise</li>\n<li>是 promise，则直接进行接下来的操作</li>\n</ul>\n</li>\n<li>对已经是 promise 的数组元素调用 <code>then</code>  方法\n<ul>\n<li>调用 <code>then</code>  方法，传递 promise 成功时的 <code>callback</code> ，在 <code>callback</code>  里面将参数 <code>res</code>  存储进 <code>values</code> ，并且 <code>resolvedCount++</code>  计数器加一， <code>resolvedCount === promiseNum</code>  判断已经处理过的数组元素的数量和数组的元素的数量，是否相等，相等时则直接调用 <code>resolve(values)</code> ，将返回的 promise 的状态改为成功</li>\n</ul>\n</li>\n<li>对已经时 promise 的数组元素调用 <code>catch</code>  方法捕获错误\n<ul>\n<li>一旦捕获到错误，直接调用 <code>reject(err)</code> ，将返回的 promise 的状态改为失败</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"手写-promiseany-方法\"><a class=\"anchor\" href=\"#手写-promiseany-方法\">#</a> 手写 Promise.any 方法</h1>\n<h2 id=\"完整代码-3\"><a class=\"anchor\" href=\"#完整代码-3\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">PromiseAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> promises<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrgument is not iterator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>promises<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> rejectedCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> promiseNum <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> errs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>promise <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      promise</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          errs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          rejectedCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rejectedCount <span class=\"token operator\">===</span> promiseNum<span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>errs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"手写-promiserace-方法\"><a class=\"anchor\" href=\"#手写-promiserace-方法\">#</a> 手写 Promise.race 方法</h1>\n<h2 id=\"完整代码-4\"><a class=\"anchor\" href=\"#完整代码-4\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">promiseRace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> promises<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrgument is not iterator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>promises<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>promise <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      promise</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "JS高级",
                "Promise"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/eventLoop/",
            "url": "https://zimu-66ccff.github.io/eventLoop/",
            "title": "理解事件循环",
            "date_published": "2023-02-16T02:20:17.000Z",
            "content_html": "<h1 id=\"浏览器中的事件循环\"><a class=\"anchor\" href=\"#浏览器中的事件循环\">#</a> 浏览器中的事件循环</h1>\n<h2 id=\"同步与异步\"><a class=\"anchor\" href=\"#同步与异步\">#</a> 同步与异步</h2>\n<p>浏览器是<strong>单线程</strong>的，所以为了不堵塞代码的运行，我们将任务分为了<strong>同步任务</strong>，和<strong>异步任务</strong>（ <code>setTimeout</code>  和 <code>setInterval</code> 、 <code>axios</code> 、事件绑定等这种带回调函数的），那么同步任务和异步任务又是按照怎样的顺序进入主线程执行的呢，废话不多说，直接上图好叭 😎<br />\n<img data-src=\"https://i.328888.xyz/2023/02/16/mJuAZ.png\" alt=\"事件循环\" /></p>\n<p>先看一段代码，我们会结合这张图和代码来先简单认识一下同步和异步的执行</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mKZNF.png\" alt=\"演示代码\" /><br />\n执行的结果很简单 start -&gt; end -&gt; 时间到了</p>\n<ol>\n<li>整个  <code>script</code>  代码进入主线程，遇到<strong>同步任务</strong>  <code>start</code>  的打印，执行打印</li>\n<li>遇到<strong>异步任务</strong>  <code>setTimeout</code> ，将 setTimeout 放到 <strong>Event Table</strong> 开始计时（注：setTimeout 回调函数被调用的前提是时间到了，所以是在 <strong>Event Table</strong> 中等待计时结束，如果是其他的回调，例如 on 绑定的事件，则是在 Table 中等待事件被触发）</li>\n<li>遇到<strong>同步任务</strong>  <code>end</code>  的打印，执行打印，同步任务执行完毕，<strong>monitoring process</strong> 进程检测到主线程为空，开始去 <strong>Event Queue</strong> 那里检查是否有等待被调用的函数</li>\n<li>setTimeout 的计时结束，将其放到 <strong>Event Queue</strong> 中（<strong>monitoring process</strong> 进程检测到 <strong>Event Queue</strong> 存在等待被调用的函数，就将 setTimeout 的回调函数放进主线程执行）</li>\n</ol>\n<p>是不是觉得还是很简单的，那么我们现在开始上难度，将异步任务细分为<strong>宏任务</strong>和<strong>微任务</strong>，进一步认识事件循环</p>\n<h2 id=\"宏任务微任务\"><a class=\"anchor\" href=\"#宏任务微任务\">#</a> 宏任务，微任务</h2>\n<p><strong>异步任务</strong>可以细分为<strong>宏任务</strong>，<strong>微任务</strong></p>\n<p>宏任务（<em>task</em>）大概包括：</p>\n<ul>\n<li>script (整体代码)</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI render</li>\n</ul>\n<p>微任务（<em>jobs</em>）大概包括：</p>\n<ul>\n<li>process.nextTick</li>\n<li>Promise.then( )</li>\n<li>Async/Await (实际就是 promise)</li>\n<li>MutationObserver (html5 新特性)</li>\n</ul>\n<h2 id=\"简述事件循环\"><a class=\"anchor\" href=\"#简述事件循环\">#</a> 简述事件循环：</h2>\n<p>执行<strong>宏任务</strong>，然后执行该<strong>宏任务产生的微任务</strong>，若<strong>微任务在执行过程中产生了新的微任务</strong>，则<strong>继续执行微任务</strong>，微任务执行完毕后，<strong>再回到宏任务</strong>中进行下一轮循环。</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mKIJw.png\" alt=\"事件循环\" /></p>\n<p>光这样大家可能不会很理解，那么我们上例子，结合例子来分析讲解</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mK7Xy.png\" alt=\"代码实列\" /></p>\n<p>第一轮事件循环分析如下：</p>\n<ul>\n<li>整体 <code>script</code>  代码作为第一个宏任务进入主线程，遇到同步任务 <code>console.log</code> ，输出 1。</li>\n<li>遇到宏任务 <code>setTimeout</code> ，其回调函数被分发到<strong>宏任务 Event Queue</strong> 中（注：setTimeout 是先被放到<strong> Event Table</strong> 中进行计时的，等到时间到了，其回调函数才放到宏任务<strong> Event Queue</strong> 中，并不是直接就放到宏任务<strong> Event Queue</strong>）。我们暂且记为<em> setTimeout1</em>。</li>\n<li>遇到微任务 <code>process.nextTick()</code> ，其回调函数被分发到<strong>微任务 Event Queue</strong> 中。我们记为<em> process1</em>。</li>\n<li>遇到 Promise，new Promise 里面的参数函数作为<strong>同步任务</strong>直接执行，输出 7。then 里面的回调函数作为微任务被分发到<strong>微任务 Event Queue 中</strong>。我们记为<em> then1</em>。</li>\n<li>又遇到了宏任务 <code>setTimeout</code> ，其回调函数被分发到<strong>宏任务 Event Queue</strong> 中，我们记为<em> setTimeout2</em>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务 Event Queue</th>\n<th>微任务 Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout1</td>\n<td>process1</td>\n</tr>\n<tr>\n<td>setTimeout2</td>\n<td>then1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是第一轮事件循环宏任务结束时各 Event Queue 的情况，此时已经输出了 1 和 7。</li>\n</ul>\n<p><strong>第一轮宏任务结束</strong>后，开始处理产生的<strong>微任务</strong></p>\n<ul>\n<li>执行 process1, 输出 6。</li>\n<li>执行 then1，输出 8。</li>\n</ul>\n<hr />\n<p><strong>第一轮事件循环正式结束</strong>，接着开始<strong>第二轮</strong>，从<strong>宏任务 Event Queue</strong> 中取出<strong>宏任务 setTimeout1</strong> 开始处理：</p>\n<ul>\n<li>首先执行同步任务输出 2。接下来遇到了微任务 <code>process.nextTick()</code> ，同样将其分发到<strong>微任务 Event Queue</strong> 中，记为<em> process2</em>。</li>\n<li><code>new Promise</code>  参数里的参数函数作为<strong>同步任务</strong>立即执行输出 4，<strong>微任务</strong> <code>then</code>  也分发到<strong>微任务 Event Queue</strong> 中，记为<em> then2</em></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务 Event Queue</th>\n<th>微任务 Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout2</td>\n<td>process2</td>\n</tr>\n<tr>\n<td></td>\n<td>then2</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是第二轮事件循环宏任务结束时各 Event Queue 的情况，此时已经输出了 2 和 4</li>\n</ul>\n<p><strong>第二轮宏任务结束</strong>，开始处理产生的<strong>微任务</strong>：</p>\n<ul>\n<li>执行 process2, 输出 3。</li>\n<li>执行 then2，输出 5。</li>\n</ul>\n<hr />\n<p><strong>第二轮事件循环正式结束</strong>，接着开始<strong>第三轮</strong>，从<strong>宏任务 Event Queue</strong> 中取出宏任务 <code>setTimeout2</code>  开始处理：</p>\n<ul>\n<li>首先执行同步任务输出 9。接下来遇到了微任务 <code>process.nextTick()</code> ，同样将其分发到<strong>微任务 Event Queue</strong> 中，记为<em> process3</em>。</li>\n<li><code>new Promise</code>  参数里的参数函数作为同步任务立即执行输出 11，微任务 <code>then</code>  也分发到<strong>微任务 Event Queue</strong> 中，记为<em> then3</em></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务 Event Queue</th>\n<th>微任务 Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>process3</td>\n</tr>\n<tr>\n<td></td>\n<td>then3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是<strong>第三轮事件循环宏任务结束</strong>时各 Event Queue 的情况，此时已经输出了 9 和 11。</li>\n</ul>\n<p><strong>第三轮宏任务结束</strong>，开始处理产生的<strong>微任务</strong>：</p>\n<ul>\n<li>执行 process3, 输出 10。</li>\n<li>执行 then3，输出 12。</li>\n</ul>\n<p>第三次事件循环结束，整个事件循环结束，共经历了三次循环，完整的输出为 1，7，6，8，2，4，3，5，9，11，10，12</p>\n<h2 id=\"asyncawait-执行顺序\"><a class=\"anchor\" href=\"#asyncawait-执行顺序\">#</a> async/await 执行顺序</h2>\n<p>首先我们来看一段代码：<br />\n<img data-src=\"https://i.328888.xyz/2023/02/16/mMF2Q.png\" alt=\"代码实列\" /></p>\n<p>输出结果为：script start =&gt; async2 end =&gt; Promise =&gt; script end =&gt; async1 end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</p>\n<p>如果 await 后面直接跟的为一个<strong>变量</strong>，比如：await 1；这种情况的话相当于<strong>直接把 await 后面的代码注册为一个微任务</strong>，可以简单理解为 <strong>promise.then (await 下面的代码)</strong>。然后跳出 async1 函数，执行其他代码，当遇到 promise 函数的时候，会注册 promise.then () 函数到微任务队列，注意此时微任务队列里面已经存在 await 后面的微任务。所以这种情况会先执行 await 后面的代码（async1 end），再执行 async1 函数后面注册的微任务代码 (promise1,promise2)。</p>\n<p>我们再来看另外一段代码：</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mMSpX.png\" alt=\"代码实列\" /></p>\n<p>输出结果为： script start =&gt; async2 end =&gt; Promise =&gt; script end =&gt; async2 end1 =&gt; promise1 =&gt; promise2 =&gt; async1 end =&gt; setTimeout</p>\n<p>如果 await 后面跟的为<strong>一个异步函数的调用</strong>，此时执行完 await<strong> 并不先把 await 后面的代码放到微任务队列中去，而是执行完 await 之后，直接跳出 async1 函数，执行其他代码</strong>。然后遇到 promise 的时候，把 promise.then 注册为微任务。<strong>其他代码执行完毕后，需要回到 async1 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中</strong>，注意此时微任务队列中是有之前注册的微任务的。所以这种情况会先执行 async1 函数之外的微任务 (promise1,promise2)，然后才执行 async1 内注册的微任务 (async1 end). <strong>可以理解为，这种情况下，await 后面的代码会在本轮循环的最后被执行。</strong></p>\n<p>总的来说：如果 await 后面是一个变量，则直接把 await 后面的代码放到微任务队列里面。如果后面为一个异步函数的调用，则等到本轮循环中宏任务执行完毕后再把 await 后面的代码放到微任务队列，也就是说这个时候 await 后面的代码时是本轮循环中的微任务队列中的最后一个微任务，会在本轮循环的最后被执行。</p>\n",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "浏览器",
                "JS高级",
                "事件循环"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/reactivity-effect/",
            "url": "https://zimu-66ccff.github.io/reactivity-effect/",
            "title": "Vue响应式模块-reactivity-effect",
            "date_published": "2023-02-14T05:57:48.000Z",
            "content_html": "<h1 id=\"effect-方法剖析与实现\"><a class=\"anchor\" href=\"#effect-方法剖析与实现\">#</a> effect 方法剖析与实现</h1>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">EffectFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  deps<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  scheduler<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> EffectFn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  lazy<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> activeEffect<span class=\"token operator\">:</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> effectStarck<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> targetMap<span class=\"token operator\">:</span> WeakMap<span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  object<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> effectFn<span class=\"token operator\">:</span> <span class=\"token function-variable function\">EffectFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">clearUp</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    activeEffect <span class=\"token operator\">=</span> effectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    effectStarck<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    effectStarck<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    activeEffect <span class=\"token operator\">=</span> effectStarck<span class=\"token punctuation\">[</span>effectStarck<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  effectFn<span class=\"token punctuation\">.</span>deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  effectFn<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">.</span>options<span class=\"token operator\">?.</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> effectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token function\">effectFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">clearUp</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> EffectFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  fn<span class=\"token punctuation\">.</span>deps<span class=\"token operator\">?.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    deps<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"effect-概述\"><a class=\"anchor\" href=\"#effect-概述\">#</a> effect 概述</h2>\n<p><code>effect</code>  是一个用来注册副作用的函数，它默认会将注册的副作用立即执行一次，并支持传递一个选项参数 <code>options</code> ，可以配置是否立即执行，将副作用函数返回以便于手动执行 and 配置调度器 <code>scheduler</code></p>\n<h2 id=\"部分变量属性方法介绍\"><a class=\"anchor\" href=\"#部分变量属性方法介绍\">#</a> 部分变量，属性，方法介绍</h2>\n<ul>\n<li><strong> <code>activeEffect</code> </strong> : 用来存储当前的副作用函数</li>\n<li><strong> <code>effectStrack</code> </strong> : 因为 <code>effect</code>  可能会嵌套  <code>effect</code>  ，所以需要用 <code>effectStrack</code>  来存储这些嵌套的<strong>副作用函数</strong>，当内层的 <code>effect</code>  执行完毕后，将<strong>内层的副作用函数</strong>弹出，将<strong>外层的副作用函数</strong>赋值给用来存储<strong>当前的副作用函数</strong>的 <code>activeEffect</code> 。</li>\n<li><strong> <code>targetMap</code> </strong>: 一种 <code>WeakMap</code>  结构，用来存储 <code>target</code> ,  <code>key</code> , <strong>副作用</strong>之间的对应关系。<br />\n<img data-src=\"https://i.328888.xyz/2023/02/14/mVXrd.png\" alt=\"关系图\" /></li>\n<li><strong> <code>effectFn.deps</code> </strong>: 类型为 <code>Array&lt;Set&gt;</code> ，用来存储保存的有该副作用的 <code>target</code>  对应的 <code>key</code>  对应的 <code>Set</code> , 以便于在副作用函数<strong>再次执行</strong>的时候调用的 <code>clearUp</code>  方法来将 <code>effectFn</code>  从这些 <code>Set</code>  中移除。</li>\n<li><strong> <code>clearUp</code> </strong> : 利用 <code>effectFn.deps</code>  将 <code>effectFn</code>  从其所在的 <code>Set</code>  中移除。</li>\n</ul>\n<h2 id=\"详细步骤\"><a class=\"anchor\" href=\"#详细步骤\">#</a> 详细步骤</h2>\n<ul>\n<li>定义 <code>effectFn</code>  增强版副作用函数，以便于增强它，并做进一步处理\n<ul>\n<li><code>effectFn</code>  函数将做的事情\n<ol>\n<li>调用 <code>clearUp</code>  来将 <code>effectFn</code>  从其所在的 <code>Set</code>  中移除，从而避免 <code>trigger</code>  触发没必要的副作用函数。</li>\n<li>将 <code>effectFn</code>  赋值给 <code>activeEffect</code> , 并将 <code>effectFn</code>  放进 <code>effectStack</code> 。</li>\n<li>调用 <code>fn</code>  副作用函数，将返回值保存进 <code>res</code> 。</li>\n<li>将 <code>effectFn</code>  从 <code>activeEffect</code>  中弹出，并将 <code>activeEffect</code>  的最后一个元素赋值给 <code>activeEffect</code> （让 <code>activeEffect</code>  指向外层的副作用函数）</li>\n<li>返回 <code>res</code></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>在 <code>effectFn</code>  函数上添加属性，增强它\n<ul>\n<li>在 <code>effectFn</code>  上添加 <code>deps</code>  属性，用来存储保存有该副作用函数的 <code>target</code>  对应的 <code>key</code>  的对应的 <code>Set</code> , 以提供给 <code>clearUp</code>  函数使用。</li>\n<li>在 <code>effectFn</code>  函数上添加 <code>options</code>  属性，保存副作用函数的配置选项。</li>\n</ul>\n</li>\n<li>根据 <code>effectFn</code>  函数的配置选项 <code>options</code>  属性，来进行下一步的操作\n<ul>\n<li>如果 <code>effectFn.options.lazy</code>  为 <code>true</code> ，则不立即执行 <code>effectFn</code> , 而是将 <code>effectFn</code>  返回，手动调用。</li>\n<li>如果为 <code>false</code> ， 则立即执行。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"track-方法剖析与实现\"><a class=\"anchor\" href=\"#track-方法剖析与实现\">#</a> track 方法剖析与实现</h1>\n<h2 id=\"完整代码-2\"><a class=\"anchor\" href=\"#完整代码-2\">#</a> 完整代码</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>activeEffect<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>depsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> deps <span class=\"token operator\">=</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>deps<span class=\"token punctuation\">)</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>deps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  deps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  activeEffect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"track-概述\"><a class=\"anchor\" href=\"#track-概述\">#</a> track 概述</h2>\n<p>用来收集副作用，将副作用存储进对应的 <code>target</code>  对应的 <code>key</code>  对应的 <code>Set</code> 。</p>\n<h2 id=\"详细步骤-2\"><a class=\"anchor\" href=\"#详细步骤-2\">#</a> 详细步骤</h2>\n<ul>\n<li>边界处理\n<ul>\n<li>如果 <code>activeEffect == undefined</code> ，则直接返回</li>\n</ul>\n</li>\n<li>将副作用函数存储进对应的 <code>Set</code>\n<ol>\n<li>调用 <code>targetMap.get(target)</code>  取出 <code>target</code>  对应的 <code>Map</code> （里面存储的是 <code>key</code>  和对应的 <code>Set</code> ）并赋值给 <code>depsMap</code> 。如果 <code>depsMao</code>  为空，则调用 <code>targetMap.set(target, (depsMap = new Map))</code>  新建一个 <code>Map</code>  存进 <code>targetMap</code> 。</li>\n<li>调用 <code>depsMap.get(key)</code>  取出 <code>key</code>  对应的 <code>Set</code>  (里面存储的是 <code>key</code>  对应的副作用函数) 并赋值给 <code>deps</code> 。如果 <code>deps</code>  不存在，则调用 <code>depsMap.set(key, (deps = new Set()))</code>  新建一个 <code>Set</code>  存进 <code>depsMap</code> 。</li>\n<li>调用 <code>deps.add(activeEffect)</code>  将副作用函数存储进 <code>Set</code> .</li>\n</ol>\n</li>\n<li>将存有该副作用函数的 <code>Set</code>  存储进 <code>activeEffect.deps</code></li>\n</ul>\n<h1 id=\"trigger-方法剖析与实现\"><a class=\"anchor\" href=\"#trigger-方法剖析与实现\">#</a> trigger 方法剖析与实现</h1>\n<h2 id=\"完整代码-3\"><a class=\"anchor\" href=\"#完整代码-3\">#</a> 完整代码</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> effects <span class=\"token operator\">=</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>effects<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> effectsToRun<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  effects<span class=\"token operator\">?.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectFn <span class=\"token operator\">!==</span> activeEffect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      effectsToRun<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  effectsToRun<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>effectFnToRun<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectFnToRun<span class=\"token punctuation\">.</span>options<span class=\"token operator\">?.</span>scheduler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      effectFnToRun<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span>effectFnToRun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">effectFnToRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"trigger-概述\"><a class=\"anchor\" href=\"#trigger-概述\">#</a> trigger 概述</h2>\n<p>用来调用 <code>track</code>  收集的副作用，如果有调度器，则调用调度器。</p>\n<h3 id=\"详细步骤-3\"><a class=\"anchor\" href=\"#详细步骤-3\">#</a> 详细步骤</h3>\n<ul>\n<li>取出对应的 <code>target</code>  的对应的 <code>key</code>  的对应的 <code>Set</code> , 并做边界处理\n<ol>\n<li>调用 <code>targetMap.get(target)</code>  取出 <code>target</code>  对应的 <code>Map</code>  赋值给 <code>depsMap</code> 。如果 <code>depsMap</code>  不存在，则直接返回</li>\n<li>调用 <code>depsMap.get(key)</code>  取出 <code>key</code>  对应的 <code>Set</code>  并复制给 <code>effects</code> ，如果 <code>effects</code>  不存在，则直接返回。</li>\n</ol>\n</li>\n<li>定义一个 <code>effectsToRun</code> , 将 <code>effects</code>  存储的副作用函数全部添加到 <code>effectsToRun</code> , 以等待遍历 <code>effectsToRun</code>  执行存储的所有副作用函数。（之所以这么做是因为，副作用函数在执行的时候会先调用 <code>clearUp</code>  将其从 <code>Set</code>  中删除，执行 <code>fn</code>  的时候又会将 <code>effectFn</code>  添加到 <code>Set</code> , 这样就会陷入无限循环， 所以定义一个新的 <code>Set</code>  来避免这个问题）</li>\n<li>调用 <code>effectsToRun.forEach</code>  来遍历它，并调用存储的副作用函数，但是在调用前会做判断，如果 <code>effectToRun.options.scheduler</code>  存在的话，会调用 <code>effectToRun.options.sheduler</code>  而不是调用 <code>effectToRun</code></li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue响应式模块刨析",
                "effect"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/reactivity-reactive/",
            "url": "https://zimu-66ccff.github.io/reactivity-reactive/",
            "title": "Vue响应式模块-reactivity-reactive",
            "date_published": "2023-02-14T02:21:11.000Z",
            "content_html": "<h1 id=\"ractive-方法剖析与实现\"><a class=\"anchor\" href=\"#ractive-方法剖析与实现\">#</a> ractive 方法剖析与实现</h1>\n<h2 id=\"完整代码实现\"><a class=\"anchor\" href=\"#完整代码实现\">#</a> 完整代码实现</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isArray<span class=\"token punctuation\">,</span> isObject<span class=\"token punctuation\">,</span> hasChanged <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/index'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> effect<span class=\"token punctuation\">,</span> track<span class=\"token punctuation\">,</span> trigger <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reactiveMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> reactiveMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> reactiveProxy<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'_isReactive'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">const</span> oldLength <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span>oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            oldLength <span class=\"token operator\">!=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            key <span class=\"token operator\">!==</span> <span class=\"token string\">'length'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  reactiveMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> reactiveProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">return</span> reactiveProxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">&amp;&amp;</span> target<span class=\"token punctuation\">.</span>__isReactive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"边界处理对特殊情况的处理\"><a class=\"anchor\" href=\"#边界处理对特殊情况的处理\">#</a> 边界处理（对<strong>特殊情况</strong>的处理）</h2>\n<ul>\n<li><code>target</code>  的类型不为  <code>Object</code>  时：\n<ul>\n<li>利用 <code>isObject</code>  方法判断 <code>target</code>  的类型是否为 <code>Object</code></li>\n<li><code>isObject</code>  方法的返回值为 <code>false</code>  时，即 <code>target</code>  的类型不为 <code>Object</code> , 则直接返回 <code>target</code> , 不做接下来的响应式处理</li>\n</ul>\n</li>\n<li><code>target</code> <strong> 本身</strong>已经为一个<strong>响应式代理</strong>时:\n<ul>\n<li>利用 <code>isRective</code>  方法判断 <code>target</code>  是否为<strong>响应式代理</strong></li>\n<li><code>isReactive</code>  方法的返回值为 <code>true</code>  时， 即 <code>target</code>  已经为一个<strong>响应式代理</strong>，则直接返回 <code>target</code> ，不再做接下来的处理</li>\n</ul>\n</li>\n<li><code>target</code>  已经<strong>被做过响应式代理</strong>时:\n<ul>\n<li>利用 <code>reactiveMap.has(target)</code>  方法来判断 <code>target</code>  是否已经被做过<strong>响应式代理</strong></li>\n<li><code>reactiveMap.has(target)</code>  方法返回值为 <code>true</code>  时， 即 <code>target</code>  已经被做过<strong>响应式代理</strong>，则直接调用 <code>reactiveMap.get(targey)</code>  方法返回<strong>它的响应值代理</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"响应式处理\"><a class=\"anchor\" href=\"#响应式处理\">#</a> 响应式处理</h2>\n<h3 id=\"整体概述\"><a class=\"anchor\" href=\"#整体概述\">#</a> 整体概述</h3>\n<p>利用 <code>Proxy</code>  对 <code>target</code>  做一个<strong>数据代理</strong>，拦截其 <code>getter</code>  and  <code>setter</code> , 最后返回这个<strong>数据代理</strong></p>\n<h3 id=\"详细步骤\"><a class=\"anchor\" href=\"#详细步骤\">#</a> 详细步骤</h3>\n<ul>\n<li>\n<p><strong>拦截 getter</strong></p>\n<ol>\n<li><em>做边界处理</em>\n<ul>\n<li><code>if(key === '_isReactive')</code>  判断其要获取的 <code>key</code>  是否为 <code>_isReactive</code> , 当 <code>if</code>  判断为 <code>true</code>  时，则直接返回 <code>false</code> ，<strong>不再进行接下来的处理</strong></li>\n</ul>\n</li>\n<li><em>收集副作用</em>\n<ul>\n<li>调用 <code>track</code>  方法来收集<strong>副作用函数</strong>，将其收集到 <code>target</code>  对应的 <code>key</code>  的对应的 <code>Set</code>  里面，等待 <code>setter</code>  被触发，并修改 <code>target[key]</code>  的时候调用 <code>trigger</code>  来将这个 <code>Set</code>  里面存储的<strong>副作用函数</strong>一一触发.</li>\n<li><strong>ps</strong>: <em><a href=\"https://zimu-66ccff.github.io/reactivity-effect/\">(track 方法的讲解请点击这里奥)</a></em></li>\n</ul>\n</li>\n<li><em>返回 <code>target[key]</code>  的值，做深度响应式处理</em>\n<ul>\n<li>利用 <code>Reflect.get(target, key)</code>  取出 <code>target[key]</code>  的值</li>\n<li>判断 <code>target[key]</code>  的值的类型是否为 <code>Object</code> , 当为 <code>Object</code>  时，则返回 <code>reactive(target[key])</code>  对其做深度响应式处理，当不为 <code>Object</code>  时，则直接返回 <code>target[key]</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>拦截 setter</strong></p>\n<ol>\n<li><em>取出相关数据， 进行更新操作</em>\n<ul>\n<li>利用 <code>Reflect.get</code>  方法取出没有修改前的 <code>target[key]</code>  即 <code>oldValue</code>  and 没有修改前的 <code>target[length]</code>  即 <code>oldLength</code> , 利用 <code>Reflect.set</code>  进行对 <code>target[key]</code>  的更新</li>\n</ul>\n</li>\n<li><em>判断是否需要调用对应的 <code>key</code>  对应的 <code>Set</code>  存储的副作用函数</em>\n<ul>\n<li>利用 <code>hasChanged()</code>  判断新旧值是否发生了改变，如果没有改变则不进行接下来的处理。如果发生了改变，则调用 <code>trigger</code>  方法，来调用对应的 <code>key</code>  对应的 <code>Set</code>  存储的副作用函数</li>\n<li><strong>ps</strong>: <em><a href=\"https://zimu-66ccff.github.io/reactivity-effect/\">trigger 方法的讲解请点击这里奥</a></em></li>\n</ul>\n</li>\n<li><em>判断 <code>target</code>  是否为 <code>Array</code> , 并且数组的长度是否发生了改变</em>\n<ul>\n<li>利用 <code>isArray</code>  判断 <code>target</code> ，并利用 <code>Reflect.get()</code>  取得更新后数组的长度，并与之前数组的长度 <code>oldLength</code>  比较，看是否发生了改变，如果发生了改变，则调用 <code>tigger</code>  方法，来调用 <code>length</code>  对应的 <code>Set</code>  存储的副作用。<em>（之所以要这样做，是因为当给数组增加 or 删除元素的时候，数组的 <code>length</code>  就已经改变了， 当对 <code>length</code>  的更新的拦截的时候，就会发现新值和旧值是一样的，就不会触发 <code>trigger</code> ）</em></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>将响应式代理存储起来，并返回响应式代理</strong></p>\n<ol>\n<li>调用 <code>reactiveMap.set</code>  方法，将响应式代理和 <code>target</code>  关联起来并存储，以便于做上文的<strong>边界处理</strong> ( <code>target</code>  已经被做过响应式代理时)</li>\n<li><strong>返回响应式代理</strong></li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue响应式模块刨析",
                "reactive"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/promiseLearn/",
            "url": "https://zimu-66ccff.github.io/promiseLearn/",
            "title": "理解为什么需要Promise",
            "date_published": "2023-02-12T10:23:50.000Z",
            "content_html": "<h1 id=\"为什么需要-promise\"><a class=\"anchor\" href=\"#为什么需要-promise\">#</a> 为什么需要 Promise？🤔</h1>\n<h2 id=\"明白同步任务-and-异步任务\"><a class=\"anchor\" href=\"#明白同步任务-and-异步任务\">#</a> 明白同步任务 and 异步任务</h2>\n<p>首先，前端 er 们需要明确一点，在 js 这种单线程的事件循环模型中，一件事情没做完是不能做下一件事情的。这时候睿智的友友们就会说这又咋了呢，会有什么问题吗？哎嘿，还真有问题，问题还大了，要是中间有一件事情耗时太长，导致后面耗时很短的事情做不了怎么办呢？你看，这不就堵车了，还会堵很久。但是我们聪明的前端 er 们马上就有了解决方法，我们先不管那个耗时很长的事情，先做后面的事情，最后再管这个耗时很长的事情不就完事了吗 😁。<br />\n对的，就是这种解决方案，敲黑板 😸，js 中代码分为同步任务和异步任务，异步任务通常为那种可能会耗时很长 or 需要触发条件的，也就是前面说的可能会堵车，还堵很久的那种。同步任务当然就是除了异步任务以外的任务啦。在 js 的执行机制中，会先执行同步任务，等同步任务执行完毕再执行异步任务。</p>\n<h2 id=\"早期异步操作的种种问题\"><a class=\"anchor\" href=\"#早期异步操作的种种问题\">#</a> 早期异步操作的种种问题</h2>\n<p>早期 js 中只支持定义回调函数来表明异步操作的完成，接下来我们会以 setTimeout 这个异步操作为例子进行讲解。<br />\n试想这样的一种场景，我们需要在 setTimeout 中传递一个回调函数，在几秒后执行，这显然是一个异步操作，它有明显的触发条件，时间。这个回调函数中我们会进行时间到了后我们希望进行的操作，那么问题来了，如果我们在这个回调函数希望对外返回一个数据，以便于进一步的处理怎么办？🤔 这时候你就会发现问题，我们无法直接返回数据。好的，这是一个问题。其实还有更严重的问题，如果我们进一步的操作也是异步操作，比如也是在几秒后执行怎么办，你会想到，再使用一次 setTimeout，再传递一个回调函数。那么现在回调函数里面又嵌套了一个回调函数，如果还要进一步操作呢，还是异步操作呢，再嵌套，嵌套，嵌套，嵌套，最后你一个回调函数里面嵌套了 n 个函数，最后的场景是什么样子呢。回调地狱！！！请看下图。<br />\n<img data-src=\"https://i.328888.xyz/2023/02/12/cwAbF.png\" alt=\"回调地狱\" /></p>\n<p>相信前端 er 看到类似这种代码，血压是马上就会上升的，所以可不要写这种代码奥。</p>\n<p>实际上异步操作的问题可不止这些，比如如果异步操作失败了，怎么进行后续的处理，怎么拿到失败的原因，这都是需要解决的。<br />\n那么为了解决，如何拿到返回值； 异步操作失败后如何拿到失败的原因，并进一步处理；如何避免回调地狱；Promise 应运而生 😍</p>\n<h1 id=\"promise-是什么\"><a class=\"anchor\" href=\"#promise-是什么\">#</a> Promise 是什么？🤔</h1>\n<p>Promise 是一种异步编程机制，是对回调地狱的一种解决方案。<br />\nPromise 实列则是一种状态机，它有三种基本状态，待定（pending），兑现（fulfilled)， 拒绝 (rejected)，最初的状态为 pending，状态一旦改变，就定了，就不会再发生任何改变了。</p>\n<h1 id=\"promise-是怎么解决早期异步操作的疑难杂症的\"><a class=\"anchor\" href=\"#promise-是怎么解决早期异步操作的疑难杂症的\">#</a> Promise 是怎么解决早期异步操作的疑难杂症的 🤔</h1>\n<h2 id=\"解决如何拿到返回值当异步操作失败后如何拿到失败的原因并进一步处理的问题\"><a class=\"anchor\" href=\"#解决如何拿到返回值当异步操作失败后如何拿到失败的原因并进一步处理的问题\">#</a> 解决如何拿到返回值；当异步操作失败后如何拿到失败的原因，并进一步处理的问题</h2>\n<p>构造函数 Promise（）中可以传递一个回调函数，我们一般称这个回调函数为执行器函数，执行器函数主要有两项职责：1. 初始化期约的异步行为（在执行器函数中进行我们需要执行的异步操作）和控制状态的最终转换（将 Promise 实列的状态由最初的 pending 转换为 fulfilled or rejected）。那么它是怎么来控制状态的最终转换的呢？🤔 很简单，这个执行器函数是自带两个参数的，这两个参数都为函数，我们一般称为 resolve， reject。你可以在 resolve 中传递参数，来返回你需要的数据；可以在 reject 中传递参数，来返回异步操作失败的原因。当你在执行器函数中调用 resolve，Promise 实列的状态就由 pending 变为了 fulfilled（注：这里不是十分准确，需要格外注意一种特别情况，如果返回的也是一个 Promise，那么 Promise 实列的状态将由返回的这个 Promise 决定，为这个 Promise 的状态，不一定为 fulfilled）；同理，当你调用了 reject，Promise 实列的状态就由 pending 变为了 rejected。<br />\n通过执行器函数的两个参数函数，resolve，reject 我们成功的解决了如何拿到返回值，异步操作结束后拿到失败的原因的问题。<br />\n那么我们接下来，解决怎么进一步处理的问题。这里我们就需要知道 Promise 实列上面其实是由一个 then 方法的，不过其实这个方法是定义在 Promise 实列的构造函数的原型上面的。这个 then 方法一样有两个参数函数，一般称为 onResolved, onRejected。当 promise 实列的状态为 fulfilled 的时候，就会执行第一个参数函数，即 onResolved；当 promise 实列的状态为 rejected 的时候，就会执行第二个参数函数，即 onRejected。我们可以在这两个参数函数中写入对应的进一步处理的逻辑。<br />\n至此，我们就解决了如何拿到返回值，拿到异步操作失败的时候失败的原因，并进一步处理的问题ヽ (✿ ﾟ ▽ ﾟ) ノ 😁</p>\n<h2 id=\"解决回调地狱的问题\"><a class=\"anchor\" href=\"#解决回调地狱的问题\">#</a> 解决回调地狱的问题</h2>\n<p>这里我们需要知道 promise 实列身上的 then 方法是会返回一个 promise 实列的，返回的这个新的实列是基于 onResolved 函数 or onRejected 函数的返回值构建的，是将返回值传递给 Promise.resolve 函数来包装生成新的 promise 实列。</p>\n<ul>\n<li>1. 当触发的 onResolved or onRejected 函数没有返回值时，会默认返回 undefined 来传递给 Promise.resolve 函数来生成新的成功的 promise 实列。</li>\n<li>2. 当有返回值的时候会将返回值传递给 Promise.resolve 函数来生成新的成功的 promise 实列。</li>\n<li>3. 当返回值为一个 promise 实列的时候会将该 promise 实列传递 Promise.resolve 函数来返回该 promise 实列。</li>\n<li>4. 当在触发的 onResolved or onRejected 函数中抛出了一个错误时，会将该错误传递给 promise.resolve 来返回一个新的失败的 promise 实列。</li>\n<li>5. 当压根没有需要触发的 onResolved or onRejected 函数时，会将调用 then 方法的 Promise 实列原样返回。</li>\n</ul>\n<p>由于 then 方法固定会返回 promise 实列，这就为链式调用提供了可能，而链式调用便可给嵌套解套，避免嵌套，解决回调地狱。<br />\n至此，也解决了回调地狱的问题。请看下图 😁<br />\n<img data-src=\"https://i.328888.xyz/2023/02/12/cwD6H.png\" alt=\"解决回调地狱\" /></p>\n<p>当然，Promise 还有很多的实列方法，这些方法就不一一讲解，读者们下去了可以自行了解。</p>\n",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "JS高级",
                "Promise"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/mySelf/",
            "url": "https://zimu-66ccff.github.io/mySelf/",
            "title": "关于我",
            "date_published": "2023-02-11T05:49:30.000Z",
            "content_html": "<p>一只前端小白</p>\n",
            "tags": [
                "随笔",
                "自我"
            ]
        }
    ]
}