{
    "version": "https://jsonfeed.org/version/1",
    "title": "ziMu Space",
    "subtitle": "25届前端小菜鸡子木",
    "icon": "https://zimu-66ccff.github.io/images/favicon.ico",
    "description": "干净澄澈，真诚自然",
    "home_page_url": "https://zimu-66ccff.github.io",
    "items": [
        {
            "id": "https://zimu-66ccff.github.io/promiseLearn/",
            "url": "https://zimu-66ccff.github.io/promiseLearn/",
            "title": "理解Promise",
            "date_published": "2023-02-12T10:23:50.000Z",
            "content_html": "<h1 id=\"为什么需要-promise\"><a class=\"anchor\" href=\"#为什么需要-promise\">#</a> 为什么需要 Promise？🤔</h1>\n<h2 id=\"明白同步任务-and-异步任务\"><a class=\"anchor\" href=\"#明白同步任务-and-异步任务\">#</a> 明白同步任务 and 异步任务</h2>\n<p>首先，前端 er 们需要明确一点，在 js 这种单线程的事件循环模型中，一件事情没做完是不能做下一件事情的。这时候睿智的友友们就会说这又咋了呢，会有什么问题吗？哎嘿，还真有问题，问题还大了，要是中间有一件事情耗时太长，导致后面耗时很短的事情做不了怎么办呢？你看，这不就堵车了，还会堵很久。但是我们聪明的前端 er 们马上就有了解决方法，我们先不管那个耗时很长的事情，先做后面的事情，最后再管这个耗时很长的事情不就完事了吗 😁。<br />\n对的，就是这种解决方案，敲黑板 😸，js 中代码分为同步任务和异步任务，异步任务通常为那种可能会耗时很长 or 需要触发条件的，也就是前面说的可能会堵车，还堵很久的那种。同步任务当然就是除了异步任务以外的任务啦。在 js 的执行机制中，会先执行同步任务，等同步任务执行完毕再执行异步任务。</p>\n<h2 id=\"早期异步操作的种种问题\"><a class=\"anchor\" href=\"#早期异步操作的种种问题\">#</a> 早期异步操作的种种问题</h2>\n<p>早期 js 中只支持定义回调函数来表明异步操作的完成，接下来我们会以 setTimeout 这个异步操作为例子进行讲解。<br />\n试想这样的一种场景，我们需要在 setTimeout 中传递一个回调函数，在几秒后执行，这显然是一个异步操作，它有明显的触发条件，时间。这个回调函数中我们会进行时间到了后我们希望进行的操作，那么问题来了，如果我们在这个回调函数希望对外返回一个数据，以便于进一步的处理怎么办？🤔 这时候你就会发现问题，我们无法直接返回数据。好的，这是一个问题。其实还有更严重的问题，如果我们进一步的操作也是异步操作，比如也是在几秒后执行怎么办，你会想到，再使用一次 setTimeout，再传递一个回调函数。那么现在回调函数里面又嵌套了一个回调函数，如果还要进一步操作呢，还是异步操作呢，再嵌套，嵌套，嵌套，嵌套，最后你一个回调函数里面嵌套了 n 个函数，最后的场景是什么样子呢。回调地狱！！！请看下图。<br />\n<img data-src=\"https://i.328888.xyz/2023/02/12/cwAbF.png\" alt=\"回调地狱\" /></p>\n<p>相信前端 er 看到类似这种代码，血压是马上就会上升的，所以可不要写这种代码奥。</p>\n<p>实际上异步操作的问题可不止这些，比如如果异步操作失败了，怎么进行后续的处理，怎么拿到失败的原因，这都是需要解决的。<br />\n那么为了解决，如何拿到返回值； 异步操作失败后如何拿到失败的原因，并进一步处理；如何避免回调地狱；Promise 应运而生 😍</p>\n<h1 id=\"promise-是什么\"><a class=\"anchor\" href=\"#promise-是什么\">#</a> Promise 是什么？🤔</h1>\n<p>Promise 是一种异步编程机制，是对回调地狱的一种解决方案。<br />\nPromise 实列则是一种状态机，它有三种基本状态，待定（pending），兑现（fulfilled)， 拒绝 (rejected)，最初的状态为 pending，状态一旦改变，就定了，就不会再发生任何改变了。</p>\n<h1 id=\"promise-是怎么解决早期异步操作的疑难杂症的\"><a class=\"anchor\" href=\"#promise-是怎么解决早期异步操作的疑难杂症的\">#</a> Promise 是怎么解决早期异步操作的疑难杂症的 🤔</h1>\n<h2 id=\"解决如何拿到返回值当异步操作失败后如何拿到失败的原因并进一步处理的问题\"><a class=\"anchor\" href=\"#解决如何拿到返回值当异步操作失败后如何拿到失败的原因并进一步处理的问题\">#</a> 解决如何拿到返回值；当异步操作失败后如何拿到失败的原因，并进一步处理的问题</h2>\n<p>构造函数 Promise（）中可以传递一个回调函数，我们一般称这个回调函数为执行器函数，执行器函数主要有两项职责：1. 初始化期约的异步行为（在执行器函数中进行我们需要执行的异步操作）和控制状态的最终转换（将 Promise 实列的状态由最初的 pending 转换为 fulfilled or rejected）。那么它是怎么来控制状态的最终转换的呢？🤔 很简单，这个执行器函数是自带两个参数的，这两个参数都为函数，我们一般称为 resolve， reject。你可以在 resolve 中传递参数，来返回你需要的数据；可以在 reject 中传递参数，来返回异步操作失败的原因。当你在执行器函数中调用 resolve，Promise 实列的状态就由 pending 变为了 fulfilled（注：这里不是十分准确，需要格外注意一种特别情况，如果返回的也是一个 Promise，那么 Promise 实列的状态将由返回的这个 Promise 决定，为这个 Promise 的状态，不一定为 fulfilled）；同理，当你调用了 reject，Promise 实列的状态就由 pending 变为了 rejected。<br />\n通过执行器函数的两个参数函数，resolve，reject 我们成功的解决了如何拿到返回值，异步操作结束后拿到失败的原因的问题。<br />\n那么我们接下来，解决怎么进一步处理的问题。这里我们就需要知道 Promise 实列上面其实是由一个 then 方法的，不过其实这个方法是定义在 Promise 实列的构造函数的原型上面的。这个 then 方法一样有两个参数函数，一般称为 onResolved, onRejected。当 promise 实列的状态为 fulfilled 的时候，就会执行第一个参数函数，即 onResolved；当 promise 实列的状态为 rejected 的时候，就会执行第二个参数函数，即 onRejected。我们可以在这两个参数函数中写入对应的进一步处理的逻辑。<br />\n至此，我们就解决了如何拿到返回值，拿到异步操作失败的时候失败的原因，并进一步处理的问题ヽ (✿ ﾟ ▽ ﾟ) ノ 😁</p>\n<h2 id=\"解决回调地狱的问题\"><a class=\"anchor\" href=\"#解决回调地狱的问题\">#</a> 解决回调地狱的问题</h2>\n<p>这里我们需要知道 promise 实列身上的 then 方法是会返回一个 promise 实列的，返回的这个新的实列是基于 onResolved 函数 or onRejected 函数的返回值构建的，是将返回值传递给 Promise.resolve 函数来包装生成新的 promise 实列。</p>\n<ul>\n<li>1. 当触发的 onResolved or onRejected 函数没有返回值时，会默认返回 undefined 来传递给 Promise.resolve 函数来生成新的成功的 promise 实列。</li>\n<li>2. 当有返回值的时候会将返回值传递给 Promise.resolve 函数来生成新的成功的 promise 实列。</li>\n<li>3. 当返回值为一个 promise 实列的时候会将该 promise 实列传递 Promise.resolve 函数来返回该 promise 实列。</li>\n<li>4. 当在触发的 onResolved or onRejected 函数中抛出了一个错误时，会将该错误传递给 promise.resolve 来返回一个新的失败的 promise 实列。</li>\n<li>5. 当压根没有需要触发的 onResolved or onRejected 函数时，会将调用 then 方法的 Promise 实列原样返回。</li>\n</ul>\n<p>由于 then 方法固定会返回 promise 实列，这就为链式调用提供了可能，而链式调用便可给嵌套解套，避免嵌套，解决回调地狱。<br />\n至此，也解决了回调地狱的问题。请看下图 😁<br />\n<img data-src=\"https://i.328888.xyz/2023/02/12/cwD6H.png\" alt=\"解决回调地狱\" /></p>\n<p>当然，Promise 还有很多的实列方法，这些方法就不一一讲解，读者们下去了可以自行了解。</p>\n<h1 id=\"手写-promise-的实现\"><a class=\"anchor\" href=\"#手写-promise-的实现\">#</a> 手写 Promise 的实现</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">RESOLVE</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">REJECT</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resolvedCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rejectedCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">myPromise</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">RESOLVE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>resolvedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">REJECT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>rejectedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callbacks</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">callbacks</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>myPromise<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resolved</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onResolved</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">myPromise</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token operator\">?</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          <span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rejected</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">myPromise</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>          <span class=\"token operator\">?</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>          <span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token constant\">PENDING</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        self<span class=\"token punctuation\">.</span>resolvedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rejectedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token constant\">RESOLVE</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">resolved</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token constant\">REJECT</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token function\">rejected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "JS高级",
                "Promise"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/mySelf/",
            "url": "https://zimu-66ccff.github.io/mySelf/",
            "title": "关于我",
            "date_published": "2023-02-11T05:49:30.000Z",
            "content_html": "<p>一只前端小白</p>\n",
            "tags": [
                "随笔",
                "自我"
            ]
        }
    ]
}