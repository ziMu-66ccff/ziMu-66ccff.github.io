{
    "version": "https://jsonfeed.org/version/1",
    "title": "木子亭",
    "subtitle": "那年满身灰白，唯此亭溢彩，今日不染尘埃，静坐此亭相伴",
    "icon": "https://zimu-66ccff.github.io/images/favicon.ico",
    "description": "干净澄澈，真诚自然",
    "home_page_url": "https://zimu-66ccff.github.io",
    "items": [
        {
            "id": "https://zimu-66ccff.github.io/differenceWithVue/",
            "url": "https://zimu-66ccff.github.io/differenceWithVue/",
            "title": "React 和 Vue的区别",
            "date_published": "2023-02-25T08:52:19.000Z",
            "content_html": "<h1 id=\"对数据管理和页面渲染的解析\"><a class=\"anchor\" href=\"#对数据管理和页面渲染的解析\">#</a> 对数据管理和页面渲染的解析</h1>\n<ul>\n<li>Vue\n<ul>\n<li>用户只需要去关心数据，而完全不需要关心界面是怎么渲染怎么更新的，响应式数据一改变，vue 内部就会做数据劫持，触发收集的依赖，从而调用 render 函数完成视图的更新，这都是 vue 帮我们做好的，我们只需要关心数据。</li>\n</ul>\n</li>\n<li>React\n<ul>\n<li>React 是没有数据劫持的，我们想要界面随着数据更新而更新就必须调用 <code>setState</code> , 而调用 <code>setState</code>  实际上不仅改了数据，内部还相当于调用了 <code>render</code>  函数来对页面进行更新，也就是说用户不仅仅需要去关心数据的改变，还需要手动的去触发页面的渲染更新。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"dom-的渲染\"><a class=\"anchor\" href=\"#dom-的渲染\">#</a> DOM 的渲染</h1>\n<ul>\n<li>\n<p>Vue</p>\n<ul>\n<li>template -&gt; 编译器 -&gt; h 函数 -&gt; 虚拟 DOM -&gt; render 函数 -&gt; 真实 DOM</li>\n<li>组件的 render 函数里面的 h 函数 -&gt; 虚拟 DOM -&gt; render 函数 -&gt; 真实 DOM</li>\n</ul>\n</li>\n<li>\n<p>React</p>\n<ul>\n<li>JSX -&gt; React.createElement () -&gt; 虚拟 DOM -&gt; ReactDom.render () -&gt; 真实 DOM</li>\n<li>React.createElement () -&gt; 虚拟 DOM -&gt; ReactDom.render () -&gt; 真实 DOM<br />\nps: babel 会自动将 JSX 代码交给 React.createElement 来处理以生成虚拟 DOM</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"组件的创建\"><a class=\"anchor\" href=\"#组件的创建\">#</a> 组件的创建</h1>\n<ul>\n<li>Vue<br />\nSFC 单文件组件，即.vue 文件</li>\n<li>React\n<ol>\n<li>函数组件，类组件，本质都是返回一个 JSX.</li>\n<li>类组件有自己的状态 <code>state</code></li>\n<li>函数组件需要借助 hooks 来拥有自己的状态</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"书写-html-的形式\"><a class=\"anchor\" href=\"#书写-html-的形式\">#</a> 书写 html 的形式</h1>\n<ul>\n<li>\n<p>Vue<br />\n<strong> 模板语法</strong></p>\n<ol>\n<li>在 <code>&#123;&#123;&#125;&#125;</code>  里面书写 js 表达式，存在模板语法，v-bind，v-model，v-on 等</li>\n</ol>\n</li>\n<li>\n<p>React<br />\n<strong>JSX</strong></p>\n<ol>\n<li>只能有一个根节点</li>\n<li>在 <code>&#123;&#125;</code>  里面写 JS 表达式，但是写子文本节点的时候有以下规则</li>\n</ol>\n<ul>\n<li>Number，String， Array 类型可以直接显示为子文本节点，Array 类型会转成字符串展示为文本节点</li>\n<li>null， undefined，Boolean 会显示为空文本节点</li>\n<li>object 类型不能作为子文本节点</li>\n</ul>\n<ol start=\"3\">\n<li>注释要以 <code>&#123;/* */&#125;</code>  的形式书写</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"让组件接收-dom-并展示在组件里的指定位置\"><a class=\"anchor\" href=\"#让组件接收-dom-并展示在组件里的指定位置\">#</a> 让组件接收 DOM 并展示在组件里的指定位置</h1>\n<ul>\n<li>Vue<br />\n <code>slot</code>  插槽来实现\n<ul>\n<li>作用域插槽，让插槽的内容能够访问到子组件的状态<br />\n在子组件的 <code>&lt;slot/&gt;</code>  上通过属性来定义传递给父组件的信息，父组件在插槽里通过 <code>v-slot=xxx</code>  来获取</li>\n</ul>\n</li>\n<li>React\n<ol>\n<li><code>prop.children</code>  属性来实现，在组件里面写的内容会被添加到 <code>prop.children</code> ，当子节点个数为一个的时候， <code>children</code>  就为这个子节点，当子节点为多个的时候， <code>children</code>  为一个数组</li>\n<li>通过给 <code>prop</code>  传递 JSX 来实现（更推荐这种）</li>\n</ol>\n<ul>\n<li>类似作用域插槽的实现<br />\n父组件传递给子组件一个属性，属性值为一个函数，返回一个 JSX，JSX 也就是要让子组件展示的内容；然后子组件调用这个函数，通过传参数来给父组件传递信息</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h1>\n<ul>\n<li>Vue<br />\n<img data-src=\"https://i.328888.xyz/2023/02/27/e2qPy.png\" alt=\"Vue生命周期\" /></li>\n<li>React<br />\n<img data-src=\"https://i.328888.xyz/2023/02/27/eH4IH.png\" alt=\"React生命周期\" /></li>\n</ul>\n<h1 id=\"父子组件通信\"><a class=\"anchor\" href=\"#父子组件通信\">#</a> 父子组件通信</h1>\n<ul>\n<li>Vue\n<ul>\n<li>父传子时子组件对传递过来的属性做验证，设置默认值<br />\n通过 <code>defineProps</code>  给其传递一个校验对象，在校验对象里面设置默认值</li>\n<li>子组件向父组件传递事件<br />\n通过 <code>defineEmit</code>  定义事件，父组件监听这个事件，然后子组件通过 <code>emit</code>  发送事件</li>\n</ul>\n</li>\n<li>React\n<ul>\n<li>父传子时子组件对传递过来的属性做验证<br />\n通过从 <code>prop-types</code>  包中导入 <code>PropTypes</code>  进行校验，通过给组件添加 <code>deafultProps</code>  属性来添加默认值</li>\n<li>子组件向父组件传递事件<br />\n父组件给子组件传递一个函数作为 <code>prop</code> , 子组件调用父组件传过来的属性里面存储的函数，来修改父组件的状态</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"爷孙组件通信\"><a class=\"anchor\" href=\"#爷孙组件通信\">#</a> 爷孙组件通信</h1>\n<ul>\n<li>Vue<br />\nprovide, inject</li>\n<li>React\n<ul>\n<li>Context（超级麻烦，一般不用）</li>\n</ul>\n<ol>\n<li><code>React.createContext()</code>  返回一个上下文组件比如 <code>MyContext</code></li>\n<li>在爷爷组件里面用 <code>&lt;MyContext.Provider&gt;&lt;/MyContext.Provider&gt;</code> , 通过 value 属性来传递要传递给孙子的值， 上下文组件里面嵌套要传递给哪个孙子组件的后代。</li>\n<li>在孙子组件里面，如果是类组件比如 <code>sunZi</code> ，就通过 <code>sunZi.contextType = MyContext</code>  来指定自己接收哪个 context，然后通过 <code>this.context</code>  来使用。如果是函数组件，则通过 <code>&lt;MyContext.consumer&gt;(value) =&gt; &#123;&#125;&lt;/MyContext.consumer&gt;</code>  来使用，参数 value 就是传递过来的数据<br />\n<strong>这。。。。。。谁发明的反人类的玩意，其他具体的使用去看文档吧，实在不想写了</strong></li>\n</ol>\n</li>\n</ul>\n<h1 id=\"界面的更新为异步操作在修改状态后使用新的状态的解决方案\"><a class=\"anchor\" href=\"#界面的更新为异步操作在修改状态后使用新的状态的解决方案\">#</a> 界面的更新为异步操作，在修改状态后，使用新的状态的解决方案</h1>\n<ul>\n<li>Vue<br />\nnextick 里面传一个回调函数，这个回调函数会在页面更新后调用</li>\n<li>React<br />\nsetState 中给第二个参数传一个回调函数，这个回调函数会在页面更新完毕后调用</li>\n</ul>\n<p><strong>注意：</strong></p>\n<ol>\n<li>界面的更新为异步操作的原因：<br />\nVue 和 React 都是一样的，都是避免状态的多次改变导致多次调用 render 函数，影响性能，都想在同步代码（包含对状态的修改）执行完毕后，再一次性的调用 render 函数，对界面进行更新，提高性能。</li>\n<li>二者的不同：<br />\nVue 对响应式数据的更新是同步的，所以它会把触发的多次副作用（对界面的更新）放进一个 <code>Set</code> ，利用自动去重的机制，相同的渲染操作只执行一次。<br />\nReact 对状态的更改也是异步的，所以它会把多次状态的更改放进一个队列，然后合并每次对状态的修改，然后拿这个最终的状态去更改状态，并调用 render 函数进行渲染，从而做到只执行一次渲染。</li>\n<li>React18 之前的版本和 React18 版本中对于 setState 特殊情况的处理<br />\n React18 之前的版本：在事件里面，setTimeout，Promise 等这些的 <code>callback</code>  中 <code>setState</code>  是同步的<br />\n React18 中：上面这些特殊情况里面 <code>setState</code>  也已经是异步的了，原因同上，如果这些特殊情况还是想让 <code>setState</code>  为同步的话，需要从 <code>react-dom</code>  中引入一个 <code>flashSync</code>  方法，在里面传递一个 <code>callback</code> ，在 <code>callback</code>  里面调用 <code>setState</code>  则为同步</li>\n</ol>\n<h1 id=\"react-性能优化我认为是比-vue-强大的一点\"><a class=\"anchor\" href=\"#react-性能优化我认为是比-vue-强大的一点\">#</a> React 性能优化 (我认为是比 Vue 强大的一点)</h1>\n<ol>\n<li>\n<p>SCU</p>\n<ul>\n<li>原理:<br />\n 可以在 shouldComponentUpdate 这个生命周期钩子函数里面，从参数里拿到 <code>newState</code> , <code>newProps</code>  和当前的 <code>state</code> , <code>props</code>  作比较，当有 <code>key</code>  对应的 <code>value</code>  不一样的时候才返回 <code>true</code>  才调用 render 函数返回 jsx，进行 diff，然后更新变化了的部分。（而 Vue 完全没有这个说法，只要父组件发生了更新，就会对子组件调用 render 函数生成虚拟 DOM，然后开始比较新旧 DOM, 这个过程是避免不了的，只不过 Vue 是在 render 函数内部对新旧 DOM 做了一个比较判断，但是虚拟 DOM 生成这一步的开销避免不了）</li>\n<li>自动化 SCU 解决方案<br />\n类组件：extends pureComponent<br />\n 函数组件：用 memo 方法把函数组件包裹起来 然后返回一个新的组件</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"对表单元素的处理\"><a class=\"anchor\" href=\"#对表单元素的处理\">#</a> 对表单元素的处理</h1>\n<ul>\n<li>Vue<br />\n 利用 <code>v-model</code>  语法糖来实现双向绑定</li>\n<li>React<br />\nReact 没有双向绑定，需要给 JSX 表单元素的 <code>value</code>  属性手动绑定一个变量，然后监听 change 事件，当 change 事件被触发的时候拿 <code>event.target.value</code>  来通过 <code>setState</code>  修改绑定的变量</li>\n</ul>\n<h1 id=\"对-dom-和-component-的获取\"><a class=\"anchor\" href=\"#对-dom-和-component-的获取\">#</a> 对 DOM 和 Component 的获取</h1>\n<ul>\n<li>Vue<br />\n 通过给 DOM, Component 传递 <code>ref</code>  属性，然后用一个 <code>ref</code>  属性值同名的响应式变量来接收 DOM, Component。</li>\n<li>React\n<ol>\n<li>对于 DOM, 类组件，在 <code>state</code>  里通过 <code>createRef</code>  来创建一个存储 DOM, 类组件的变量，然后把这个变量赋值给 DOM, 类组件的 <code>ref</code>  属性。这个变量保存的就是 DOM，变量的 <code>current</code>  属性保存的就是 Component</li>\n<li>对于函数组件，通过 <code>forwardRef</code>  高阶函数来对函数组件进行一个包裹，此时函数组件将会有两个参数， <code>props</code> , <code>ref</code> , 再把 <code>ref</code>  这个参数用 ref 属性绑定到函数组件返回的 JSX 中的 DOM 上</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "React",
                "React学习",
                "前端",
                "React",
                "React和Vue的区别"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/dynamicRouter/",
            "url": "https://zimu-66ccff.github.io/dynamicRouter/",
            "title": "基于菜单的动态路由",
            "date_published": "2023-02-22T06:28:54.000Z",
            "content_html": "<h1 id=\"基本原理\"><a class=\"anchor\" href=\"#基本原理\">#</a> 基本原理</h1>\n<ol>\n<li>根据用户的 id 发送请求获取用户能够看到的菜单</li>\n<li>将需要动态注册的路由对象放到一个数组里面\n<ul>\n<li>路由对象在一个个单独的文件里面</li>\n<li>需要从文件中读取路由对象，然后放到数组里面（这一步我们将进行自动化操作）</li>\n</ul>\n</li>\n<li>根据菜单去匹配对应的路由对象，并将其注册\n<ul>\n<li><code>Router.addRoute('main', route)</code></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"详细步骤\"><a class=\"anchor\" href=\"#详细步骤\">#</a> 详细步骤</h1>\n<ol>\n<li>\n<p>根据用户的 id 发送请求获取用户能够看到的菜单</p>\n<ul>\n<li>这里我们看一下服务器返回给我们的信息<br />\n<img data-src=\"https://i.328888.xyz/2023/02/22/xySLq.png\" alt=\"返回的菜单信息\" /></li>\n<li>对返回的信息进行一波浅浅的分析 🤔<br />\n是一个数组，数组里面存储的是所有一级菜单的信息， <code>name</code> , <code>url</code> ，然后我们发现还有一个 <code>children</code>  熟悉，也是一个数组，里面存储的是二级菜单的信息</li>\n<li>好家伙，你现在是不是有想法了 🤔<br />\n我们直接拿着这个服务器返回给我们的数据，然后去生成菜单不就可以了吗，这样用户看见的就是他能看见的菜单了，他看不到的菜单我们也不会渲染，万事大吉 😁。</li>\n<li>这样操作带来的问题<br />\n如果用户也是一个前端呢，他直接在 url 那里输入他没有权限访问的路由，不就可以进入他本不能访问的界面了吗？哦豁，完蛋 🥲。所以我们需要动态注册路由啦，连路由都没有，我看他怎么访问，嗯哼。</li>\n</ul>\n</li>\n<li>\n<p>将需要动态注册的路由对象放到一个数组里面</p>\n<ul>\n<li>\n<p>首先明白一点，我们的路由对象是放在一个个文件里面的，这样结构更清晰<br />\n举个列子，在 <code>router/main/analysis/dashboard/dashboard.ts</code>  里面才有我们导出的路由对象，如下图<br />\n<img data-src=\"https://i.328888.xyz/2023/02/22/x4g2p.png\" alt=\"路由对象列子\" /></p>\n</li>\n<li>\n<p>像这样的文件及其里面的路由对象还有很多，接下来我们要做的就是将其放进一个数组里面，这里我们会进行自动化操作</p>\n<ul>\n<li>利用 <code>import.meta.glob(path, options)</code>  这个方法来自动获取 <code>path</code>  路径里面的所有文件，那么我们先用 <code>files = import.meta.glob('../router/main/**/*.ts')</code>  来获取一下我们在此路径里面的 ts 文件导出的路由对象吧，接下来给你们打印一下 <code>files</code>  看看。<br />\n<img data-src=\"https://i.328888.xyz/2023/02/22/x4G48.png\" alt=\"获取的files\" /><br />\n 我们发现是一个对象，key 是文件的 <code>path</code>  路径，value 却是一个箭头函数，这是因为他默认是懒加载获取的文件的，可是这样问题就来了，这样我们要怎么取出文件里面导出的路由对象呢 🤔？</li>\n<li>通过 <code>options</code>  选项来获取路由对象<br />\n别急别急， <code>import.meta.glob(path, options)</code>  方法不是还有第二个参数 <code>options</code>  吗，它是一个配置对象，我们可以设置这个配置对象的 <code>eager</code>  属性为 <code>true</code> ，好的，那我们接下来 <code>files = import.meta.glob('../router/main/**/*.ts', &#123;eager: true&#125;)</code>  这样试一下，给你们看看这样做后打印的 <code>files</code> <br />\n<img data-src=\"https://i.328888.xyz/2023/02/22/x4P4J.png\" alt=\"配置eager后的files\" /><br />\n 怎么样，是不是 value 由箭头函数变成了模块 Moudule，这个模块其实就是一个对象，然后对象里面有个 <code>default</code>  属性， <code>default</code>  属性的 value 可不就是我们导出的路由对象吗，欧克，大功告成，至此我们已经能够获取我们在文件里面导出的路由对象了。</li>\n<li>将路由对象注册到数组里面<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> module <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  localRoutes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>欧克，这样我们就成功的将我们在文件里面导出的路由对象放到 <code>localRoutes</code>  这个对象里面了，大功告成，顺便提醒一下这里用 <code>for in</code>  是因为数组也是一个对象嘛，相信你肯定是知道的。</li>\n</ul>\n</li>\n<li>\n<p><strong>最后读取文件里面导出的路由对象并放到一个数组里面的操作，我们最好给封装到一个函数里面，接下来是封装的函数的代码</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">loadLocalRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 1. 动态获取所有的路由对象，放到数组中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// * 路由对象都在独立的文件中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// * 从文件中将所有路由对象先读取数组中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> localRoutes<span class=\"token operator\">:</span> RouteRecordRaw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 1.1. 读取 router/main 所有的 ts 文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> files<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">glob</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'../router/main/*_/_.ts'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      eager<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 1.2. 将加载的对象放到 localRoutes</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> module <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    localRoutes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> localRoutes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>根据菜单去匹配对应的路由对象，并将其注册</p>\n<ul>\n<li>\n<p>根据菜单匹配需要注册的路由对象，并将其放进一个数组<br />\n我们可以发现我们请求菜单返回的数据里面每一个一级菜单 or 二级菜单都是有一个 url 的，并且这个 url 和我们的路由对象的 path 是对应的，所以我们就可以基于这个来匹配。<em>但是有一个注意点，一级菜单是没有对应的界面，所以注册一级菜单对应的路由的时候，我们应该将其重定向到子菜单的第一个选项的路由</em> 。<strong>同样，这些操作，我们也可以将其封装到一个函数里面，下面是函数的实现</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapMenusToRoutes</span><span class=\"token punctuation\">(</span>userMenus<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 1. 加载本地路由</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> localRoutes <span class=\"token operator\">=</span> <span class=\"token function\">loadLocalRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2. 根据菜单去匹配正确的路由</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> RouteRecordRaw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> menu <span class=\"token keyword\">of</span> userMenus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> submenu <span class=\"token keyword\">of</span> menu<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> localRoutes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> submenu<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 1. 给 route 的顶层菜单增加重定向功能 (但是只需要添加一次即可)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> menu<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          routes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> menu<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> redirect<span class=\"token operator\">:</span> route<span class=\"token punctuation\">.</span>path <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 2. 将二级菜单对应的路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        routes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 记录第一个被匹配到的菜单</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>firstMenu <span class=\"token operator\">&amp;&amp;</span> route<span class=\"token punctuation\">)</span> firstMenu <span class=\"token operator\">=</span> submenu</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> routes</pre></td></tr></table></figure></li>\n<li>\n<p>最后遍历 <code>routes</code>  将里面存储的需要注册的路由对象，动态注册就可以啦</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token function\">mapMenusToRoutes</span><span class=\"token punctuation\">(</span>userMenus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>routes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>注意事项<br />\n这个动态注册路由的操作，应该是在进行登录操作，并且在登录成功跳转到 main 界面之前进行的。</p>\n</li>\n<li>\n<p>请思考，在登录操作里面跳转到主页面里面对路由做一个动态的注册真的就万事大吉了吗 🤔。</p>\n<ul>\n<li>\n<p>问题：<br />\n想象这样的一个场景，用户在登录之后进入了主界面，点击了它能看到的菜单，并进入了对应的界面，这时候用户点击了刷新会发生什么呢？答案很简单，我们在登录操作里面注册的动态路由没有了，因为用户刷新之后是不会再执行登陆操作的，也就是说刚才注册的路由不会再注册一遍，所以我们需要解决这个问题。</p>\n</li>\n<li>\n<p>解决方案：</p>\n<ul>\n<li>\n<p>粗糙的解决方案:<br />\n 在 <code>main.ts</code>  里面再执行获取需要注册的路由对象，并遍历将其注册的操作，因为刷新的时候 <code>main.ts</code>  会执行，但是我们是一般不希望 <code>main.ts</code>  里面有过多的业务代码的。</p>\n</li>\n<li>\n<p>优雅的解决方案：<br />\n将上面的操作封装成一个函数 <code>loadLocalCacheAction</code>  放进 Pinia 的 loginStore 里的 <code>action</code> , 然后在 <code>Store/index.ts</code>  里面导出一个 <code>registerStore</code>  函数，函数里面进行 <code>app.use(Pinia)</code>  使用 pinia 插件操作和 <code>loadLocalCacheAction</code>  操作，详细代码如下</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> App <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> useLoginStore <span class=\"token keyword\">from</span> <span class=\"token string\">'./login/login'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">registerStore</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> App<span class=\"token operator\">&lt;</span>Element<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 1.use 的 pinia</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 2. 加载本地的数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> loginStore <span class=\"token operator\">=</span> <span class=\"token function\">useLoginStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  loginStore<span class=\"token punctuation\">.</span><span class=\"token function\">loadLocalCacheAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> registerStore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后在 <code>main.js</code>  里面 <code>app.use(registerStore)</code>  调用 registerStore 函数，完成对 pinia 插件的使用，并执行 <code>loadLocalCacheAction</code>  函数，完成对动态路由的注册</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "笔记",
                "项目",
                "项目",
                "动态路由"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/security/",
            "url": "https://zimu-66ccff.github.io/security/",
            "title": "浏览器安全",
            "date_published": "2023-02-19T15:15:13.000Z",
            "content_html": "<h1 id=\"xss-攻击\"><a class=\"anchor\" href=\"#xss-攻击\">#</a> XSS 攻击</h1>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>XSS 指的是<strong>跨站脚本攻击</strong>，是一种代码注入攻击，本质是网站没有对恶意脚本进行过滤，导致其和普通代码混在了一起，最终被浏览器执行。</p>\n<h3 id=\"可以进行的操作\"><a class=\"anchor\" href=\"#可以进行的操作\">#</a> 可以进行的操作</h3>\n<ul>\n<li>获取页面的数据，比如 DOM，cookie，localStorage，sessionStorage</li>\n<li>DOS 攻击，向服务器发送大量的请求，占用服务器资源，导致用户无法访问服务器</li>\n<li>破坏页面结构</li>\n<li>流量劫持（将链接指向其他网站）</li>\n</ul>\n<h3 id=\"xss-攻击类型\"><a class=\"anchor\" href=\"#xss-攻击类型\">#</a> XSS 攻击类型</h3>\n<ul>\n<li>存储型 XSS 攻击<br />\n指的是恶意脚本会存储在服务器上，等到浏览器请求数据的时候，恶意脚本会返回，并执行。</li>\n<li>反射型 XSS 攻击<br />\n指的是诱导用户访问一个带有恶意代码的 url 后，服务器接收到数据后，把带有恶意代码的数据返回给浏览器，浏览器解析带有恶意脚本的数据，当作脚本执行，进行 XSS 攻击</li>\n<li>DOM 型 XSS 攻击<br />\n指的是直接通过操作 DOM 节点进行 XSS 攻击</li>\n</ul>\n<h3 id=\"如何防御-xss-攻击\"><a class=\"anchor\" href=\"#如何防御-xss-攻击\">#</a> 如何防御 XSS 攻击</h3>\n<ul>\n<li>前端程序员永远不要相信用户提交的数据，在进行拼凑 HTML 的时候，应该对字符串进行必要的转义，要考虑到拿来拼串的字符串可能带有恶意脚本。</li>\n<li>使用 CSP，CSP 的本质是建立一个白名单，这个白名单可以告诉浏览器哪些外部资源可以加载和执行，避免恶意代码的注入攻击。</li>\n<li>对敏感信息进行保护，比如对 cookie 使用 <code>http-only</code> ，使得脚本无法获取，或者使用验证码，避免脚本伪装成用户。</li>\n</ul>\n<h1 id=\"csrf-攻击\"><a class=\"anchor\" href=\"#csrf-攻击\">#</a> CSRF 攻击</h1>\n<h3 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h3>\n<p>CSRF 攻击是一种跨站伪造请求攻击，攻击者诱导用户进入一个第三方网站，然后这个第三方网站就会向被攻击网站发送跨站请求，如果用户保持了登录状态，那么攻击者就会利用这个登录状态，冒充用户执行一些操作。<br />\n其本质是利用 cookie 会在同源请求中携带发送给服务器，以此来实现用户的冒充。</p>\n<h3 id=\"常见的攻击类型\"><a class=\"anchor\" href=\"#常见的攻击类型\">#</a> 常见的攻击类型</h3>\n<ul>\n<li>GET 类型的 CSRF 攻击，比如在 img 标签里面构造一个请求，当用户打开这个网站的时候，就会发送请求。</li>\n<li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏他，当用户进入页面的时候自动提交表单</li>\n<li>链接类型的 CSRF 攻击，构造一个 a 标签，然后用户点击的时候触发攻击。</li>\n</ul>\n<h3 id=\"怎么防止-csrf-攻击\"><a class=\"anchor\" href=\"#怎么防止-csrf-攻击\">#</a> 怎么防止 CSRF 攻击</h3>\n<ul>\n<li>同源检测<br />\n服务器更具请求头中的 origin 和 referer 来判断请求是否来自允许访问的站点，但是 referer 可以仿造，并且会把搜索引擎的链接也给屏蔽了</li>\n<li>利用 token 进行验证<br />\n服务器向用户返回一个 token，然后用户每次请求的时候都要带 token，服务器再对这个 token 进行验证，缺点是给每个请求都加上 token 比较繁琐，并且如果请求经过负载均衡转移到了其他服务器，然后其他服务器的 session 中没有存储 token，就无法验证。</li>\n<li>利用 cookie 进行双重验证<br />\n用户在访问页面的时候，服务器向其域名添加一个 cookie，然后用户再次向服务器发送请求的时候，将这个 cookie 添加到 url 的参数中，服务器根据 cookie 中的数据和参数中的数据进行对比来验证。</li>\n<li>在设置 cookie 属性的时候设置 Samesite，限制 cookie 不能被第三方使用。</li>\n</ul>\n<h1 id=\"中间人攻击\"><a class=\"anchor\" href=\"#中间人攻击\">#</a> 中间人攻击</h1>\n<h3 id=\"概念-3\"><a class=\"anchor\" href=\"#概念-3\">#</a> 概念</h3>\n<p>中间人攻击是指攻击者分别与通信的两端建立联系，交换其所收到的数据，让通信的两端认为他们正在通过一个私密的链接直接与对方对话，攻击者可以拦截双非的对话，并插入新的内容。</p>\n<h3 id=\"攻击过程\"><a class=\"anchor\" href=\"#攻击过程\">#</a> 攻击过程</h3>\n<ul>\n<li>客户端发送请求到服务端，请求被中间人截获</li>\n<li>服务端向客户端返回公钥</li>\n<li>公钥被中间人截获，并生成一个伪造的公钥返回给客户端</li>\n<li>客户端收到伪造的公钥后，用伪造的公钥生成加密 hash 值发给服务器。</li>\n<li>中间人用自己的私钥解密获取真密钥，然后同时生成一个伪造的 hash 值发给服务器</li>\n<li>服务器用私钥解密获取假密钥，然后加密数据返回给客户端。</li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "浏览器原理",
                "前端",
                "浏览器原理",
                "浏览器安全"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/httpVersionDifference/",
            "url": "https://zimu-66ccff.github.io/httpVersionDifference/",
            "title": "浅谈http协议各版本之间，http协议与https协议之间的区别",
            "date_published": "2023-02-19T07:51:25.000Z",
            "content_html": "<h1 id=\"http11-与-http10-的区别\"><a class=\"anchor\" href=\"#http11-与-http10-的区别\">#</a> http1.1 与 http1.0 的区别</h1>\n<ul>\n<li>连接方面<br />\n http1.0 不是持久连接，每次发送请求都需要建立一个连接；http1.1 是持久连接，多次请求服用一个 tcp 连接。</li>\n<li>缓存方面<br />\n http1.0 的缓存主要是使用请求头中的 If-Modified-Sine,Expires 作为缓存判断的标准。http1.1 则增加了 Etag, if-None-match,if-Match 等更多选项来控制缓存策略</li>\n<li>资源请求方面<br />\n http1.0 请求资源的时候，有时候只是需要请求一点东西，但是服务器会把整个对象返回，存在浪费带宽的现象，并且不支持断点续传。http1.1 则在请求同中增加了 range 选项，支持只请求资源的某个部分，返回 206 状态码</li>\n<li>新增了 host 字段，来指定服务器的域名</li>\n<li>新增了 PUT,DELETE,TRACE,OPTIONS 请求方法</li>\n</ul>\n<h1 id=\"http20-与-http11-的区别\"><a class=\"anchor\" href=\"#http20-与-http11-的区别\">#</a> http2.0 与 http1.1 的区别</h1>\n<ul>\n<li>二进制协议<br />\n http1.1 里头信息必须是文本，数据体可以是文本可以是二进制。而 http2.0 则是个完全的二进制协议，头信息和数据体都必须是二进制，统称为 ' 帧'，分为头信息帧和数据帧。</li>\n<li>多路复用<br />\n http2.0 实现了多路复用，http2.0 依旧复用 tcp 连接，但是客户端和服务端都可以同时发送多个请求 or 响应，而且不用按照顺序一一发送，避免了 http 的队头阻塞。</li>\n<li>数据流<br />\n http2.0 使用了数据流的概念，因为 http2.0 的数据包不是按照顺序发送的，多个连续的数据包可能来自不同的请求 or 响应，所以需要指定他们来自哪个请求，哪个响应。http2.0 将请求 or 响应对应的所有数据包<br />\n称为一个数据流，每个数据流都有一个独一无二的编号，每个数据包发送的时候都必须带上数据流 ip，来指明它属于哪个数据流。</li>\n<li>头信息压缩<br />\n http1.1 协议不带状态，每次请求都必须带上所有的信息，所以很多字段都是重复的，这会浪费带宽，也会影响速度</li>\n<li>服务器推送<br />\n http2.0 允许服务器未经请求，主动的向客户端发送一些静态资源。</li>\n</ul>\n<h1 id=\"https-和-http-的区别\"><a class=\"anchor\" href=\"#https-和-http-的区别\">#</a> https 和 http 的区别</h1>\n<ul>\n<li>https 协议需要 CA 证书，费用较高，而 http 协议不需要</li>\n<li>http 协议是超文本传输协议，信息是明文传输的，https 是 ssl 加密传输协议，具有安全性</li>\n<li>使用不同的传输方式，端口号也不同，http 协议是运行在 80 端口 ，https 协议是运行在 443 端口</li>\n<li>http 协议很简单是无状态的，https 协议是用 ssl 协议和 http 协议构建的可加密传输，身份认证的网络协议，比 http 更安全。</li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "计算机网络",
                "前端",
                "计算机网络",
                "http1.0",
                "http1.1",
                "http2.0",
                "http3.0",
                "https"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/httpBase/",
            "url": "https://zimu-66ccff.github.io/httpBase/",
            "title": "http基本知识",
            "date_published": "2023-02-19T03:19:45.000Z",
            "content_html": "<h1 id=\"常见的请求方法及其相关面试问题\"><a class=\"anchor\" href=\"#常见的请求方法及其相关面试问题\">#</a> 常见的请求方法及其相关面试问题</h1>\n<h3 id=\"请求方法\"><a class=\"anchor\" href=\"#请求方法\">#</a> 请求方法</h3>\n<ul>\n<li>GET<br />\n 用来请求服务器的资源，是一个幂等请求，不会造成服务器数据的改变</li>\n<li>POST<br />\n 用来向服务器提供实体，服务器会保存提供的实体数据，不是一个幂等请求，会对服务器存储的数据造成改变。</li>\n<li>PUT<br />\n 用来提供数据，以更新服务器存储的数据。</li>\n<li>DELETE<br />\n 用来删除服务器里存储的相关数据</li>\n<li>HEAD<br />\n 和 GET 类似，只不过没有请求体</li>\n<li>OPTIONS<br />\n 用来发起预请求，通常用于跨域问题</li>\n<li>CONNECT<br />\n 要求在与代理服务器通信时建立一个隧道，用于 TCP 通信</li>\n<li>TRACE<br />\n 通常用于测试</li>\n</ul>\n<h3 id=\"相关面试问题\"><a class=\"anchor\" href=\"#相关面试问题\">#</a> 相关面试问题</h3>\n<ol>\n<li>GET 请求和 POST 请求的区别\n<ul>\n<li>应用场景<br />\n GET 请求通常用来请求数据，是一个幂等请求，不会对服务器存储的数据做出改变。POST 请求通常用来提交数据，不是一个幂等请求，会对服务器存储的数据造成改变</li>\n<li>发送的报文格式<br />\n GET 请求的请求体为空，POST 请求的请求体一般存储着要发给服务器的数据。</li>\n<li>是否缓存<br />\n因为 GET 请求通常时来向服务器请求资源，所以浏览器一般会对 GET 请求做缓存，但是很少对 POST 请求做缓存。</li>\n<li>安全性<br />\n GET 请求可以在 url 中携带一些参数，但是这种方式对于 POST 而言时不安全的，因为 POST 的参数中可能会携带用户的星期，而 URL 会被浏览器缓存。</li>\n<li>请求长度<br />\n因为浏览器对 url 的长度做了限制，所以 GET 请求发送请求的参数的个数会受到影响</li>\n<li>参数类型<br />\n POST 请求的参数支持更多类型</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"常见的-http-请求头和响应头\"><a class=\"anchor\" href=\"#常见的-http-请求头和响应头\">#</a> 常见的 HTTP 请求头和响应头</h1>\n<p>请求头</p>\n<ul>\n<li>本次请求的相关信息\n<ul>\n<li>Content-Type: 客户端发出去的请求体的类型</li>\n<li>Host: 发出请求的所在页面的域名</li>\n<li>Referer: 发送请求的所在页面的 url</li>\n<li>origin：最初的请求是从哪里发起的，只会精确到端口号，更尊重隐私</li>\n</ul>\n</li>\n<li>希望收到的响应体的类型\n<ul>\n<li>Accept：浏览器支持的类型</li>\n<li>Accept-Charset: 浏览器支持的字符集</li>\n<li>Accept-Encoding: 浏览器支持的压缩编码</li>\n<li>Accept-Language: 浏览器自持的语言</li>\n</ul>\n</li>\n<li>缓存相关\n<ul>\n<li>Cache-Contral: 是否开启缓存，开启协商缓存还是强缓存，no-store 不开启缓存，no-cache 开启强缓存。</li>\n<li>Expires: 缓存到期时间</li>\n<li>Max-age: 缓存保存多长时间</li>\n<li>If-Modified-Since: 对标响应头的 Last-Modified, 用来匹配文件是否变动，只能精确到 1s 之内</li>\n<li>If-None-Match: 对标响应头的 Etag，非常精确</li>\n</ul>\n</li>\n<li>Cookie\n<ul>\n<li>可以携带相关信息，同源访问时会自动带上</li>\n</ul>\n</li>\n<li>用户信息\n<ul>\n<li>User-Agent: 用户客户端的一些必要信息</li>\n</ul>\n</li>\n</ul>\n<p>响应头</p>\n<ul>\n<li>本次响应的相关信息\n<ul>\n<li>Content-Type: 同上</li>\n<li>Server: 服务器的一些相关信息</li>\n</ul>\n</li>\n<li>同源策略\n<ul>\n<li>Access-Contral-Allow-Origin: 服务器允许请求的 Origin 头部</li>\n</ul>\n</li>\n<li>缓存相关\n<ul>\n<li>Cache-Contral: 同上</li>\n<li>Expires: 同上</li>\n<li>Max-age: 同上</li>\n<li>Last-Modified: 请求资源最后修改的时间</li>\n<li>Etag: 资源特定版本的标识符</li>\n</ul>\n</li>\n<li>Cookie\n<ul>\n<li>Set-Cookie: 返回给客户端，用于设置 Cookie</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"http-请求报文\"><a class=\"anchor\" href=\"#http-请求报文\">#</a> http 请求报文</h1>\n<p><img data-src=\"https://i.328888.xyz/2023/02/19/XkBJv.png\" alt=\"请求报文\" /></p>\n<h1 id=\"http-响应报文\"><a class=\"anchor\" href=\"#http-响应报文\">#</a> http 响应报文</h1>\n<p><img data-src=\"https://i.328888.xyz/2023/02/19/XkgD3.png\" alt=\"响应报文\" /></p>\n<h1 id=\"常见状态码\"><a class=\"anchor\" href=\"#常见状态码\">#</a> 常见状态码</h1>\n<ul>\n<li>1xx 请求正在处理</li>\n<li>2xx 请求处理成功\n<ul>\n<li>200 请求已经被服务器正确处理</li>\n<li>204 请求被正确处理，但是没有返回响应体</li>\n<li>206 表示进行了范围请求</li>\n</ul>\n</li>\n<li>3xx 请求发送重定向\n<ul>\n<li>301 请求永久重定向</li>\n<li>302 请求临时重定向</li>\n<li>304 让服务器去请求缓存文件</li>\n</ul>\n</li>\n<li>4xx 客户端发生错误\n<ul>\n<li>400 请求体存在语法错误</li>\n<li>401 请求没有权限</li>\n<li>403 请求的资源被服务器拒绝</li>\n<li>404 请求的资源不存在</li>\n<li>405 服务器不支持这种请求方式</li>\n</ul>\n</li>\n<li>5xx 服务器发生错误\n<ul>\n<li>500 服务器发送错误</li>\n<li>501 服务器不支持请求所需要的某个功能</li>\n<li>502 服务器从上层服务器得到了空的响应</li>\n<li>503 服务器发送临时错误</li>\n<li>504 服务器响应超时</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "计算机网络",
                "前端",
                "计算机网络",
                "http基础知识"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/realizeWebpack/",
            "url": "https://zimu-66ccff.github.io/realizeWebpack/",
            "title": "理解webpack",
            "date_published": "2023-02-18T09:52:00.000Z",
            "content_html": "<h1 id=\"webpack-常用配置\"><a class=\"anchor\" href=\"#webpack-常用配置\">#</a> webpack 常用配置</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> CopyWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> HappyPack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'happypack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> BundleAnalyzerPlugin <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-bundle-analyzer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>BundleAnalyzerPlugin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> VueLoaderPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-loader/dist/index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> DefinePlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 表示当前是什么环境</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 用于设置入口文件路径的相对值，也就是说入口文件的路径不是相对于自身的，二是相对于 context 的</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 默认值是 webpack 的启动路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token literal-property property\">context</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 打包的时候生成一个 source-map 文件方便调试</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token literal-property property\">devtool</span><span class=\"token operator\">:</span> <span class=\"token string\">'source-map'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 入口文件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/main.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 出口</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 打包后的文件名</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 打包后的文件的存储路径</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 该配置和 CleanWbpeckPlugin 效果一样，配置了就不需要再配置插件了</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// clear: true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.m?js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 因为 loder 在处理文件的时候是单线程的，所以交给 happypack 来开启多线程处理，详细请看插件部分的 happypack</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'happypack/loader?id=happybabel'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 只处理 src 文件夹下面的 js 文件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 排除 exclude 文件</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.vue$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'vue-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'style-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          <span class=\"token comment\">// 将 css 样式插入到 DOM 中</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'style-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>          <span class=\"token comment\">// 解析 css</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token comment\">// 解析 less，将 less 转换为 css</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'less-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpe?g|gif|svg)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//webpack5 以前的方法</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// use: [</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">//   &#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">//     loader: 'file-loader',</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">//     options: &#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">//       name: 'img/[name].[hash:8].[ext]',</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">//     &#125;,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">//   &#125;,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// ],</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">//webpack5 的方法</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token literal-property property\">genetator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'img/[name].[hash:8].[ext]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpe?g|gif|svg)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">//webpack5 以前的方法</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">// use: [</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">//   &#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">//     // 对小的图片直接转换为 base64 形式的 url，和页面一起请求，提高图片加载的速度</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">//     loader: 'url-loader',</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">//     options: &#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">//       limit: 100 * 1024,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">//       name: '[name].[hash:8].[ext]',</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">//       outputPath: 'img',</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">//     &#125;,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">//   &#125;,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// ],</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">//webpack5 的方法</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token literal-property property\">genetator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'img/[name].[hash:8].[ext]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token literal-property property\">dataUrlConditon</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token literal-property property\">maxSize</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(woff2?|eot|ttf)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 利用 webpack5 的资源模块来处理字体图标</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token literal-property property\">genetator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>          <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'font/[name].[hash:8].[ext]'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 用来处理.vue 文件</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">// 每次重新打包的时候都需要手动删除 dist 文件夹，配置这个插件，就可以自动删除 dist</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">//webpack 打包的时候默认没有 index.html 文件，但是我们部署到静态服务器的时候是需要这个文件的，用这个插件就可以生成一个 index.html</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'这里设置index.html的标题'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>      <span class=\"token comment\">// 用来配置生成 index.html 文件的模板</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>      <span class=\"token comment\">// template: './public/index.html'</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">// 用来定义环境变量</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>      <span class=\"token comment\">//   BASE_URL: './',</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token comment\">// 可以将 public 文件夹里面的一些内容复制到打包的 dist 文件夹里面</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      <span class=\"token comment\">// 进行相关配置</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      <span class=\"token literal-property property\">patterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token comment\">// 从哪里开始复制</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token comment\">// 复制到哪里，默认为打包的目录下</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token comment\">// 一些额外的选项</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token literal-property property\">globOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>          <span class=\"token comment\">// 忽略哪些文件</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>          <span class=\"token literal-property property\">ignore</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'**/.DS_Store'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'**/index.html'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token comment\">// 开启多线程，增快 webpack 的速度</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HappyPack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'happybabel'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>      <span class=\"token literal-property property\">loaders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>          <span class=\"token comment\">// 使用 babel 将 es6 的代码转换成 es5 的代码，并将 cacheDirectory 设置为 true，将 babel 编译过的文件缓存起来</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>          <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader?cacheDirectory=true'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>          <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token comment\">//   plugins: [</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token comment\">//     // 转化 const</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token comment\">//     '@babel/plugins-transform-block-scoping',</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token comment\">//     // 转化箭头函数</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token comment\">//     '@babel/plugins-transform-arrow-functions',</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token comment\">//   ],</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token comment\">// 一个一个的加载插件太麻烦了，可以使用 babel 的预设来自动根据预设加载插件</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token comment\">// 如果要使用 ts，也可以用 @babel/preset-typescript 预设</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>      <span class=\"token comment\">// 开启 4 个线程</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>      <span class=\"token literal-property property\">threads</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token comment\">// 可视化 webpack 输出文件的体积</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">BundleAnalyzerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token comment\">// 将每个 js 文件包含的 css 单独打包成一个文件，支持按需映入</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token comment\">// 当模块导入的时候要是没有后缀名，会自动加上下面配置的后缀名</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token comment\">// 配置路径别名，注意如果有 ts 的话，需要在 tsconfig.ts 中也配置路径别名</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>      <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token comment\">// 开启热更新，默认就是开启的，但是需要手动指定对哪些模块进行热更新</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token comment\">// 项目运行的端口号</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token comment\">// 项目运行的主机</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token comment\">// 打包的时候是否自动打开浏览器</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token comment\">// 是否对文件进行压缩</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token literal-property property\">compress</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token comment\">// 配置代理，解决跨域的问题</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>      <span class=\"token string-property property\">'/api'</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>      <span class=\"token literal-property property\">pathRewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">'^/api'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token comment\">// 开启 scope Hoisting 分析模块之间的依赖关系，经可能的将模块打包到一个函数里面</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token literal-property property\">concatenateModules</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"不同环境怎么切换不同的-webpack\"><a class=\"anchor\" href=\"#不同环境怎么切换不同的-webpack\">#</a> 不同环境怎么切换不同的 webpack</h1>\n<ul>\n<li>通常会在 config 文件夹里面写 <code>webpack.prod.config.js</code> ,  <code>webpack.dev.config.js</code> ,  <code>webpack.common.js</code>  这样的三份文件</li>\n<li>在<strong>生产环境</strong> and <strong>开发环境</strong>对应的配置文件中，利用 <code>webpack-merge</code>  这个包提供的 <code>merge</code>  函数，来对<strong>通用</strong>的配置文件进行合并，下面是一个列子</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> merge <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> commonConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.comman.config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>commonConfig<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 开启热更新，默认就是开启的，但是需要手动指定对哪些模块进行热更新</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 项目运行的端口号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 项目运行的主机</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打包的时候是否自动打开浏览器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 是否对文件进行压缩</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token literal-property property\">compress</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>再通过配置 <code>package.json</code>  里面的 <code>script</code>  属性，来执行不同的 webpack 配置文件</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --config ./config/webpack.prod.config.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --config ./config/webpack.dev.config.js --progress\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h1 id=\"怎么利用-webpack-来优化前端性能\"><a class=\"anchor\" href=\"#怎么利用-webpack-来优化前端性能\">#</a> 怎么利用 webpack 来优化前端性能</h1>\n<ul>\n<li>压缩代码体积<br />\n利用 webpack 的 <code>UglifyJsPlugin</code>  和 <code>ParallelUglifyPlugin</code>  来压缩 js 代码（在 webpack 里面 <code>mode</code>  为 <code>production</code>  的时候会自动开启），通过 <code>mini-css-extract</code>  来 压缩 css，将每个 js 文件包含的 css 单独打包成一个 css 文件，支持按需引入。</li>\n<li>利用 CDN 加速<br />\n将引用的一些资源的路径修改成对应的 CDN 上面的路径</li>\n<li>利用 tree Shaking<br />\n 将永远不会执行的代码片段删除</li>\n<li>利用 Scope Hoisting 将可能的将打包出来的模块合并到一个函数里面</li>\n</ul>\n<h1 id=\"怎么提高-webpack-的打包速度\"><a class=\"anchor\" href=\"#怎么提高-webpack-的打包速度\">#</a> 怎么提高 webpack 的打包速度</h1>\n<ul>\n<li>优化 Loader\n<ul>\n<li>利用 <code>include</code> ,  <code>exclude</code>  来优化 loader 的搜索范围，比如只对 <code>src</code>  文件下的 js 代码进行编译，忽略 <code>node_modules</code>  文件。</li>\n<li>利用缓存，将 loader 处理过的文件缓存起来。</li>\n</ul>\n</li>\n<li>利用 HappyPack<br />\n 受限于 node，webpack 在打包过程中也是单线程的，但是利用 HappyPack 就可以将 loader 的同步执行变成多线程的。</li>\n<li>利用 DllPlugin<br />\nDllolugin 可以提前将指定的类库打包然后引入，这样可以减少打包的次数，只有类库版本更新的时候才需要打包。</li>\n<li>代码压缩<br />\n压缩的一些操作同上</li>\n</ul>\n<h1 id=\"怎么减小-webpack-打包的体积\"><a class=\"anchor\" href=\"#怎么减小-webpack-打包的体积\">#</a> 怎么减小 webpack 打包的体积</h1>\n<ul>\n<li>tree shaking</li>\n<li>Scope Hoisting</li>\n<li>代码压缩</li>\n</ul>\n<h1 id=\"webpack-构建流程\"><a class=\"anchor\" href=\"#webpack-构建流程\">#</a> webpack 构建流程</h1>\n<ul>\n<li>初始化参数<br />\n从配置文件和 shell 语句中读取参数，合并参数</li>\n<li>开始编译<br />\n利用上一步得到的参数初始化 <code>compiler</code>  对象，并加载所有需要的插件，调用 <code>compiler</code>  对象的 <code>run</code>  方法，开始编译</li>\n<li>确定入口<br />\n从 <code>entry</code>  中找到所有的入口文件</li>\n<li>编译模块<br />\n利用 <code>loader</code>  开始编译文件，在从文件中找到相关的依赖模块，然后递归此步骤，直到所有的文件都被编译</li>\n<li>完成模块编译<br />\n此时所有的文件都已经被编译，并且也已经得到了文件之间的依赖关系</li>\n<li>整理输出的资源<br />\n将所有的编译完成的文件，按照他们之间的依赖关系，组成多个 chunk， 再把 chunk 合并为一个单独的文件，作为输出的文件内容</li>\n<li>输出文件<br />\n按照配置文件里面确定的路径和文件名写入文件内容</li>\n</ul>\n<h1 id=\"webpack-hmr-热更新原理\"><a class=\"anchor\" href=\"#webpack-hmr-热更新原理\">#</a> webpack HMR 热更新原理</h1>\n<ul>\n<li>监视阶段\n<ul>\n<li>webpack 的 watch 模式会监视文件的变化，一旦文件有变化，就会对该文件重新编译打包，然后将重新编译打包后的代码存在一个 js 对象里</li>\n<li><code>webpack-dev-server</code>  的中间件 <code>webpack-dev-middleware</code>  会对代码进行监控，一旦有代码发生改变，就会通知 webpack 将代码打包到内存中</li>\n<li>当 <code>devServer.watchContentBase</code>  设置为 <code>true</code>  的时候，server 就会监视这些配置文件夹里面的静态文件的变化，一旦有变化就会让浏览器刷新也就是 <code>live reload</code> 。</li>\n</ul>\n</li>\n<li>传递阶段\n<ul>\n<li><code>webpack-dev-server</code>  和 <code>webpack-dev-server/client</code>  客户端之间会维护一个 websockt 长连接，将 webpack 的信息传递给客户端，其中最主要的是传递新模块的 hash 值。</li>\n<li>因为客户端 <code>webpack-dev-server/client</code>  不能请求更新的代码，所以它会将信息传递给 <code>webpack/hot/dev-server</code> .</li>\n<li><code>webpack/hot/dev-server</code>  会将新模块的 hash 值与 <code>devSever</code>  配置里面允许进行热更新模块的模块的 hash 值进行比对，如果一致，则说明需要热更新，就会把 hash 值进一步传递给 <code>HotModuleReplacementRuntime</code> ，不过不一致则会直接刷新浏览器。</li>\n<li><code>HotModuleReplacementRuntime</code>  会通过 <code>jsonpMainTemplateRuntime</code>  来发送 Ajax 请求，来返回一个 json，这个 json 文件包括了所有要进行热更新的模块的 hash 值，然后会再发送一个 jsonp 请求，获取到最新的模块代码。</li>\n</ul>\n</li>\n<li>比对阶段\n<ul>\n<li><code>HotModulePlugin</code>  会对新旧模块进行对比，来决定是否进行热更新，在决定热更新后，就会更新模块，以及模块的依赖</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://i.328888.xyz/2023/02/18/BuGsQ.png\" alt=\"HMR\" /></p>\n",
            "tags": [
                "笔记",
                "前端",
                "前端工程化",
                "前端",
                "前端工程化",
                "webpack"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/teachNote/",
            "url": "https://zimu-66ccff.github.io/teachNote/",
            "title": "开关门弟子培养方案",
            "date_published": "2023-02-17T15:25:31.000Z",
            "content_html": "<h1 id=\"前端带新人计划\"><a class=\"anchor\" href=\"#前端带新人计划\">#</a> 前端带新人计划</h1>\n<ul class=\"task-list\">\n<li>\n<p>JS 基础部分 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVk4NHkxTDdObj9wPTE1MSZhbXA7dmRfc291cmNlPWUyY2FmNTY5ZTFjMzI1MDdiMTRlMDRjMDdmY2ExNGY5\">此部分学习资源请点击这里</span></p>\n<ul class=\"task-list\">\n<li>第一周</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 视频 1p - 62p (2.20 - 2.21 2.22 自由调整)<br />\n 可以看出非常努力，认真的人总是讨人喜欢的，后续做好总结复习基本就没问题了，（let, const, var 的区别，变量提升，需要多思考多理解）</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 视频 63p - 115p (2.23 - 2.24 2.25 自由调整)<br />\n 有一点没看完，问题不大，捕获和冒泡，以及冒泡的应用事件委托，需要着重理解一下。</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> 休息 （2.26）</label></li>\n<li>第二周</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> 视频 116p - 150p (2.27 - 2.28 3.1 自由调整)<br />\n<strong> 恭喜你 JS 基础部分，DOM, BOM 部分已经学完了，很厉害奥</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\"> 总结 html，css 部分（包括 flex 布局）js 部分 (3.2 - 3.3 3.4 自由调整)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\" /><label for=\"cbx_5\"> 休息 （3.5）</label></li>\n</ul>\n</li>\n<li>\n<p>JS 高级部分 (此部分学习资源请联系我奥，此部分会遇到很多难以理解的地方，请及时找我)</p>\n<ul class=\"task-list\">\n<li>第三周</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\" /><label for=\"cbx_6\"> 01，02 文件夹里面的视频 (3.6 - 3.7 3.8 自由调整)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\" /><label for=\"cbx_7\"> 03, 04 文件夹里面的视频 (3.9 - 3.10 3.11 自由调整)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\" /><label for=\"cbx_8\"> 休息 (3.12)</label></li>\n<li>第四周</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\" /><label for=\"cbx_9\"> 05, 06 文件夹里面的视频 (3.13 - 3.14 3.15 自由调整)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\" /><label for=\"cbx_10\"> 07, 08 文件夹里面的视频 (3.16 - 3.17 3.18 自由调整)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\" /><label for=\"cbx_11\"> 休息 (3.19)</label></li>\n<li>第五周</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" disabled=\"true\" /><label for=\"cbx_12\"> 09, 10, 11 文件夹里面的内容 (3.20 - 3.21 3.22 自由调整)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" disabled=\"true\" /><label for=\"cbx_13\"> 12, 13, 14 文件夹里面的内容 (3.23 - 3.24 3.25 自由调整)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" disabled=\"true\" /><label for=\"cbx_14\"> 休息 (3.26)<br />\n<strong> 恭喜你 JS 高级已经学完了，至此 js 基本上你已经可以说是熟悉 or 掌握了，欢迎加入前端大家庭</strong></label></li>\n</ul>\n</li>\n<li>\n<p>初识 node 和 npm<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWEzNHkxNjdBWj9wPTIzJmFtcDt2ZF9zb3VyY2U9ZTJjYWY1NjllMWMzMjUwN2IxNGUwNGMwN2ZjYTE0Zjk=\"> 此部分学习资源请点击这里</span></p>\n<ul class=\"task-list\">\n<li>第六周</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" disabled=\"true\" /><label for=\"cbx_15\"> 视频 1p - 31p (3.27 - 3.28 3.29 自由调整)</label></li>\n</ul>\n</li>\n<li>\n<p>VUE 全家桶的学习 + 初识 TS (资源请联系本人)</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_16\" disabled=\"true\" /><label for=\"cbx_16\"> 学会 vue，vurRouter，Pina, TS 的基本使用（4.1 - 5.1）</label></p>\n</li>\n<li>\n<p>ps：后面会考虑细分，毕竟这是很大的一个模块。</p>\n</li>\n</ul>\n<p><strong>恭喜你，你已经是一个具备项目开发能力的前端了</strong></p>\n<ul class=\"task-list\">\n<li>Vue + TS 项目开发</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" disabled=\"true\" /><label for=\"cbx_17\"> 开发一个 vue + ts 的项目 (5.1 - 5.16)</label></li>\n</ul>\n<p><strong>恭喜你，你已经完成了自己的第一个项目</strong></p>\n",
            "tags": [
                "带人",
                "带人"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/debounce-throttle/",
            "url": "https://zimu-66ccff.github.io/debounce-throttle/",
            "title": "防抖和节流",
            "date_published": "2023-02-17T10:28:13.000Z",
            "content_html": "<h1 id=\"防抖\"><a class=\"anchor\" href=\"#防抖\">#</a> 防抖</h1>\n<ul>\n<li>简要介绍<br />\n防抖是指事件被触发后的一定时间后才执行回调，这期间如果事件被再次触发，则重新计时，常用于按钮的点击事件，避免按钮短时间内被多次点击，向服务器发送过多的请求</li>\n<li>主要应用\n<ul>\n<li>按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次</li>\n<li>服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次。</li>\n</ul>\n</li>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> dup <span class=\"token operator\">===</span> <span class=\"token number\">100</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"节流\"><a class=\"anchor\" href=\"#节流\">#</a> 节流</h1>\n<ul>\n<li>简要介绍<br />\n节流是指在一定事件内，事件被多次触发只生效第一次， 常用于对 <code>scroll</code>  事件的处理</li>\n<li>主要应用\n<ul>\n<li>拖拽场景：固定时间内只执⾏⼀次，防⽌超⾼频次触发位置变动</li>\n<li>缩放场景：监控浏览器 <code>resize</code></li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题</li>\n</ul>\n</li>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> dup <span class=\"token operator\">===</span> <span class=\"token number\">100</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> dup<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "前端",
                "性能优化",
                "前端",
                "性能优化",
                "防抖节流"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/lazyLoading/",
            "url": "https://zimu-66ccff.github.io/lazyLoading/",
            "title": "图片懒加载",
            "date_published": "2023-02-17T08:52:37.000Z",
            "content_html": "<h1 id=\"实现图片懒加载\"><a class=\"anchor\" href=\"#实现图片懒加载\">#</a> 实现图片懒加载</h1>\n<h2 id=\"传统的不够优雅的实现方式\"><a class=\"anchor\" href=\"#传统的不够优雅的实现方式\">#</a> 传统的不够优雅的实现方式</h2>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> imgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  imgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">&lt;</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> dataSrc <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      img<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> dataSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'事件被触发'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>基本原理<br />\n监听 <code>scroll</code>  事件， <code>scroll</code>  事件一旦被触发，就在 <code>callback</code>  里面通过 <code>xxx.getBoundingClientRect().top</code>  拿到元素距离可视区顶部的距离，并通过 <code>window.innerHeight</code>  取得可视区的高度，将两个高度作比较，一旦前者小于后者，则意味着图片进入了可视区，就将自定义属性 <code>data-src</code>  存储的图片的 <code>url</code>  赋值给 <code>src</code>  属性，加载图片。</li>\n<li>带来的问题<br />\n <code>scroll</code>  事件会被触发 n 多次，很容易造成卡顿，影响用户体验。</li>\n<li>解决方案<br />\n利用<strong>节流</strong>，但是这种解决方案并不优雅，而且也不能完完全全的解决问题。</li>\n</ul>\n<h2 id=\"利用-intersectionoberver-api-优雅的实现懒加载\"><a class=\"anchor\" href=\"#利用-intersectionoberver-api-优雅的实现懒加载\">#</a> 利用 intersectionOberver API 优雅的实现懒加载</h2>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> imgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      dataSrc <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      img<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> dataSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'事件被触发'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>imgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>intersectionObserver API 简单介绍</p>\n<ul>\n<li><code>intersectionObserver</code>  是一个构造函数，可以给其传递一个参数 <code>callback</code> , 会返回一个观察者实列 <code>observer</code></li>\n<li>调用实例身上的 <code>observe</code>  方法，并给其传一个元素的引用，就可以开始观察这个元素。相对的，调用实列身上的 <code>unobserve</code>  方法就可以取消观察这个元素。</li>\n<li>当被观察的元素进入 or 离开可视区的时候， <code>callback</code>  就会被触发。</li>\n<li><code>callback</code>  的参数为一个数组，数组里面存储的是被观察的元素中进入 or 离开可视区的元素的一些信息。比如参数数组中的元素的 <code>isIntersecting</code>  属性存储的就是该元素是进入可视区还是离开可视区，<br />\n <code>target</code>  属性存储的则是元素的引用。</li>\n</ul>\n</li>\n<li>\n<p>利用 intersectionObserver API 实现懒加载的原理</p>\n</li>\n</ul>\n<ol>\n<li><code>document.querySelectorAll(img)</code>  获取对所有 <code>img</code>  标签的引用，存储进 <code>imgs</code></li>\n<li>new 一个 intersectionObserver 实列  <code>observer</code> ， 给其传递一个 <code>callback</code>  作为参数， 在 <code>callback</code>  中进行接下来的操作。</li>\n<li>拿到 <code>callback</code>  的参数 <code>entries</code>  <em>（为一个保存了被观察的元素中进入 or 离开可视区的元素的信息的数组</em>。遍历这个参数 <code>entries</code> ， 取出参数中的元素 <code>entry</code> 。</li>\n<li>判断 <code>entry.isIntersecting</code>  是否为 <code>true</code> ， 为 <code>true</code>  则说明是进入了可视区，则进行接下来的操作，为 <code>false</code>  则说明是离开可视区，则啥都不做。</li>\n<li>利用 <code>entry.target</code>  取出进去可视区的元素，将其赋值给 <code>img</code> ， 然后取出 <code>img</code>  身上的 <code>data-src</code>  属性存储的 <code>url</code>  赋值给 <code>src</code>  属性，实现懒加载，并且调用 <code>observer.unobserve</code>  来取消对这个图片元素的观察（这样一旦元素被加载，就取消了对它的观察，就不会再触发 callback，避免不必要的性能消耗）</li>\n<li>遍历 <code>imgs</code>  调用 <code>observer.observe(img)</code>  来观察所有的 <code>img</code>  标签</li>\n</ol>\n",
            "tags": [
                "笔记",
                "前端",
                "性能优化",
                "前端",
                "性能优化",
                "懒加载"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/realizeCDN/",
            "url": "https://zimu-66ccff.github.io/realizeCDN/",
            "title": "理解CDN",
            "date_published": "2023-02-17T06:15:34.000Z",
            "content_html": "<h1 id=\"理解-cdn-及其原理\"><a class=\"anchor\" href=\"#理解-cdn-及其原理\">#</a> 理解 CDN 及其原理</h1>\n<h2 id=\"cdn-是什么\"><a class=\"anchor\" href=\"#cdn-是什么\">#</a> CDN 是什么</h2>\n<p>CDN (Content Delivery Network) 内容分发网络， 是一种靠互联网连接的电脑网络系统，它根据用户所在的区域，选择离用户最近的服务器来将相关文件发送给用户，以此提供更快速，更稳定的网络内容分发服务。</p>\n<h2 id=\"cdn-由什么组成\"><a class=\"anchor\" href=\"#cdn-由什么组成\">#</a> CDN 由什么组成</h2>\n<ul>\n<li>分发服务系统<br />\n分发服务系统最基本的工作单位是 Cache 设备，cache 设备负责直接响应用户的请求，将缓存在本地的内容快速的提供给用户，并且负责与源站点进行同步，将更新的内容，本地没有的内容，缓存到本地</li>\n<li>负载均衡系统， 主要负责对所有发起请求的用户进行一个访问调度，主要分为全局负载均衡系统和本地负载均衡系统。\n<ul>\n<li>全局负载均衡系统，主要根据发起请求的用户所在的区域，选择一个最靠近用户的 cache。</li>\n<li>本地负载均衡系统，主要是负责节点内部的设备负载均衡。</li>\n</ul>\n</li>\n<li>运营管理系统<br />\n主要是负责业务层面与外界系统的交互。</li>\n</ul>\n<h2 id=\"cdn-的作用\"><a class=\"anchor\" href=\"#cdn-的作用\">#</a> CDN 的作用</h2>\n<ul>\n<li>性能方面\n<ul>\n<li>用户收到的内容来自最近的服务器，延迟更低，内容加载更快。</li>\n<li>部分资源的请求分配给了 CDN，服务器的负载减小。</li>\n</ul>\n</li>\n<li>安全方面， 可以有效的防止黑客攻击</li>\n</ul>\n<h2 id=\"dns-域名解析的过程\"><a class=\"anchor\" href=\"#dns-域名解析的过程\">#</a> DNS 域名解析的过程</h2>\n<p>比如在浏览器输入 www.test.com 的解析过程如下</p>\n<ul>\n<li>检查浏览器缓存</li>\n<li>检查操作系统缓存，比如 hosts 文件</li>\n<li>检查路由器缓存</li>\n<li>如果以上都没有找到缓存，则会向网络服务商的 LDNS 服务器查询</li>\n<li>如果 LDNS 服务器没有查询到，就会向根域名服务器进行查询</li>\n<li>根服务器会返回一个顶级域名服务器，比如  <code>.com</code> ,  <code>.org</code>  的地址，本例是返回 <code>.com</code>  的地址</li>\n<li>接着向顶级域名服务器查询，顶级域名服务器会返回一个次级域名服务器的地址，本文中为 <code>.test</code>  的地址</li>\n<li>接着向次级域名服务器查询，次级域名服务器会返回通过域名查询到的目标 ip， 本文为 <code>www.test.com</code>  的地址</li>\n<li>Local DNS Server 会缓存结果，并返回给用户， 缓存在系统中</li>\n</ul>\n<h2 id=\"cdn-工作原理\"><a class=\"anchor\" href=\"#cdn-工作原理\">#</a> CDN 工作原理</h2>\n<ul>\n<li>用户没有用 CDN 缓存资源时</li>\n</ul>\n<ol>\n<li>浏览器会通过 DNS 域名解析（上面的 DNS 域名解析）, 得到域名对应的 ip 地址</li>\n<li>浏览器会根据得到的 ip 地址，向域名的服务主机发送请求</li>\n<li>服务器向浏览器响应数据。</li>\n</ol>\n<ul>\n<li>用户使用了 CDN 缓存资源时</li>\n</ul>\n<ol>\n<li>浏览器的 DNS 域名解析会发现这个 url 对应的时 CDN 的 DNS 服务器，则会将域名解析权交给 CDN 专用的 DNS 服务器。</li>\n<li>DNS 服务器会将 CDN 的全局负载均衡设备的 ip 返回给用户。</li>\n<li>用户会通过 ip 向全局负载均衡设备发送请求</li>\n<li>全局负载均衡设备会根据用户的 ip 地址，url，选择一台用户区域的区域负载均衡设备，让用户向这个设备发送请求</li>\n<li>区域负载均衡设备会选择一个适合的缓存服务器来提供服务，将这个服务器的 ip 地址返回给全局均衡设备。</li>\n<li>全局均衡设备会将这个 ip 返回这个用户</li>\n<li>用户会通过这个 ip 地址来向缓存服务器发起请求</li>\n<li>缓存服务器响应用户的请求，将内容发送至用户终端。</li>\n</ol>\n<p><img data-src=\"https://i.328888.xyz/2023/02/17/pcIMz.png\" alt=\"CDN\" /></p>\n<p>如果缓存服务器没有用户想要的内容，则会向它的上一级缓存服务器请求内容，直到获取到想要的内容，如果还是没有，则会回到自己的服务器去请求内容。</p>\n",
            "tags": [
                "笔记",
                "前端",
                "性能优化",
                "前端",
                "性能优化",
                "CDN"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/executionContext/",
            "url": "https://zimu-66ccff.github.io/executionContext/",
            "title": "JS执行上下文",
            "date_published": "2023-02-16T15:04:30.000Z",
            "content_html": "<h1 id=\"什么是执行上下文\"><a class=\"anchor\" href=\"#什么是执行上下文\">#</a> 什么是执行上下文</h1>\n<p>简单地说，执行上下文是评估和执行 Javascript 代码的环境的一个抽象概念。任何代码在 JavaScript 中运行时，都在执行上下文中运行。</p>\n<h1 id=\"执行上下文的类型\"><a class=\"anchor\" href=\"#执行上下文的类型\">#</a> 执行上下文的类型</h1>\n<ul>\n<li>全局执行上下文<br />\n默认的，基础的执行上下文，任何不在函数内部的代码都在全局执行上下文中，全局执行上下文只能有一个。</li>\n<li>函数执行上下文<br />\n函数被调用时创建的执行上下文，程序中可以有多个函数执行上下文</li>\n<li>Eval 函数执行上下文<br />\n Eval 函数内部的代码执行时也会有自己的执行上下文，但是我们一般不使用 Eval 函数，所以这里我们不讨论。</li>\n</ul>\n<h1 id=\"执行栈\"><a class=\"anchor\" href=\"#执行栈\">#</a> 执行栈</h1>\n<ul>\n<li>在别的编程语言中也被称为<strong>调用栈</strong>，是一种先入后出的栈形结构，用来存储程序执行过程中创建的所有执行上下文。</li>\n<li>当 js 代码开始执行的时候就会创建一个全局执行上下文，然后将其加入执行栈中，当遇到函数调用的时候就将创建一个函数执行上下文， 将其加入执行栈中，当函数调用完毕再将其移出执行栈。</li>\n</ul>\n<p>下面看一个例子。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Again inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside second function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside Global Execution Context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.328888.xyz/2023/02/16/p0Z35.png\" alt=\"执行栈\" /><br />\n上图为执行栈</p>\n<p>当浏览器加载上述代码时，Javascript 引擎会创建一个全局执行上下文，并将其推入当前执行栈。当遇到对 <code>first()</code>  的调用时，Javascript 引擎会为该函数创建一个新的执行上下文（函数执行上下文），并将其推到当前执行堆栈的顶部。<br />\n当在  <code>first()</code>  函数中调用  <code>second()</code>  函数时，Javascript 引擎会为该函数创建一个新的执行上下文，并将其推到当前执行栈的顶部。当  <code>second()</code>  函数结束时，它的执行上下文从当前栈中弹出，控件到达它下面的执行上下文，也就是  <code>first()</code>  函数的执行上下文。</p>\n<h1 id=\"词法环境lexical-environment\"><a class=\"anchor\" href=\"#词法环境lexical-environment\">#</a> 词法环境（Lexical Environment）</h1>\n<p>词法环境由三部分组成</p>\n<ul>\n<li>环境记录器， 环境记录器有两类\n<ul>\n<li>声明型环境记录：存储着变量与函数的声明。</li>\n<li>变量型环境记录 除了存储着变量与函数的声明以外，还存储着一个全局对象，浏览器环境为 <code>window</code></li>\n<li><em>ps</em>：对于函数执行上下文，环境记录还应该包括一个参数对象（arrguments），它保存着参数索引与参数之间的映射，以及参数数组的长度</li>\n</ul>\n</li>\n<li>指向外部环境的引用\n<ul>\n<li>保存着外部环境的引用，因为它才有作用域链查找</li>\n</ul>\n</li>\n<li>this 的绑定\n<ul>\n<li>全局执行上下文 <code>this</code>  绑定为 window， 函数上下文 this 绑定为函数的调用者</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"变量环境variable-environment\"><a class=\"anchor\" href=\"#变量环境variable-environment\">#</a> 变量环境（Variable Environment）</h1>\n<p>变量环境本身就是一个词法环境，所以上文的东西它都有。</p>\n<h1 id=\"词法环境与变量环境的区别\"><a class=\"anchor\" href=\"#词法环境与变量环境的区别\">#</a> 词法环境与变量环境的区别</h1>\n<p>在<strong> ES6</strong> 中， <code>let</code>  和  <code>const</code>  声明的变量，他们的变量声明式存储在词法环境的。而 <code>var</code>  声明的变量是存储在变量环境的。</p>\n<h1 id=\"执行上下文创建与执行过程发生了什么\"><a class=\"anchor\" href=\"#执行上下文创建与执行过程发生了什么\">#</a> 执行上下文创建与执行过程发生了什么</h1>\n<ul>\n<li>创建过程\n<ul>\n<li>创建词法环境\n<ul>\n<li>环境记录器开始保存 <code>let</code>  和 <code>const</code>  声明的变量的声明，以及函数的声明， 如果是函数上下文的话，还会保存一个 <code>arrguments</code>  参数对象。</li>\n<li>外部环境的引用开始保存外部环境，以便于进行作用域链查找</li>\n<li>开始进行 this 的绑定，如果是全局执行上下文，则让 this 绑定 window 对象，如果是函数执行上下文，则让 this 绑定函数的调用者。</li>\n</ul>\n</li>\n<li>创建变量环境\n<ul>\n<li>环境记录器开始保存 <code>var</code>  声明的变量</li>\n<li>外部环境的引用开始保存外部环境，以便进行作用域链查找</li>\n<li>同上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>执行过程<br />\n完成变量的赋值</li>\n</ul>\n<p>下面是一个例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> e <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建阶段，全局执行上下文中词法环境与变量环境的情况</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GlobalExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">LexicalEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> uninitialized <span class=\"token operator\">></span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> uninitialized <span class=\"token operator\">></span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token literal-property property\">multiply</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> func <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> Global Object <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token literal-property property\">VariableEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> Global Object <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行阶段，全局执行上下文中词法环境与变量环境的情况</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GlobalExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">LexicalEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">multiply</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> func <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Global Object<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token literal-property property\">VariableEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Global Object<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当调用 <code> multiply</code>  时，将会创建一个函数执行上下文</p>\n<p>创建阶段，函数执行上下文中词法环境和变量环境的情况</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FunctionExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">LexicalEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">Arguments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token literal-property property\">VariableEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">g</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行阶段，函数执行上下文中词法环境和变量环境的情况</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FunctionExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">LexicalEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">Arguments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token literal-property property\">VariableEnvironment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">EnvironmentRecord</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token literal-property property\">Type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// Identifier bindings go here</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">g</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token literal-property property\">outer</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token literal-property property\">ThisBinding</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "JS高级",
                "执行上下文"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/jslnherit/",
            "url": "https://zimu-66ccff.github.io/jslnherit/",
            "title": "JS继承",
            "date_published": "2023-02-16T13:12:22.000Z",
            "content_html": "<h1 id=\"js-继承的实现方式\"><a class=\"anchor\" href=\"#js-继承的实现方式\">#</a> JS 继承的实现方式</h1>\n<ol>\n<li>\n<p>原型链式继承<br />\n第一种是以原型链的方式来实现继承，<strong>也就是把子类的原型赋值为父类的原型</strong>。但是这种实现方式存在的缺点是，<em>在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱</em>。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n</li>\n<li>\n<p>盗用构造函数式继承<br />\n第二种方式是使用借用构造函数的方式，也<strong>就是在子类中调用父类的构造函数，通过 <code>call</code>  方法将 <code>this</code>  指向子类实列</strong>。这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，<em>但是它存在的一个问题就是无法实现函数方法的复用，并且在类型原型定义的方法子类型也没有办法访问到。</em></p>\n</li>\n<li>\n<p>组合式继承<br />\n第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。<strong>通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承</strong>。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以<em>调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</em></p>\n</li>\n<li>\n<p>原型式继承<br />\n第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，<strong>实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象</strong>。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create () 方法就是原型式继承的实现。<em>缺点与原型链方式相同。</em></p>\n</li>\n<li>\n<p>寄生式继承<br />\n第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，<strong>通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象</strong>。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。<em>缺点是没有办法实现函数的复用。</em></p>\n</li>\n<li>\n<p>寄生组合式继承<br />\n第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。<strong>寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性</strong>。<br />\n<img data-src=\"https://i.328888.xyz/2023/02/16/pt8g3.png\" alt=\"寄生组合式继承\" /></p>\n</li>\n</ol>\n<pre><code>\n</code></pre>\n",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "JS高级",
                "继承"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/promiseWrite/",
            "url": "https://zimu-66ccff.github.io/promiseWrite/",
            "title": "手写Promise及其相关方法",
            "date_published": "2023-02-16T08:02:20.000Z",
            "content_html": "<h1 id=\"手写-promise\"><a class=\"anchor\" href=\"#手写-promise\">#</a> 手写 promise</h1>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILL</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">REJECT</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">myPromise</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/* 初始化 promise pending 状态 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/* 记录当前 promise 兑现值和拒因 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      记录当前 promise 的 fulfilled 与 rejected 回调</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      使用数组是因为一个 promise 可以接受多次 then,catch 回调，否则只需各存储一个函数即可</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulFilledFns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedFns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        此处存在两次判断 promise 状态，分别是执行 executor 和执行微任务时</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        保证 promise 状态一经确定不再改变</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/* resolve 方法处理 promise 和 thenable 特殊参数 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">myPromise</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/* 使用微任务 API，加入到微任务栈中 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">/* 执行 fulfilled 回调 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulFilledFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>              <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> reason<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>              <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">/* 此处捕获 executor 执行中抛出的错误，若存在错误则 promise 变成拒绝状态 */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulFilledFn<span class=\"token punctuation\">,</span> onRejectedFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/* 根据 Promise A + 标准，若回调不为函数类型则忽视，默认值回调会将状态继续传入下一个 promise 中 */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    onFulFilledFn <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token keyword\">typeof</span> onFulFilledFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onFulFilledFn</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    onRejectedFn <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token keyword\">typeof</span> onRejectedFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejectedFn</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">/* then 方法返回值是一个新 promise */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token comment\">/* 若捕获当前 promise 已经改变状态，则直接调用回调 */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">FULFILL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">/* 捕获 fulfilled 回调错误，捕获到则改变新 promise 状态为拒绝状态 */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>          <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onFulFilledFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          <span class=\"token comment\">/* 返回值传递给下一个 fulfilled 回调 */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">REJECT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>          <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onRejectedFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>          <span class=\"token comment\">/* 返回值传递给下一个 fulfilled 回调 */</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token comment\">/* 若当前 promise 没改变状态 / 改变状态的异步还未执行，先储存回调 */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulFilledFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onFulFilledFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">onRejectedFn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>onRejectedFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">/* catch 方法类似 then 方法的语法糖 */</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> onRejectedFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>onFinallyFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token comment\">/* finally 无任何影响，仅单独调用，且无任何参数 */</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token function\">onFinallyFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token function\">onFinallyFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"构造函数-constructor-讲解\"><a class=\"anchor\" href=\"#构造函数-constructor-讲解\">#</a> 构造函数 constructor 讲解</h2>\n<ul>\n<li>\n<p>初始化相关属性</p>\n<ol>\n<li>\n<p>初始化状态 status</p>\n<ul>\n<li><code>this.status = PENDING</code>  将状态初始化为 <code>PENDING</code></li>\n</ul>\n</li>\n<li>\n<p>保存 promise 成功时的要传递的值 value 和失败时的原因 reason</p>\n<ul>\n<li><code>this.value = undefined</code> ,  <code>this.reason = undefind</code>  初始化 <code>value</code>  and  <code>reason</code>  用来保存成功时要传递的值，和失败时要传递的原因</li>\n</ul>\n</li>\n<li>\n<p>设计 onFullfilledFns, onRejectedFns 两个数组</p>\n<ul>\n<li><code>this.onFullfilledFns = []</code> ,  <code>this,onRejectedFns = []</code> ，初始化 <code>onFullfilledFns</code> , <code>onRejectedFns</code>  来存储成功时和失败时要触发的 <code>callback</code> 。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>设计 resolve 函数</p>\n<ol>\n<li>\n<p>判断当前 promise 的状态</p>\n<ul>\n<li><code>if (this.status === PENDING)</code>  判断当前 promise 的状态是否为 <code>PENDING</code></li>\n<li>是的话，则进行接下来的操做</li>\n<li>不是的话，则什么都不做（因为 promise 的状态一旦确定就不能再更改。）</li>\n</ul>\n</li>\n<li>\n<p>判断 value 是否为 promise or thenabale</p>\n<ul>\n<li><code>if (value instanceof myPromise || typeof value.then === 'function')</code>  判断 value 是否为 promise or thenable。</li>\n<li>是的话， <code>return value.then(resolve, reject)</code>  则调用 value 的 <code>then</code>  方法并将 <code>resolve</code>  和 <code>reject</code>  作为参数传递， 并结束 resolve 函数的调用，不再进行接下来的操作。这样当 value 的状态发生改变时就会触发 <code>resolve</code>  or  <code>reject</code>  来修改现在这个 promise 的状态。（因为当 <code>resolve</code>  的 <code>value</code>  为 promise or thenable 的时候，当前 promise 的状态将随 value 的状态改变而改变，并保持一致）。</li>\n<li>不是的话，则进行接下来的操作</li>\n</ul>\n</li>\n<li>\n<p>将 promise 状态的更改，以及 promise 状态更改时要触发的响应的回调函数的触发操作，放进微任务里面</p>\n<ul>\n<li>调用 <code>queueMicrotask()</code>  将接下来的操作注册为微任务放进微任务队列</li>\n<li><code>this.status === PENDING</code>  判断当前 promise 的状态是否为 PENDING，是的话进行接下来的操作，不是的话，则不做接下来的操作（这样做也是为了保证 promise 的状态一旦确定就不再改变）</li>\n<li><code>this.status = FULLFILL</code> ,  <code>this.value = value</code> , 将 promise 的状态修改为成功，并将成功的值 value 赋值给 promise.value。</li>\n<li><code>this.onFullfilledFns.forEach((fn) =&gt; fn(this.value))</code>  遍历 <code>onFullfilledFns</code> ，将其中存储的成功时的 <code>callback</code>  全部调用，并将 <code>this.value</code>  作为参数赋值</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>设计 rejeted 函数</p>\n<ol>\n<li>\n<p>判断当前 promise 的状态</p>\n<ul>\n<li><code>if (this.status === PENDING)</code>  判断当前 promise 的状态是否为 <code>PENDING</code></li>\n<li>是的话，则进行接下来的操作</li>\n<li>不是的话，则什么都不做（因为 promise 的状态一旦确定就不能再更改。）</li>\n</ul>\n</li>\n<li>\n<p>将 promise 状态的更改，以及 promise 状态更改时要触发的响应的回调函数的触发操作，放进微任务里面</p>\n<ul>\n<li>调用 <code>queueMicrotask()</code>  将接下来的操作注册为微任务放进微任务队列</li>\n<li><code>this.status === PENDING</code>  判断当前 promise 的状态是否为 PENDING，是的话进行接下来的操作，不是的话，则不做接下来的操作（这样做也是为了保证 promise 的状态一旦确定就不再改变）</li>\n<li><code>this.status = REJECT</code> ,  <code>this.reason = reason</code> , 将 promise 的状态修改为失败，并将成功的值 reason 赋值给 promise.reason。</li>\n<li><code>this.onRejectedFns.forEach((fn) =&gt; fn(this.reason))</code>  遍历 <code>onRejectedFns</code> ，将其中存储的成功时的 <code>callback</code>  全部调用，并将 <code>this.reason</code>  作为参数赋值</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>以 try-catch 的形式调用传递来的 executor 函数，并捕获错误</p>\n<ol>\n<li>在 try 里面调用 <code>executor</code> ，并将 <code>resolve</code>  和 <code>reject</code>  作为参数传递</li>\n<li>在 catch 里面捕获错误，一点捕获到错误，立刻调用 <code>reject</code>  (这样做是因为 executor 执行器函数在执行的时候，一旦发生错误，promise 的状态将马上变成失败)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"then-方法讲解\"><a class=\"anchor\" href=\"#then-方法讲解\">#</a> then 方法讲解</h2>\n<ol>\n<li>判断 onFullfilledFn, onRejectedFn 类型</li>\n</ol>\n<ul>\n<li><code>onFullfilledFn = typeof onFullfilled === 'function ? onFullfilled : (res) =&gt; res</code>  判断 <code>onFullfilledFn</code>  是否为一个函数，当不为函数时，则默认将其赋值为 (res) =&gt; res (这样做时因为根据 Promise A + 标准，若回调不为函数类型则忽视，默认值回调会将状态继续传入下一个 promise 中)。</li>\n<li><code>onRejectedFn</code>  的处理同上</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>new 一个 promise 返回，并在 executor 中做如下操作</p>\n</li>\n<li>\n<p>判断调用 then 方法的 promise 状态</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>状态为 <code>FULLFILL</code>  时</p>\n<ol>\n<li>将接下来的操作放到 try-catch 中</li>\n<li>在 try 中调用 <code>onFullfilledFn</code>  并将调用 <code>then</code>  方法的 promise 的 <code>value</code>  作为参数传递，将返回值赋值给 <code>result</code> ， 调用 <code>resolve</code>  并将 <code>result</code>  作为参数传递，来修改要返回的 promise 的状态。</li>\n<li>在 catch 中捕获错误，一旦捕获到错误，马上调用 <code>reject</code>  将要返回的 promise 修改为失败（之所以这样做是因为 onFullfilledFn, onRejectedFn 执行中发生了错误，则会立即返回一个错误的 promise）</li>\n</ol>\n</li>\n<li>\n<p>状态为 <code>REJECT</code>  时</p>\n<ol>\n<li>将接下来的操作放到 try-catch 中</li>\n<li>在 try 中调用 <code>onRejectedFn</code>  并将调用 <code>then</code>  方法的 promise 的 <code>reason</code>  作为参数传递，将返回值赋值给 <code>result</code> ， 调用 <code>resolve</code>  并将 <code>result</code>  作为参数传递，来修改要返回的 promise 的状态。</li>\n<li>在 catch 中捕获错误，一旦捕获到错误，马上调用 <code>reject</code>  将要返回的 promise 修改为失败（之所以这样做是因为 onFullfilledFn, onRejectedFn 执行中发生了错误，则会立即返回一个错误的 promise）</li>\n</ol>\n</li>\n<li>\n<p>状态为 <code>PENDING</code>  时<br />\n将 <code>FULLFILL</code> ,  <code>REJECT</code>  时要进行的操作，分别封装到两个箭头函数里面（必须用箭头函数，这样 <code>this</code>  才能指向调用 <code>then</code>  方法的 promise），在分别添加到调用 <code>then</code>  方法的 promise 的 <code>onFullfilledFns</code>  and  <code>onRejectedFns</code>  中。</p>\n</li>\n</ul>\n<h1 id=\"手写-promiseall-方法\"><a class=\"anchor\" href=\"#手写-promiseall-方法\">#</a> 手写 Promise.all 方法</h1>\n<h2 id=\"完整代码-2\"><a class=\"anchor\" href=\"#完整代码-2\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">PromiseAll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 没有传入参数 or 传入的参数内部没有迭代器的时候会返回一个错误的 promise</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> promises<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'argument is not iterator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将迭代器对象转化为数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>promises<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 处理空数组的情况</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> resolvedCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> promiseNum <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 判断数组元素是否为 promise</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>promise <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      promise</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          resolvedCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedCount <span class=\"token operator\">===</span> promiseNum<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"promiseall-方法实现讲解\"><a class=\"anchor\" href=\"#promiseall-方法实现讲解\">#</a> Promise.all 方法实现讲解</h2>\n<ul>\n<li>返回一个 promise, 在 executor 里进行接下来的操作</li>\n<li>判断传递的参数 <code>promises</code>  是否可迭代，参数是否为空\n<ul>\n<li><code>if (promises == null || typeof promises[Symbol.iterator] !== 'function')</code>  进行判断</li>\n<li>如果参数为空 or 参数不能迭代，则调用抛出一个错误，让返回的 promise 状态变为失败</li>\n<li>如果有参数并且可以迭代，则进行接下来的操作</li>\n</ul>\n</li>\n<li>将可迭代的参数转换为数组\n<ul>\n<li><code>promises = [...promises]</code></li>\n</ul>\n</li>\n<li>判断转换为数组后的参数是否为空，并进行相关操作\n<ul>\n<li>如果数组为空，则调用 <code>resolve</code>  将一个空数组作为参数传递，让返回的 promise 状态变为成功</li>\n<li>如果数组不为空，则进行接下来的接下来的操作</li>\n</ul>\n</li>\n<li>初始化相关变量\n<ul>\n<li><code>promisesNum = promises.length</code>  保存参数数组元素的数量</li>\n<li><code>resolvedCount = 0</code>  保存已经处理过的 promise 的数量</li>\n<li><code>values = []</code>  保存处理过的 promise 的 <code>value</code></li>\n</ul>\n</li>\n<li>遍历参数数组，并进行相关处理\n<ul>\n<li>判断数组元素是否为 promise\n<ul>\n<li>不是 promise 则调用 <code>Promise.resolve()</code>  将其转换为 promise</li>\n<li>是 promise，则直接进行接下来的操作</li>\n</ul>\n</li>\n<li>对已经是 promise 的数组元素调用 <code>then</code>  方法\n<ul>\n<li>调用 <code>then</code>  方法，传递 promise 成功时的 <code>callback</code> ，在 <code>callback</code>  里面将参数 <code>res</code>  存储进 <code>values</code> ，并且 <code>resolvedCount++</code>  计数器加一， <code>resolvedCount === promiseNum</code>  判断已经处理过的数组元素的数量和数组的元素的数量，是否相等，相等时则直接调用 <code>resolve(values)</code> ，将返回的 promise 的状态改为成功</li>\n</ul>\n</li>\n<li>对已经时 promise 的数组元素调用 <code>catch</code>  方法捕获错误\n<ul>\n<li>一旦捕获到错误，直接调用 <code>reject(err)</code> ，将返回的 promise 的状态改为失败</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"手写-promiseany-方法\"><a class=\"anchor\" href=\"#手写-promiseany-方法\">#</a> 手写 Promise.any 方法</h1>\n<h2 id=\"完整代码-3\"><a class=\"anchor\" href=\"#完整代码-3\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">PromiseAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> promises<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrgument is not iterator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>promises<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> rejectedCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> promiseNum <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> errs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>promise <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      promise</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          errs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          rejectedCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rejectedCount <span class=\"token operator\">===</span> promiseNum<span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>errs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"手写-promiserace-方法\"><a class=\"anchor\" href=\"#手写-promiserace-方法\">#</a> 手写 Promise.race 方法</h1>\n<h2 id=\"完整代码-4\"><a class=\"anchor\" href=\"#完整代码-4\">#</a> 完整代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">promiseRace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> promises<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrgument is not iterator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>promises<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>promise <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      promise</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "JS高级",
                "Promise"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/eventLoop/",
            "url": "https://zimu-66ccff.github.io/eventLoop/",
            "title": "理解事件循环",
            "date_published": "2023-02-16T02:20:17.000Z",
            "content_html": "<h1 id=\"浏览器中的事件循环\"><a class=\"anchor\" href=\"#浏览器中的事件循环\">#</a> 浏览器中的事件循环</h1>\n<h2 id=\"同步与异步\"><a class=\"anchor\" href=\"#同步与异步\">#</a> 同步与异步</h2>\n<p>浏览器是<strong>单线程</strong>的，所以为了不堵塞代码的运行，我们将任务分为了<strong>同步任务</strong>，和<strong>异步任务</strong>（ <code>setTimeout</code>  和 <code>setInterval</code> 、 <code>axios</code> 、事件绑定等这种带回调函数的），那么同步任务和异步任务又是按照怎样的顺序进入主线程执行的呢，废话不多说，直接上图好叭 😎<br />\n<img data-src=\"https://i.328888.xyz/2023/02/16/mJuAZ.png\" alt=\"事件循环\" /></p>\n<p>先看一段代码，我们会结合这张图和代码来先简单认识一下同步和异步的执行</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mKZNF.png\" alt=\"演示代码\" /><br />\n执行的结果很简单 start -&gt; end -&gt; 时间到了</p>\n<ol>\n<li>整个  <code>script</code>  代码进入主线程，遇到<strong>同步任务</strong>  <code>start</code>  的打印，执行打印</li>\n<li>遇到<strong>异步任务</strong>  <code>setTimeout</code> ，将 setTimeout 放到 <strong>Event Table</strong> 开始计时（注：setTimeout 回调函数被调用的前提是时间到了，所以是在 <strong>Event Table</strong> 中等待计时结束，如果是其他的回调，例如 on 绑定的事件，则是在 Table 中等待事件被触发）</li>\n<li>遇到<strong>同步任务</strong>  <code>end</code>  的打印，执行打印，同步任务执行完毕，<strong>monitoring process</strong> 进程检测到主线程为空，开始去 <strong>Event Queue</strong> 那里检查是否有等待被调用的函数</li>\n<li>setTimeout 的计时结束，将其放到 <strong>Event Queue</strong> 中（<strong>monitoring process</strong> 进程检测到 <strong>Event Queue</strong> 存在等待被调用的函数，就将 setTimeout 的回调函数放进主线程执行）</li>\n</ol>\n<p>是不是觉得还是很简单的，那么我们现在开始上难度，将异步任务细分为<strong>宏任务</strong>和<strong>微任务</strong>，进一步认识事件循环</p>\n<h2 id=\"宏任务微任务\"><a class=\"anchor\" href=\"#宏任务微任务\">#</a> 宏任务，微任务</h2>\n<p><strong>异步任务</strong>可以细分为<strong>宏任务</strong>，<strong>微任务</strong></p>\n<p>宏任务（<em>task</em>）大概包括：</p>\n<ul>\n<li>script (整体代码)</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI render</li>\n</ul>\n<p>微任务（<em>jobs</em>）大概包括：</p>\n<ul>\n<li>process.nextTick</li>\n<li>Promise.then( )</li>\n<li>Async/Await (实际就是 promise)</li>\n<li>MutationObserver (html5 新特性)</li>\n</ul>\n<h2 id=\"简述事件循环\"><a class=\"anchor\" href=\"#简述事件循环\">#</a> 简述事件循环：</h2>\n<p>执行<strong>宏任务</strong>，然后执行该<strong>宏任务产生的微任务</strong>，若<strong>微任务在执行过程中产生了新的微任务</strong>，则<strong>继续执行微任务</strong>，微任务执行完毕后，<strong>再回到宏任务</strong>中进行下一轮循环。</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mKIJw.png\" alt=\"事件循环\" /></p>\n<p>光这样大家可能不会很理解，那么我们上例子，结合例子来分析讲解</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mK7Xy.png\" alt=\"代码实列\" /></p>\n<p>第一轮事件循环分析如下：</p>\n<ul>\n<li>整体 <code>script</code>  代码作为第一个宏任务进入主线程，遇到同步任务 <code>console.log</code> ，输出 1。</li>\n<li>遇到宏任务 <code>setTimeout</code> ，其回调函数被分发到<strong>宏任务 Event Queue</strong> 中（注：setTimeout 是先被放到<strong> Event Table</strong> 中进行计时的，等到时间到了，其回调函数才放到宏任务<strong> Event Queue</strong> 中，并不是直接就放到宏任务<strong> Event Queue</strong>）。我们暂且记为<em> setTimeout1</em>。</li>\n<li>遇到微任务 <code>process.nextTick()</code> ，其回调函数被分发到<strong>微任务 Event Queue</strong> 中。我们记为<em> process1</em>。</li>\n<li>遇到 Promise，new Promise 里面的参数函数作为<strong>同步任务</strong>直接执行，输出 7。then 里面的回调函数作为微任务被分发到<strong>微任务 Event Queue 中</strong>。我们记为<em> then1</em>。</li>\n<li>又遇到了宏任务 <code>setTimeout</code> ，其回调函数被分发到<strong>宏任务 Event Queue</strong> 中，我们记为<em> setTimeout2</em>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务 Event Queue</th>\n<th>微任务 Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout1</td>\n<td>process1</td>\n</tr>\n<tr>\n<td>setTimeout2</td>\n<td>then1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是第一轮事件循环宏任务结束时各 Event Queue 的情况，此时已经输出了 1 和 7。</li>\n</ul>\n<p><strong>第一轮宏任务结束</strong>后，开始处理产生的<strong>微任务</strong></p>\n<ul>\n<li>执行 process1, 输出 6。</li>\n<li>执行 then1，输出 8。</li>\n</ul>\n<hr />\n<p><strong>第一轮事件循环正式结束</strong>，接着开始<strong>第二轮</strong>，从<strong>宏任务 Event Queue</strong> 中取出<strong>宏任务 setTimeout1</strong> 开始处理：</p>\n<ul>\n<li>首先执行同步任务输出 2。接下来遇到了微任务 <code>process.nextTick()</code> ，同样将其分发到<strong>微任务 Event Queue</strong> 中，记为<em> process2</em>。</li>\n<li><code>new Promise</code>  参数里的参数函数作为<strong>同步任务</strong>立即执行输出 4，<strong>微任务</strong> <code>then</code>  也分发到<strong>微任务 Event Queue</strong> 中，记为<em> then2</em></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务 Event Queue</th>\n<th>微任务 Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setTimeout2</td>\n<td>process2</td>\n</tr>\n<tr>\n<td></td>\n<td>then2</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是第二轮事件循环宏任务结束时各 Event Queue 的情况，此时已经输出了 2 和 4</li>\n</ul>\n<p><strong>第二轮宏任务结束</strong>，开始处理产生的<strong>微任务</strong>：</p>\n<ul>\n<li>执行 process2, 输出 3。</li>\n<li>执行 then2，输出 5。</li>\n</ul>\n<hr />\n<p><strong>第二轮事件循环正式结束</strong>，接着开始<strong>第三轮</strong>，从<strong>宏任务 Event Queue</strong> 中取出宏任务 <code>setTimeout2</code>  开始处理：</p>\n<ul>\n<li>首先执行同步任务输出 9。接下来遇到了微任务 <code>process.nextTick()</code> ，同样将其分发到<strong>微任务 Event Queue</strong> 中，记为<em> process3</em>。</li>\n<li><code>new Promise</code>  参数里的参数函数作为同步任务立即执行输出 11，微任务 <code>then</code>  也分发到<strong>微任务 Event Queue</strong> 中，记为<em> then3</em></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务 Event Queue</th>\n<th>微任务 Event Queue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>process3</td>\n</tr>\n<tr>\n<td></td>\n<td>then3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>上表是<strong>第三轮事件循环宏任务结束</strong>时各 Event Queue 的情况，此时已经输出了 9 和 11。</li>\n</ul>\n<p><strong>第三轮宏任务结束</strong>，开始处理产生的<strong>微任务</strong>：</p>\n<ul>\n<li>执行 process3, 输出 10。</li>\n<li>执行 then3，输出 12。</li>\n</ul>\n<p>第三次事件循环结束，整个事件循环结束，共经历了三次循环，完整的输出为 1，7，6，8，2，4，3，5，9，11，10，12</p>\n<h2 id=\"asyncawait-执行顺序\"><a class=\"anchor\" href=\"#asyncawait-执行顺序\">#</a> async/await 执行顺序</h2>\n<p>首先我们来看一段代码：<br />\n<img data-src=\"https://i.328888.xyz/2023/02/16/mMF2Q.png\" alt=\"代码实列\" /></p>\n<p>输出结果为：script start =&gt; async2 end =&gt; Promise =&gt; script end =&gt; async1 end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</p>\n<p>如果 await 后面直接跟的为一个<strong>变量</strong>，比如：await 1；这种情况的话相当于<strong>直接把 await 后面的代码注册为一个微任务</strong>，可以简单理解为 <strong>promise.then (await 下面的代码)</strong>。然后跳出 async1 函数，执行其他代码，当遇到 promise 函数的时候，会注册 promise.then () 函数到微任务队列，注意此时微任务队列里面已经存在 await 后面的微任务。所以这种情况会先执行 await 后面的代码（async1 end），再执行 async1 函数后面注册的微任务代码 (promise1,promise2)。</p>\n<p>我们再来看另外一段代码：</p>\n<p><img data-src=\"https://i.328888.xyz/2023/02/16/mMSpX.png\" alt=\"代码实列\" /></p>\n<p>输出结果为： script start =&gt; async2 end =&gt; Promise =&gt; script end =&gt; async2 end1 =&gt; promise1 =&gt; promise2 =&gt; async1 end =&gt; setTimeout</p>\n<p>如果 await 后面跟的为<strong>一个异步函数的调用</strong>，此时执行完 await<strong> 并不先把 await 后面的代码放到微任务队列中去，而是执行完 await 之后，直接跳出 async1 函数，执行其他代码</strong>。然后遇到 promise 的时候，把 promise.then 注册为微任务。<strong>其他代码执行完毕后，需要回到 async1 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中</strong>，注意此时微任务队列中是有之前注册的微任务的。所以这种情况会先执行 async1 函数之外的微任务 (promise1,promise2)，然后才执行 async1 内注册的微任务 (async1 end). <strong>可以理解为，这种情况下，await 后面的代码会在本轮循环的最后被执行。</strong></p>\n<p>总的来说：如果 await 后面是一个变量，则直接把 await 后面的代码放到微任务队列里面。如果后面为一个异步函数的调用，则等到本轮循环中宏任务执行完毕后再把 await 后面的代码放到微任务队列，也就是说这个时候 await 后面的代码时是本轮循环中的微任务队列中的最后一个微任务，会在本轮循环的最后被执行。</p>\n",
            "tags": [
                "笔记",
                "前端",
                "JavaScript",
                "前端",
                "JS高级",
                "浏览器",
                "事件循环"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/reactivity-effect/",
            "url": "https://zimu-66ccff.github.io/reactivity-effect/",
            "title": "Vue响应式模块-reactivity-effect",
            "date_published": "2023-02-14T05:57:48.000Z",
            "content_html": "<h1 id=\"effect-方法剖析与实现\"><a class=\"anchor\" href=\"#effect-方法剖析与实现\">#</a> effect 方法剖析与实现</h1>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">EffectFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  deps<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  scheduler<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> EffectFn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  lazy<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> activeEffect<span class=\"token operator\">:</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> effectStarck<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> targetMap<span class=\"token operator\">:</span> WeakMap<span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  object<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> effectFn<span class=\"token operator\">:</span> <span class=\"token function-variable function\">EffectFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">clearUp</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    activeEffect <span class=\"token operator\">=</span> effectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    effectStarck<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    effectStarck<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    activeEffect <span class=\"token operator\">=</span> effectStarck<span class=\"token punctuation\">[</span>effectStarck<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  effectFn<span class=\"token punctuation\">.</span>deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  effectFn<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">.</span>options<span class=\"token operator\">?.</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> effectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token function\">effectFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">clearUp</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> EffectFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  fn<span class=\"token punctuation\">.</span>deps<span class=\"token operator\">?.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    deps<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"effect-概述\"><a class=\"anchor\" href=\"#effect-概述\">#</a> effect 概述</h2>\n<p><code>effect</code>  是一个用来注册副作用的函数，它默认会将注册的副作用立即执行一次，并支持传递一个选项参数 <code>options</code> ，可以配置是否立即执行，将副作用函数返回以便于手动执行 and 配置调度器 <code>scheduler</code></p>\n<h2 id=\"部分变量属性方法介绍\"><a class=\"anchor\" href=\"#部分变量属性方法介绍\">#</a> 部分变量，属性，方法介绍</h2>\n<ul>\n<li><strong> <code>activeEffect</code> </strong> : 用来存储当前的副作用函数</li>\n<li><strong> <code>effectStrack</code> </strong> : 因为 <code>effect</code>  可能会嵌套  <code>effect</code>  ，所以需要用 <code>effectStrack</code>  来存储这些嵌套的<strong>副作用函数</strong>，当内层的 <code>effect</code>  执行完毕后，将<strong>内层的副作用函数</strong>弹出，将<strong>外层的副作用函数</strong>赋值给用来存储<strong>当前的副作用函数</strong>的 <code>activeEffect</code> 。</li>\n<li><strong> <code>targetMap</code> </strong>: 一种 <code>WeakMap</code>  结构，用来存储 <code>target</code> ,  <code>key</code> , <strong>副作用</strong>之间的对应关系。<br />\n<img data-src=\"https://i.328888.xyz/2023/02/14/mVXrd.png\" alt=\"关系图\" /></li>\n<li><strong> <code>effectFn.deps</code> </strong>: 类型为 <code>Array&lt;Set&gt;</code> ，用来存储保存的有该副作用的 <code>target</code>  对应的 <code>key</code>  对应的 <code>Set</code> , 以便于在副作用函数<strong>再次执行</strong>的时候调用的 <code>clearUp</code>  方法来将 <code>effectFn</code>  从这些 <code>Set</code>  中移除。</li>\n<li><strong> <code>clearUp</code> </strong> : 利用 <code>effectFn.deps</code>  将 <code>effectFn</code>  从其所在的 <code>Set</code>  中移除。</li>\n</ul>\n<h2 id=\"详细步骤\"><a class=\"anchor\" href=\"#详细步骤\">#</a> 详细步骤</h2>\n<ul>\n<li>定义 <code>effectFn</code>  增强版副作用函数，以便于增强它，并做进一步处理\n<ul>\n<li><code>effectFn</code>  函数将做的事情\n<ol>\n<li>调用 <code>clearUp</code>  来将 <code>effectFn</code>  从其所在的 <code>Set</code>  中移除，从而避免 <code>trigger</code>  触发没必要的副作用函数。</li>\n<li>将 <code>effectFn</code>  赋值给 <code>activeEffect</code> , 并将 <code>effectFn</code>  放进 <code>effectStack</code> 。</li>\n<li>调用 <code>fn</code>  副作用函数，将返回值保存进 <code>res</code> 。</li>\n<li>将 <code>effectFn</code>  从 <code>activeEffect</code>  中弹出，并将 <code>activeEffect</code>  的最后一个元素赋值给 <code>activeEffect</code> （让 <code>activeEffect</code>  指向外层的副作用函数）</li>\n<li>返回 <code>res</code></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>在 <code>effectFn</code>  函数上添加属性，增强它\n<ul>\n<li>在 <code>effectFn</code>  上添加 <code>deps</code>  属性，用来存储保存有该副作用函数的 <code>target</code>  对应的 <code>key</code>  的对应的 <code>Set</code> , 以提供给 <code>clearUp</code>  函数使用。</li>\n<li>在 <code>effectFn</code>  函数上添加 <code>options</code>  属性，保存副作用函数的配置选项。</li>\n</ul>\n</li>\n<li>根据 <code>effectFn</code>  函数的配置选项 <code>options</code>  属性，来进行下一步的操作\n<ul>\n<li>如果 <code>effectFn.options.lazy</code>  为 <code>true</code> ，则不立即执行 <code>effectFn</code> , 而是将 <code>effectFn</code>  返回，手动调用。</li>\n<li>如果为 <code>false</code> ， 则立即执行。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"track-方法剖析与实现\"><a class=\"anchor\" href=\"#track-方法剖析与实现\">#</a> track 方法剖析与实现</h1>\n<h2 id=\"完整代码-2\"><a class=\"anchor\" href=\"#完整代码-2\">#</a> 完整代码</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>activeEffect<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>depsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> deps <span class=\"token operator\">=</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>deps<span class=\"token punctuation\">)</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>deps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  deps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  activeEffect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"track-概述\"><a class=\"anchor\" href=\"#track-概述\">#</a> track 概述</h2>\n<p>用来收集副作用，将副作用存储进对应的 <code>target</code>  对应的 <code>key</code>  对应的 <code>Set</code> 。</p>\n<h2 id=\"详细步骤-2\"><a class=\"anchor\" href=\"#详细步骤-2\">#</a> 详细步骤</h2>\n<ul>\n<li>边界处理\n<ul>\n<li>如果 <code>activeEffect == undefined</code> ，则直接返回</li>\n</ul>\n</li>\n<li>将副作用函数存储进对应的 <code>Set</code>\n<ol>\n<li>调用 <code>targetMap.get(target)</code>  取出 <code>target</code>  对应的 <code>Map</code> （里面存储的是 <code>key</code>  和对应的 <code>Set</code> ）并赋值给 <code>depsMap</code> 。如果 <code>depsMao</code>  为空，则调用 <code>targetMap.set(target, (depsMap = new Map))</code>  新建一个 <code>Map</code>  存进 <code>targetMap</code> 。</li>\n<li>调用 <code>depsMap.get(key)</code>  取出 <code>key</code>  对应的 <code>Set</code>  (里面存储的是 <code>key</code>  对应的副作用函数) 并赋值给 <code>deps</code> 。如果 <code>deps</code>  不存在，则调用 <code>depsMap.set(key, (deps = new Set()))</code>  新建一个 <code>Set</code>  存进 <code>depsMap</code> 。</li>\n<li>调用 <code>deps.add(activeEffect)</code>  将副作用函数存储进 <code>Set</code> .</li>\n</ol>\n</li>\n<li>将存有该副作用函数的 <code>Set</code>  存储进 <code>activeEffect.deps</code></li>\n</ul>\n<h1 id=\"trigger-方法剖析与实现\"><a class=\"anchor\" href=\"#trigger-方法剖析与实现\">#</a> trigger 方法剖析与实现</h1>\n<h2 id=\"完整代码-3\"><a class=\"anchor\" href=\"#完整代码-3\">#</a> 完整代码</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> effects <span class=\"token operator\">=</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>effects<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> effectsToRun<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>EffectFn<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  effects<span class=\"token operator\">?.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectFn <span class=\"token operator\">!==</span> activeEffect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      effectsToRun<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>effectFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  effectsToRun<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>effectFnToRun<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectFnToRun<span class=\"token punctuation\">.</span>options<span class=\"token operator\">?.</span>scheduler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      effectFnToRun<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span>effectFnToRun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">effectFnToRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"trigger-概述\"><a class=\"anchor\" href=\"#trigger-概述\">#</a> trigger 概述</h2>\n<p>用来调用 <code>track</code>  收集的副作用，如果有调度器，则调用调度器。</p>\n<h3 id=\"详细步骤-3\"><a class=\"anchor\" href=\"#详细步骤-3\">#</a> 详细步骤</h3>\n<ul>\n<li>取出对应的 <code>target</code>  的对应的 <code>key</code>  的对应的 <code>Set</code> , 并做边界处理\n<ol>\n<li>调用 <code>targetMap.get(target)</code>  取出 <code>target</code>  对应的 <code>Map</code>  赋值给 <code>depsMap</code> 。如果 <code>depsMap</code>  不存在，则直接返回</li>\n<li>调用 <code>depsMap.get(key)</code>  取出 <code>key</code>  对应的 <code>Set</code>  并复制给 <code>effects</code> ，如果 <code>effects</code>  不存在，则直接返回。</li>\n</ol>\n</li>\n<li>定义一个 <code>effectsToRun</code> , 将 <code>effects</code>  存储的副作用函数全部添加到 <code>effectsToRun</code> , 以等待遍历 <code>effectsToRun</code>  执行存储的所有副作用函数。（之所以这么做是因为，副作用函数在执行的时候会先调用 <code>clearUp</code>  将其从 <code>Set</code>  中删除，执行 <code>fn</code>  的时候又会将 <code>effectFn</code>  添加到 <code>Set</code> , 这样就会陷入无限循环， 所以定义一个新的 <code>Set</code>  来避免这个问题）</li>\n<li>调用 <code>effectsToRun.forEach</code>  来遍历它，并调用存储的副作用函数，但是在调用前会做判断，如果 <code>effectToRun.options.scheduler</code>  存在的话，会调用 <code>effectToRun.options.sheduler</code>  而不是调用 <code>effectToRun</code></li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue响应式模块刨析",
                "effect"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/reactivity-computed/",
            "url": "https://zimu-66ccff.github.io/reactivity-computed/",
            "title": "Vue响应式模块-reactivity-computed",
            "date_published": "2023-02-14T02:21:11.000Z",
            "content_html": "<h1 id=\"文档描述\"><a class=\"anchor\" href=\"#文档描述\">#</a> 文档描述</h1>\n<p>接受一个 getter 函数，返回一个只读的响应式 ref 对象。该 ref 通过 .value 暴露 getter 函数的返回值。它也可以接受一个带有 get 和 set 函数的对象来创建一个可写的 ref 对象。<br />\n具有缓存机制，只有当依赖的响应式数据发生改变的时候才会重新计算，否则会直接读取缓存的值</p>\n<h1 id=\"实现思路\"><a class=\"anchor\" href=\"#实现思路\">#</a> 实现思路</h1>\n<ol>\n<li>computed 返回的是一个 <code>ref</code> ，所以我们需要一个类来进行 <code>get value</code> , <code>set value</code>  的操作</li>\n<li>当依赖的响应式数据发生改变时会重新计算，所以需要引入 <code>effect</code>  函数来注册依赖副作用，并进行依赖的收集和触发操作，收集的依赖就是 <code>getter</code></li>\n<li>computed 具有缓存机制，当依赖的响应式数据发生改变的时候才需要用 <code>getter</code>  重新计算来更新缓存的 value 值，没改变的时候直接用缓存的 value，所以需要一个 <code>isDirty</code>  标志变量，来标志是否需要重新计算</li>\n<li>当依赖的响应式数据改变时，修改 <code>isDirty</code>  标志变量，这里需要利用 <code>scheduler</code>  调度器，当响应式数据发生改变触发依赖的时候，不是直接执行收集的 <code>getter</code>  而是去修改 <code>isDirty</code> , 这样 computed 的 value 被取值的时候就知道需要重新计算更新缓存的 value 值。</li>\n</ol>\n<h1 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isFunction <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/index'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> effect<span class=\"token punctuation\">,</span> track<span class=\"token punctuation\">,</span> trigger <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> EffectFn <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">computedOptions</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function-variable function\">getter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token function-variable function\">setter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span>computedOptions<span class=\"token operator\">:</span> computedOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">setter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>computedOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    getter <span class=\"token operator\">=</span> computedOptions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function-variable function\">setter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Write operation failed: computed value is readonly'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    getter <span class=\"token operator\">=</span> computedOptions<span class=\"token punctuation\">.</span>getter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    setter <span class=\"token operator\">=</span> computedOptions<span class=\"token punctuation\">.</span>setter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">computedRefImpl</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">,</span> setter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">computedRefImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  _value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  _isDirty<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function-variable function\">_setter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  _effectFn<span class=\"token operator\">:</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">getter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">setter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isDirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_setter <span class=\"token operator\">=</span> setter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_effectFn <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token function-variable function\">scheduler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isDirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isDirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isDirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_effectFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isDirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setter</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"代码执行过程梳理\"><a class=\"anchor\" href=\"#代码执行过程梳理\">#</a> 代码执行过程梳理</h1>\n<ol>\n<li>判断传递进来的参数是不是 function，是的话则说明只传递了 getter，就把传递的函数赋值给 getter 变量，setter 变量则被赋值为一个警告，不能修改 computed 计算属性的 value 值。如果不是 function，则说明传递了一个配置对象，里面有 getter，也有 setter，就把 getter 赋值给 getter 变量，setter 赋值给 setter 变量，然后调用 <code>computedRefimpl</code>  实列化来返回 <code>Ref</code> , 实例化的过程中在 constructor 构造函数里，会利用 effect 来收集依赖 <code>getter</code></li>\n<li>当我们第一次的去读取计算属性的 value 值的时候，会执行 <code>get value</code>  方法，此时标志变量 <code>isDirty = true</code>  所以会调用 <code>getter</code>  函数来进行计算，计算完毕后则将标志变量 <code>isDirty</code>  再修改为 <code>false</code> 。然后将计算得来的值保存在 value 中进行缓存。计算的过程中会读取依赖的响应式变量，依赖 getter 也就顺利的被响应式变量收集。并且此时 computed 还会手动调用 <code>track</code>  函数进行依赖的收集，这个时候收集的依赖其实是用到了计算属性的地方</li>\n<li>当我们去修改计算属性依赖的响应式数据的时候，响应式数据收集的依赖 <code>getter</code>  函数就会触发，但是因为有 <code>scheduler</code>  调度器，所以执行的不是 <code>getter</code>  而是 <code>scheduler</code> ，将标志变量 <code>isDirty</code>  修改为 <code>true</code> ，并手动调用 <code>trigger</code>  函数来触发 computed 计算属性收集的依赖，也就是用到 computed 计算属性地方。</li>\n<li>在用到计算属性的地方就会去读取 computed 的 value 值，computed 就会发现 <code>isDirty</code>  为 <code>true</code> , 就会重新计算。</li>\n</ol>\n",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue响应式模块刨析",
                "computed"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/reactivity-reactive/",
            "url": "https://zimu-66ccff.github.io/reactivity-reactive/",
            "title": "Vue响应式模块-reactivity-reactive",
            "date_published": "2023-02-14T02:21:11.000Z",
            "content_html": "<h1 id=\"ractive-方法剖析与实现\"><a class=\"anchor\" href=\"#ractive-方法剖析与实现\">#</a> ractive 方法剖析与实现</h1>\n<h2 id=\"完整代码实现\"><a class=\"anchor\" href=\"#完整代码实现\">#</a> 完整代码实现</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isArray<span class=\"token punctuation\">,</span> isObject<span class=\"token punctuation\">,</span> hasChanged <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/index'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> effect<span class=\"token punctuation\">,</span> track<span class=\"token punctuation\">,</span> trigger <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reactiveMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> reactiveMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> reactiveProxy<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'_isReactive'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">const</span> oldLength <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span>oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            oldLength <span class=\"token operator\">!=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            key <span class=\"token operator\">!==</span> <span class=\"token string\">'length'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  reactiveMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> reactiveProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">return</span> reactiveProxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">&amp;&amp;</span> target<span class=\"token punctuation\">.</span>__isReactive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"边界处理对特殊情况的处理\"><a class=\"anchor\" href=\"#边界处理对特殊情况的处理\">#</a> 边界处理（对<strong>特殊情况</strong>的处理）</h2>\n<ul>\n<li><code>target</code>  的类型不为  <code>Object</code>  时：\n<ul>\n<li>利用 <code>isObject</code>  方法判断 <code>target</code>  的类型是否为 <code>Object</code></li>\n<li><code>isObject</code>  方法的返回值为 <code>false</code>  时，即 <code>target</code>  的类型不为 <code>Object</code> , 则直接返回 <code>target</code> , 不做接下来的响应式处理</li>\n</ul>\n</li>\n<li><code>target</code> <strong> 本身</strong>已经为一个<strong>响应式代理</strong>时:\n<ul>\n<li>利用 <code>isRective</code>  方法判断 <code>target</code>  是否为<strong>响应式代理</strong></li>\n<li><code>isReactive</code>  方法的返回值为 <code>true</code>  时， 即 <code>target</code>  已经为一个<strong>响应式代理</strong>，则直接返回 <code>target</code> ，不再做接下来的处理</li>\n</ul>\n</li>\n<li><code>target</code>  已经<strong>被做过响应式代理</strong>时:\n<ul>\n<li>利用 <code>reactiveMap.has(target)</code>  方法来判断 <code>target</code>  是否已经被做过<strong>响应式代理</strong></li>\n<li><code>reactiveMap.has(target)</code>  方法返回值为 <code>true</code>  时， 即 <code>target</code>  已经被做过<strong>响应式代理</strong>，则直接调用 <code>reactiveMap.get(targey)</code>  方法返回<strong>它的响应值代理</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"响应式处理\"><a class=\"anchor\" href=\"#响应式处理\">#</a> 响应式处理</h2>\n<h3 id=\"整体概述\"><a class=\"anchor\" href=\"#整体概述\">#</a> 整体概述</h3>\n<p>利用 <code>Proxy</code>  对 <code>target</code>  做一个<strong>数据代理</strong>，拦截其 <code>getter</code>  and  <code>setter</code> , 最后返回这个<strong>数据代理</strong></p>\n<h3 id=\"详细步骤\"><a class=\"anchor\" href=\"#详细步骤\">#</a> 详细步骤</h3>\n<ul>\n<li>\n<p><strong>拦截 getter</strong></p>\n<ol>\n<li><em>做边界处理</em>\n<ul>\n<li><code>if(key === '_isReactive')</code>  判断其要获取的 <code>key</code>  是否为 <code>_isReactive</code> , 当 <code>if</code>  判断为 <code>true</code>  时，则直接返回 <code>false</code> ，<strong>不再进行接下来的处理</strong></li>\n</ul>\n</li>\n<li><em>收集副作用</em>\n<ul>\n<li>调用 <code>track</code>  方法来收集<strong>副作用函数</strong>，将其收集到 <code>target</code>  对应的 <code>key</code>  的对应的 <code>Set</code>  里面，等待 <code>setter</code>  被触发，并修改 <code>target[key]</code>  的时候调用 <code>trigger</code>  来将这个 <code>Set</code>  里面存储的<strong>副作用函数</strong>一一触发.</li>\n<li><strong>ps</strong>: <em><a href=\"https://zimu-66ccff.github.io/reactivity-effect/\">(track 方法的讲解请点击这里奥)</a></em></li>\n</ul>\n</li>\n<li><em>返回 <code>target[key]</code>  的值，做深度响应式处理</em>\n<ul>\n<li>利用 <code>Reflect.get(target, key)</code>  取出 <code>target[key]</code>  的值</li>\n<li>判断 <code>target[key]</code>  的值的类型是否为 <code>Object</code> , 当为 <code>Object</code>  时，则返回 <code>reactive(target[key])</code>  对其做深度响应式处理，当不为 <code>Object</code>  时，则直接返回 <code>target[key]</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>拦截 setter</strong></p>\n<ol>\n<li><em>取出相关数据， 进行更新操作</em>\n<ul>\n<li>利用 <code>Reflect.get</code>  方法取出没有修改前的 <code>target[key]</code>  即 <code>oldValue</code>  and 没有修改前的 <code>target[length]</code>  即 <code>oldLength</code> , 利用 <code>Reflect.set</code>  进行对 <code>target[key]</code>  的更新</li>\n</ul>\n</li>\n<li><em>判断是否需要调用对应的 <code>key</code>  对应的 <code>Set</code>  存储的副作用函数</em>\n<ul>\n<li>利用 <code>hasChanged()</code>  判断新旧值是否发生了改变，如果没有改变则不进行接下来的处理。如果发生了改变，则调用 <code>trigger</code>  方法，来调用对应的 <code>key</code>  对应的 <code>Set</code>  存储的副作用函数</li>\n<li><strong>ps</strong>: <em><a href=\"https://zimu-66ccff.github.io/reactivity-effect/\">trigger 方法的讲解请点击这里奥</a></em></li>\n</ul>\n</li>\n<li><em>判断 <code>target</code>  是否为 <code>Array</code> , 并且数组的长度是否发生了改变</em>\n<ul>\n<li>利用 <code>isArray</code>  判断 <code>target</code> ，并利用 <code>Reflect.get()</code>  取得更新后数组的长度，并与之前数组的长度 <code>oldLength</code>  比较，看是否发生了改变，如果发生了改变，则调用 <code>tigger</code>  方法，来调用 <code>length</code>  对应的 <code>Set</code>  存储的副作用。<em>（之所以要这样做，是因为当给数组增加 or 删除元素的时候，数组的 <code>length</code>  就已经改变了， 当对 <code>length</code>  的更新的拦截的时候，就会发现新值和旧值是一样的，就不会触发 <code>trigger</code> ）</em></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>将响应式代理存储起来，并返回响应式代理</strong></p>\n<ol>\n<li>调用 <code>reactiveMap.set</code>  方法，将响应式代理和 <code>target</code>  关联起来并存储，以便于做上文的<strong>边界处理</strong> ( <code>target</code>  已经被做过响应式代理时)</li>\n<li><strong>返回响应式代理</strong></li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue响应式模块刨析",
                "reactive"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/reactivity-ref/",
            "url": "https://zimu-66ccff.github.io/reactivity-ref/",
            "title": "Vue响应式模块-reactivity-ref",
            "date_published": "2023-02-14T02:21:11.000Z",
            "content_html": "<h1 id=\"文档介绍\"><a class=\"anchor\" href=\"#文档介绍\">#</a> 文档介绍</h1>\n<p>接受一个内部值，返回一个响应式的、可更改的 ref 对象，此对象只有一个指向其内部值的属性 .value。</p>\n<h1 id=\"实现原理\"><a class=\"anchor\" href=\"#实现原理\">#</a> 实现原理</h1>\n<ol>\n<li>因为返回的是一个 ref 对象，所以需要一个 <code>RefImpl</code>  类，在类里面进行 <code>get value</code>  和 <code>set value</code>  操作</li>\n<li><code>get value</code>  里进行依赖的收集， <code>set value</code>  里进行依赖的触发</li>\n</ol>\n<h1 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> hasChanged<span class=\"token punctuation\">,</span> isObject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/index'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> track<span class=\"token punctuation\">,</span> trigger <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reactive'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RefImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>__isRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RefImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  _value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  __isRef<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__isRef <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"代码执行过程梳理\"><a class=\"anchor\" href=\"#代码执行过程梳理\">#</a> 代码执行过程梳理</h1>\n<ol>\n<li>判断传递过来的是不是一个 <code>ref</code> ，是的话则直接返回，不是的话，则调用 <code>RefImpl</code>  来实列化，返回一个 ref 对象</li>\n<li>实列化的过程中，constructor 构造函数会调用 <code>convert</code>  对 value 进行处理，判断是不是对象，是对象则调用 <code>reactive</code>  将对象变成响应式的，不是则直接返回，将标志变量 <code>isRef</code>  设置为 <code>true</code> 。</li>\n<li>读取 ref 对象的 value 时则触发 <code>get value</code> ，进行依赖的收集。</li>\n<li>修改 ref 对象的 value 时则触发 <code>set value</code> , 进行依赖的触发。</li>\n</ol>\n",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue响应式模块刨析",
                "ref"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/reactivity-watch/",
            "url": "https://zimu-66ccff.github.io/reactivity-watch/",
            "title": "Vue响应式模块-reactivity-watch(watchEffect)",
            "date_published": "2023-02-14T02:21:11.000Z",
            "content_html": "<h1 id=\"文档描述\"><a class=\"anchor\" href=\"#文档描述\">#</a> 文档描述</h1>\n<p>侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数。<br />\nwatch () 默认是懒侦听的，即仅在侦听源发生变化时才执行回调函数。<br />\nwatch 的第一个参数可以是不同形式的 “数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组：</p>\n<h1 id=\"实现思路\"><a class=\"anchor\" href=\"#实现思路\">#</a> 实现思路</h1>\n<ol>\n<li>因为监听的响应式对象 or getter 函数返回的响应式数据发生改变的时候，就要执行回调函数 <code>callback</code> ，所以需要引入 <code>effect</code>  函数来进行副作用函数依赖的注册，收集，触发，收集的依赖也就是 <code>getter</code>  函数</li>\n<li>当监听的对象 or getter 函数返回的响应式数据发送改变的时候，触发依赖，这里需要用到 <code>scheduler</code> , 让它执行 <code>scheduler</code> ，从而调用上次回调函数传递过来的 <code>Clearup</code>  副作用清理函数，并调用 <code>getter</code>  获取新值值，然后调用回调函数 <code>callback</code> , 并将旧值，新值，注册副作用清理函数的函数 <code>onInvilidate</code>  作为参数传递，并将新值赋值给保存旧值的变量，作为下一次 callback 执行时的旧值。</li>\n</ol>\n<h1 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isFunction <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/index'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> effect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> EffectFn <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">WatchOptions</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  immediate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  flush<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'flush'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  source<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  cb<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    oldValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    newValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    onInvalidate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> WatchOptions</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">let</span> oldValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">let</span> newValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">let</span> clearUp<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    getter <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function-variable function\">getter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">onInvalidate</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    clearUp <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">const</span> effectFn <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token operator\">?.</span>flush<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// To do</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">job</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    newValue <span class=\"token operator\">=</span> <span class=\"token function\">effectFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clearUp<span class=\"token punctuation\">)</span> <span class=\"token function\">clearUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> onInvalidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    oldValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token operator\">?.</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    oldValue <span class=\"token operator\">=</span> <span class=\"token function\">effectFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> seen<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> seen<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  seen<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> seen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"代码执行过程梳理\"><a class=\"anchor\" href=\"#代码执行过程梳理\">#</a> 代码执行过程梳理</h1>\n<ol>\n<li>对监视源做处理，如果是 <code>getter</code>  则直接传递给 <code>getter</code>  变量，如果是响应式对象，则调用 <code>traverse</code>  函数完成对响应式对象所有属性的读取，并将其包装为 <code>getter</code>  再赋值给 <code>getter</code>  变量</li>\n<li>用 <code>effect</code>  注册 <code>getter</code>  副作用函数依赖，以进行依赖的收集，触发。</li>\n<li>手动调用 <code>getter</code> ，调用的过程中会读取监视源的响应式数据，以完成对依赖的收集，并将获取的值赋值给旧值 <code>oldValue</code> 。</li>\n<li>当监视源的响应式数据被修改时，收集的依赖被触发，因为配置的有 <code>scheduler</code>  调度器，就会执行调度器，从而执行上一次回调函数 <code>callback</code>  执行时注册的副作用清理函数 <code>Clearup</code> ，并手动调用 <code>getter</code>  来获取新值 <code>newValue</code> , 执行 <code>callback</code>  回调函数，并将旧值 <code>oldValue</code> ，新值 <code>newValue</code> , 注册副作用清理函数的函数 <code>onInvalidate</code>  作为参数传递。最后将新值赋值给 <code>oldValue</code>  作为下一次 callback 执行时的旧值</li>\n</ol>\n<h1 id=\"watcheffect\"><a class=\"anchor\" href=\"#watcheffect\">#</a> watchEffect</h1>\n<h1 id=\"文档介绍\"><a class=\"anchor\" href=\"#文档介绍\">#</a> 文档介绍</h1>\n<p>立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。</p>\n<h1 id=\"实现原理和-watch-基本一样\"><a class=\"anchor\" href=\"#实现原理和-watch-基本一样\">#</a> 实现原理（和 watch 基本一样）</h1>\n<ol>\n<li>同样，因为追踪的响应式依赖被修改时，也要执行 callback，所以也需要引入 effect, 来进行副作用函数依赖的注册，收集，触发，这里收集的依赖也就是 <code>callback</code></li>\n<li>先手动执行一波 <code>callback</code> ，执行的时候会读取响应式数据，也就完成了依赖的收集。</li>\n<li>当响应式数据被修改的时候，收集的依赖就会被触发，这里我们也要配置 <code>scheduler</code> ，在执行的时候先看有没有上次 <code>callback</code>  执行的时候传递给我们的副作用清理函数，有便执行，然后执行 <code>callback</code> 。</li>\n</ol>\n<h1 id=\"完整代码-2\"><a class=\"anchor\" href=\"#完整代码-2\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> effect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> EffectFn <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> WatchOptions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./watch'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cb<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>onInvalidate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  options<span class=\"token operator\">:</span> WatchOptions</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> clearUp<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">job</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clearUp<span class=\"token punctuation\">)</span> <span class=\"token function\">clearUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>onInvalidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">onInvalidate</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    clearUp <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> effectFn <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">effectFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue响应式模块刨析",
                "watch",
                "watchEffect"
            ]
        },
        {
            "id": "https://zimu-66ccff.github.io/runtime-createApp/",
            "url": "https://zimu-66ccff.github.io/runtime-createApp/",
            "title": "Vue运行时模块-runtime-createApp（根组件挂载并初始化流程梳理）",
            "date_published": "2023-02-14T02:21:11.000Z",
            "content_html": "<h1 id=\"createapp-作用\"><a class=\"anchor\" href=\"#createapp-作用\">#</a> createApp 作用</h1>\n<ol>\n<li>返回一个带有 <code>mount</code>  方法的对象 <code>App</code></li>\n<li>在 <code>mount</code>  方法里会调用 <code>h</code>  函数，来根据通过 <code>createApp</code>  方法传递的<strong>组件对象</strong>生成虚拟 DOM <code>vnode</code> ，然后调用 render 函数来将 <code>vnode</code>  转换为真实 DOM，然后挂载在指定的 DOM 节点</li>\n</ol>\n<h1 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isString <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/index'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> render <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> h <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./vnode'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>rootContainer<span class=\"token operator\">:</span> HTMLElement <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          rootContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>rootContainer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootContainer <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"执行-render-函数将虚拟-dom-节点转换为真实-dom-节点并挂载到指定的容器上面\"><a class=\"anchor\" href=\"#执行-render-函数将虚拟-dom-节点转换为真实-dom-节点并挂载到指定的容器上面\">#</a> 执行 render 函数：将虚拟 DOM 节点转换为真实 DOM 节点并挂载到指定的容器上面</h1>\n<ul>\n<li>获取容器里之前的 vnode <code>preVnode</code> ，然后调用 <code>patch</code>  函数来将虚拟 dom 转化为真实 DOM，并挂载到对应的 DOM 节点上面。</li>\n<li>如果 <code>preVnode</code>  存在，现在的 vnode 为 <code>null</code> , 则卸载 <code>preVnode</code>  对应的真实 dom。</li>\n<li>最后将 vnode 赋值给容器的 <code>_vnode</code>  属性，作为下次执行时的之前的 vnode</li>\n</ul>\n<h1 id=\"完整代码-2\"><a class=\"anchor\" href=\"#完整代码-2\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vnode<span class=\"token operator\">:</span> TypeVnode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> container<span class=\"token operator\">:</span> VElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> prevVnode <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>_vnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>prevVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevVnode<span class=\"token punctuation\">)</span> <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span>prevVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  container<span class=\"token punctuation\">.</span>_vnode <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"执行-patch-函数来通过-shapeflag-根据虚拟-dom-的不同类型调用不同的函数处理\"><a class=\"anchor\" href=\"#执行-patch-函数来通过-shapeflag-根据虚拟-dom-的不同类型调用不同的函数处理\">#</a> 执行 patch 函数，来通过 shapeFlag 根据虚拟 DOM 的不同类型调用不同的函数处理</h1>\n<ul>\n<li>对于 Element 节点，调用 <code>processElement</code>  方法进行处理</li>\n<li>对于文本节点，调用 <code>processText</code>  方法进行处理</li>\n<li>对于 <code>Fragment</code>  节点，调用 <code>processFragment</code>  方法进行处理</li>\n<li>对于 <code>Component</code>  节点，调用 <code>processComponent</code>  方法进行处理</li>\n</ul>\n<h1 id=\"完整代码-3\"><a class=\"anchor\" href=\"#完整代码-3\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  oldVnode<span class=\"token operator\">:</span> TypeVnode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  newVnode<span class=\"token operator\">:</span> TypeVnode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  container<span class=\"token operator\">:</span> VElement<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  anchor<span class=\"token operator\">:</span> VElement <span class=\"token operator\">|</span> VChildNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVnode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isSameVnodeType</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> newVnode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> oldVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    anchor <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>anchor <span class=\"token operator\">||</span> oldVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    oldVnode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> ShapeFlag <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> newVnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ShapeFlag <span class=\"token operator\">&amp;</span> ShapeFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">processElement</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      oldVnode <span class=\"token keyword\">as</span> TypeElementVnode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      newVnode <span class=\"token keyword\">as</span> TypeElementVnode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      container<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      anchor</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ShapeFlag <span class=\"token operator\">&amp;</span> ShapeFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">processText</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      oldVnode <span class=\"token keyword\">as</span> TypeTextVnode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      newVnode <span class=\"token keyword\">as</span> TypeTextVnode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      container<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      anchor</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ShapeFlag <span class=\"token operator\">&amp;</span> ShapeFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">processFragment</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      oldVnode <span class=\"token keyword\">as</span> TypeFragmentVnode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      newVnode <span class=\"token keyword\">as</span> TypeFragmentVnode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      container<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      anchor</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ShapeFlag <span class=\"token operator\">&amp;</span> ShapeFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPONENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">processComponent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      oldVnode <span class=\"token keyword\">as</span> TypeComponentVnode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      newVnode <span class=\"token keyword\">as</span> TypeComponentVnode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      container<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      anchor</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"执行-processcomponent-方法进行对组件虚拟-dom-的处理\"><a class=\"anchor\" href=\"#执行-processcomponent-方法进行对组件虚拟-dom-的处理\">#</a> 执行 processComponent 方法进行对组件虚拟 DOM 的处理</h1>\n<ul>\n<li>判断 oldVnode 是否为空，为空则执行 <code>mountComponent</code>  函数进行挂载</li>\n<li>不为空则进行更新操作</li>\n</ul>\n<h1 id=\"完整代码-4\"><a class=\"anchor\" href=\"#完整代码-4\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">processComponent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  oldVnode<span class=\"token operator\">:</span> TypeComponentVnode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  newVnode<span class=\"token operator\">:</span> TypeComponentVnode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  container<span class=\"token operator\">:</span> VElement<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  anchor<span class=\"token operator\">:</span> VElement <span class=\"token operator\">|</span> VChildNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>oldVnode<span class=\"token punctuation\">)</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span>newVnode<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    newVnode<span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>component <span class=\"token keyword\">as</span> Instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    newVnode<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newVnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">(</span>newVnode<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">.</span>update <span class=\"token keyword\">as</span> EffectFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"执行-mountcomponent-方法来进行对组件虚拟-dom-的挂载\"><a class=\"anchor\" href=\"#执行-mountcomponent-方法来进行对组件虚拟-dom-的挂载\">#</a> 执行 mountComponent 方法来进行对组件虚拟 DOM 的挂载</h1>\n<ul>\n<li>创建组件实例，给组件实例添加一些属性</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> instance<span class=\"token operator\">:</span> Instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 组件声明的 props</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传递给组件的，但是组件没有声明的属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  setupState<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//setup 函数返回的数据对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ctx<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传递给组件的 render 函数作为参数的数据对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  subTree<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 虚拟 dom 树</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  update<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 组件的更新函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  isMounted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 判断是否需要挂载的标志变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 存储新的组件虚拟 dom</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>调用 updateProps 方法来给组件实例添加 props，attrs</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">updateProps</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">:</span> Instance<span class=\"token punctuation\">,</span> vnode<span class=\"token operator\">:</span> TypeComponentVnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> vnodeProps <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> vnodeProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">.</span>props<span class=\"token operator\">?.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vnodeProps<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vnodeProps<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 对 props 进行响应式处理</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>调用组件对象的 setup 函数来获取返回的数据对象，并传递 props 和上下文对象</li>\n<li>初始化 ctx 数据对象</li>\n<li>利用 <code>effect</code>  实现组件的自更新\n<ol>\n<li>将组件的挂载与更新操作注册为副作用函数依赖，并设置调度器 scheduler，在调度器里面调用 <code>queuejob</code>  从而使多次相同的更新操作，只执行最后的一次。</li>\n<li>手动调用 <code>instance.update</code>  函数来进行挂载，挂载过程中响应式数据也完成了对依赖的收集。</li>\n<li>当响应式数据发生改变时就会触发收集的依赖，就会执行 update 来进行组件的更新，并且由于调度器的存在，多次相同的更新，只会执行一次</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>instance<span class=\"token punctuation\">.</span>update <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">.</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>subTree <span class=\"token operator\">=</span> <span class=\"token function\">normalizeVnode</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">fallThrough</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      vnode<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 判断是否是被动更新</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        vnode <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">updateProps</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">.</span>setupState<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">const</span> prev <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>subTree <span class=\"token operator\">=</span> <span class=\"token function\">normalizeVnode</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">fallThrough</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      vnode<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token function\">queueJob</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>instance<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"完整代码-5\"><a class=\"anchor\" href=\"#完整代码-5\">#</a> 完整代码</h1>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  vnode<span class=\"token operator\">:</span> TypeComponentVnode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  container<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  anchor<span class=\"token operator\">:</span> VElement <span class=\"token operator\">|</span> VChildNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> instance<span class=\"token operator\">:</span> Instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 组件声明的 props</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传递给组件的，但是组件没有声明的属性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    setupState<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//setup 函数返回的数据对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ctx<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传递给组件的 render 函数作为参数的数据对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    subTree<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 虚拟 dom 树</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    update<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 组件的更新函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    isMounted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 判断是否需要挂载的标志变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 存储新的组件虚拟 dom</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">updateProps</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 源码：instance.setupState = proxyRefs (setupResult)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// TODO</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  instance<span class=\"token punctuation\">.</span>setupState <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>setup<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    attrs<span class=\"token operator\">:</span> instance<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    emit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 源码：对 ctx 做了一个代理，先再 props 里面找，再到 setupSate 里面找</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// TODO</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  instance<span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">.</span>setupState<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  instance<span class=\"token punctuation\">.</span>update <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">.</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>subTree <span class=\"token operator\">=</span> <span class=\"token function\">normalizeVnode</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">fallThrough</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        vnode<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          vnode <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          instance<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token function\">updateProps</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          instance<span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">.</span>setupState<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">const</span> prev <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        instance<span class=\"token punctuation\">.</span>subTree <span class=\"token operator\">=</span> <span class=\"token function\">normalizeVnode</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">fallThrough</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        vnode<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>subTree<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">queueJob</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> EffectFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  instance<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">const</span> eventName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>event<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'事件处理函数不存在'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">updateProps</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">:</span> Instance<span class=\"token punctuation\">,</span> vnode<span class=\"token operator\">:</span> TypeComponentVnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> vnodeProps <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> vnodeProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">.</span>props<span class=\"token operator\">?.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vnodeProps<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      instance<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vnodeProps<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token comment\">// 对 props 进行响应式处理</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fallThrough</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">:</span> Instance<span class=\"token punctuation\">,</span> subTree<span class=\"token operator\">:</span> TypeVnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    subTree<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token operator\">...</span>subTree<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>      <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>组件的挂载和更新都会调用 patch 函数来进行对 subtree 虚拟 DOM 树的挂载与更新，调用的 patch 函数里针对不同类型的 DOM 函数设计的处理方法又会调用 patch 函数，以此递归，知道所有的节点全部挂载 or 更新完毕</p>\n",
            "tags": [
                "笔记",
                "前端",
                "Vue",
                "Vue原理实现",
                "前端",
                "Vue",
                "Vue原理刨析",
                "Vue运行时模块刨析",
                "createApp"
            ]
        }
    ]
}