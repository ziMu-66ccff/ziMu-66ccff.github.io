<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>花圃</title>
        <subtitle>理想的种子，于现实中绽放</subtitle>
        <icon>https://zimu-66ccff.github.io/images/favicon.ico</icon>
        <link>https://zimu-66ccff.github.io</link>
        <author>
          <name>ziMu</name>
        </author>
        <description>干净澄澈，真诚自然</description>
        <language>zh-CN</language>
        <pubDate>Sun, 31 Mar 2024 14:23:47 +0800</pubDate>
        <lastBuildDate>Sun, 31 Mar 2024 14:23:47 +0800</lastBuildDate>
        <category term="前端" />
        <category term=" Vue" />
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/sdkSumary/</guid>
            <title>前端埋点sdk搭建实践总结</title>
            <link>https://zimu-66ccff.github.io/sdkSumary/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端监控" scheme="https://zimu-66ccff.github.io/categories/note/front-end/FEMonitoring/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端监控" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/" />
            <category term="sendSeacon" scheme="https://zimu-66ccff.github.io/tags/sendSeacon/" />
            <pubDate>Sun, 31 Mar 2024 14:23:47 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端埋点-sdk-搭建实践总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端埋点-sdk-搭建实践总结&#34;&gt;#&lt;/a&gt; 前端埋点 sdk 搭建实践总结&lt;/h1&gt;
&lt;h2 id=&#34;前端搭建监控体系是为了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端搭建监控体系是为了什么&#34;&gt;#&lt;/a&gt; 前端搭建监控体系是为了什么？&lt;/h2&gt;
&lt;h3 id=&#34;及时发现问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#及时发现问题&#34;&gt;#&lt;/a&gt; 及时发现问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;能够通过收集的性能指标，及时发现存在的性能问题&lt;/li&gt;
&lt;li&gt;能够通过白屏监控，及时发现出现了白屏问题&lt;/li&gt;
&lt;li&gt;能够通过通过 pv，uv 的变化，及时发现活跃量的变化；通过用户行为的监控，收集到用户的行为信息，从而进行针对性推荐和优化&lt;/li&gt;
&lt;li&gt;能够异常上报，及时发现各种异常、&lt;/li&gt;
&lt;li&gt;能够通过接口调用情况监控，及时发现流量大的后端服务，高频出错的后端服务&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;精确定位问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精确定位问题&#34;&gt;#&lt;/a&gt; 精确定位问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;通过收集的页面加载事件的关键时间段，精准的定位到首屏时间主要是卡在哪个时间段&lt;/li&gt;
&lt;li&gt;通过用户行为，路由跳转的监控，及时定位到发生错误前后用户的操作，助力错误重现，修复&lt;/li&gt;
&lt;li&gt;通过异常监控，准确定位到发生错误的原因，所在文件，行，列，&lt;/li&gt;
&lt;li&gt;通过接口调用情况监控，及时定位出错的后端服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结起来就简单的两句话 &lt;code&gt;如何及时的发现问题&lt;/code&gt; ， &lt;code&gt;如何准确的定位问题&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;前端监控需要监控哪些模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端监控需要监控哪些模块&#34;&gt;#&lt;/a&gt; 前端监控需要监控哪些模块&lt;/h2&gt;
&lt;h3 id=&#34;性能监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能监控&#34;&gt;#&lt;/a&gt; 性能监控：&lt;/h3&gt;
&lt;h4 id=&#34;性能监控究竟要监控什么数据从哪里入手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能监控究竟要监控什么数据从哪里入手&#34;&gt;#&lt;/a&gt; 性能监控究竟要监控什么数据，从哪里入手？&lt;/h4&gt;
&lt;h5 id=&#34;用户体验为王以用户为中心的性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户体验为王以用户为中心的性能指标&#34;&gt;#&lt;/a&gt; 用户体验为王，以用户为中心的性能指标：&lt;/h5&gt;
&lt;h6 id=&#34;加载速度-用户什么时候可以感受到界面开始加载加载完成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载速度-用户什么时候可以感受到界面开始加载加载完成&#34;&gt;#&lt;/a&gt;  &lt;code&gt;加载速度&lt;/code&gt;  用户什么时候可以感受到界面开始加载，加载完成：&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FP：首次非网页背景像素渲染的时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;建议改为收集 FCP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采集方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于 PerformanceObserver&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PerformanceObserver&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;entryList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; entry &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; entryList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getEntriesByName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;first-paint&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;fp&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; entry&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;paint&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buffered&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FCP：首次内容渲染的时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;收集的原因：用户首次感知到界面开始有东西&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采集方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于 PerformanceObserver&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PerformanceObserver&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;entryList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; entry &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; entryList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getEntriesByName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;first-contentful-paint&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;fcp&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; entry&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;paint&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buffered&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 web-vitals 包&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; getFCP &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;web-vitals&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当 FCP 可用时立即进行测量和记录。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getFCP&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LCP：可视区域的最大图像或者文本块渲染出来的时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;收集的原因：用户觉得页面基本上块渲染完毕的时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采集方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于 PerformanceObserver&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PerformanceObserver&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;entryList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; entries &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; entryList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getEntries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; entry &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; entries&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;entries&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lcp&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; entry&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;largest-contentful-paint&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buffered&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 web-vitals 包&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; getLCP &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;web-vitals&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当 LCP 可用时立即进行测量和记录。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getLCP&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;交互延迟-用户什么时候可以感受到界面可以开始交互交互后需要等待多久才有回应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交互延迟-用户什么时候可以感受到界面可以开始交互交互后需要等待多久才有回应&#34;&gt;#&lt;/a&gt;  &lt;code&gt;交互延迟&lt;/code&gt;  用户什么时候可以感受到界面可以开始交互，交互后需要等待多久才有回应：&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FID：用户首次于页面交互到浏览器做出相应开始执行时间处理程序的经过的时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;收集的原因：用户的第一次交互往往是很重要的，第一次交互迟迟没有响应，用户就可能放弃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采集方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于 PerformanceObserver&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PerformanceObserver&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;entryList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; entries &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; entryList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getEntries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; entry &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; entries&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;entries&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; delay &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; entry&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;processingStart &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; entry&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;startTime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;FID:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; entry&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;first-input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buffered&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 web-vitals&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; getFID &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;web-vitals&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当 FID 可用时立即进行测量和记录。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getFID&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INP：页面生命周期中用户与网页交互中最长的一次持续时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;收集的原因：用户浏览网页过程中，如果存在某次交互迟迟没有响应，用户就可能放弃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采集方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于 web-vitals&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; getINP &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;web-vitals&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当 INP 可用时立即进行测量和记录。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getINP&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TTI：最早可交互时间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;详细定义&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;TTI 指标用于衡量从网页开始加载到其主要子资源加载完成所用的时间，并且能够快速可靠地响应用户输入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标准计算方式&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从 FCP 开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向前搜索一个至少 5 秒的静默窗口，其中&lt;em&gt;静默窗口&lt;/em&gt;的定义为：没有长任务且不超过两个进行中的网络 GET 请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向后搜索静默窗口之前的最后一个长任务，如果找不到长任务，则停止在 FCP 处停止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TTI 是安静窗口之前的最后一个长任务的结束时间（如果未找到长任务，则与 FCP 值相同）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开发中的计算方式：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; navigation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// W3C Level2  PerformanceNavigationTiming&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 使用了 High-Resolution Time，时间精度可以达毫秒的小数点好几位。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  performance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getEntriesByType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;navigation&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; performance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getEntriesByType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;navigation&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; performance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;timing&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// W3C Level1  (目前兼容性高，仍然可使用，未来可能被废弃)。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;TTI&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; navigation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;domInteractive &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; navigation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fetchStart&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：是一项实验室指标，虽然可以衡量现场 TTI，但不建议这样做，因为用户互动可能会对网页的 TTI 造成影响，导致报告中出现大量差异。若要了解网页在该字段中的互动情况，应该衡量 INP。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;视觉稳定界面视觉上的变化对用户造成的负面影响大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视觉稳定界面视觉上的变化对用户造成的负面影响大小&#34;&gt;#&lt;/a&gt;  &lt;code&gt;视觉稳定&lt;/code&gt; ：界面视觉上的变化对用户造成的负面影响大小&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CLS：网页生命周期内发生的每次意外布局偏移的最大&lt;em&gt;布局偏移得分&lt;/em&gt;，每当一个已渲染的可见元素的位置从一个可见位置变更到下一个可见位置时，就发生了 &lt;strong&gt;布局偏移&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;收集的原因：用户很讨厌页面布局偏移过大，比如，当用户点击一个按钮的时候，突然按钮的位置变了，导致用户点到了其他的东西，比如广告之类的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采集方法：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于 web-vitals：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; getCLS &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;web-vitals&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当 CLS 可用时立即进行测量和记录。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getCLS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;精准定位问题以技术为中心的关键时间点时间段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精准定位问题以技术为中心的关键时间点时间段&#34;&gt;#&lt;/a&gt; 精准定位问题，以技术为中心的关键时间点，时间段：&lt;/h5&gt;
&lt;h6 id=&#34;页面加载过程关键数据获取方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面加载过程关键数据获取方式&#34;&gt;#&lt;/a&gt; 页面加载过程关键数据获取方式：&lt;/h6&gt;
&lt;p&gt;利用 &lt;code&gt;performance.getEntriesByType(&#39;navigation&#39;)[0]&lt;/code&gt;  or  &lt;code&gt;performance.timing&lt;/code&gt;  (如果前者浏览器不支持，使用这个) 得到的数据对象身上的字段：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;navigationStart&lt;/code&gt; ：表示上一个文档卸载结束时的 unix 时间戳，如果没有上一个文档，则等于 fetchStart。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unloadEventStart&lt;/code&gt; ：表示前一个网页（与当前页面同域）unload 的时间戳，如无前一个网页 unloade 或前一个网页与当前不同域，则为 0。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unloadEventEnd&lt;/code&gt; : 返回前一个 unload 时间绑定的回调执行完毕的时间戳。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redirectStart&lt;/code&gt; ：前一个 Http 重定向发送时的时间。有跳转且是同域名内重定向，否则为 0。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redirectEnd&lt;/code&gt; ：前一个 Http 重定向完成时的时间。有跳转且是同域名内重定向，否则为 0。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fetchStart&lt;/code&gt; ：浏览器准备使用 http 请求文档的时间，在检查本地缓存之前。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;domainLookupStart/domainLookupEnd&lt;/code&gt; ：DNS 域名查询开始 / 结束的时间，如果使用本地缓存（则无需 DNC 查询）或持久链接，则和 fetchStart 一致。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connectStart&lt;/code&gt; ：HTTP（TCP）开始或重新建立链接的时间，如果是持久链接，则和 fetchStart 一致。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connectEnd&lt;/code&gt; ：HTTP（TCP）完成建立链接的时间（完成握手），如果是持久链接，则和 fetchStart 一致。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;secureConnectionStart&lt;/code&gt; ：Https 链接开始的时间，如果不是安全链接则为 0。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;requestStart&lt;/code&gt; ：http 在建立链接之后，正式开始请求真实文档的时间，包括从本地读取缓存。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;responseStart&lt;/code&gt; ：http 开始接收响应的时间（获取第一个字节），包括从本地读取缓存。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;responseEnd&lt;/code&gt; ：http 响应接收完全的时间（最后一个字节），包括从本地读取缓存。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;domLoading&lt;/code&gt; ：开始解析渲染 DOM 树的时间。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;domInteractive&lt;/code&gt; ：完成解析 DOM 树的时间 (这个时候放在 html 头部的脚本已经执行完毕，async，defter 属性的脚本已经开始加载)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;domContentLoadedEventStart&lt;/code&gt; ：DOM 解析完成，同步的脚本，defter，async 属性的脚本下载并执行完毕后，页面内资源加载开始的时间，此时 dom 依赖的图片、子框架和异步脚本，css 样式表等其他内容不一定完成加载加载。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;domContentLoadedEventEnd&lt;/code&gt; ：domContentLoadedEvent 事件结束&lt;/p&gt;
&lt;p&gt;&lt;code&gt;domComplete&lt;/code&gt; ：当文档的 DOM 树已经构建完成、所有的子资源（如样式表、脚本、图片等）都已经下载完成时。这意味着文档的结构已经完全准备好，但是可能一些外部资源（如图片等）还在进行下载或者脚本在执行。在这个阶段，页面已经可以被渲染和展示给用户了，但可能还有些许的异步加载的资源没有完成加载。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loadEventStart&lt;/code&gt; ：整个页面及所有依赖资源如样式表和图片都已完成加载时触发，这个时候可以认为 dom 渲染完毕&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loadEventEnd&lt;/code&gt; ：load 函数执行完毕的事件、&lt;/p&gt;
&lt;h6 id=&#34;可以计算出来的页面加载过程的关键时间段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以计算出来的页面加载过程的关键时间段&#34;&gt;#&lt;/a&gt; 可以计算出来的页面加载过程的关键时间段&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;页面卸载阶段：
&lt;ol&gt;
&lt;li&gt;上一个页面卸载耗时：unloadEventEnd - unloadEventStart&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;网络部分：
&lt;ol&gt;
&lt;li&gt;重定向耗时：redirectEnd - redirectStart&lt;/li&gt;
&lt;li&gt;文档开始获取时间时间：fetchStart&lt;/li&gt;
&lt;li&gt;取缓存耗时：domainLookupStart - fetchStart&lt;/li&gt;
&lt;li&gt;DNS 查询耗时：domainLookupEnd - domainLookupStart&lt;/li&gt;
&lt;li&gt;ssl 四次握手耗时：connectEnd - secureConnectionStart&lt;/li&gt;
&lt;li&gt;TCP 建立耗时：connectEnd - connectStart&lt;/li&gt;
&lt;li&gt;请求响应耗时：responseStart - requestStart&lt;/li&gt;
&lt;li&gt;响应传输耗时：responseEnd - responseStart。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;页面解析渲染部分：
&lt;ol&gt;
&lt;li&gt;dom 开始解析时间（dom 树开始构建的时间）：domLoading&lt;/li&gt;
&lt;li&gt;dom 解析完毕时间（dom 树构建完成的时间）：domInteractive&lt;/li&gt;
&lt;li&gt;dom 解析完毕并且脚本执行完毕的时间：domContendLoadEventStart&lt;/li&gt;
&lt;li&gt;所有资源加载完成，dom 完全渲染的时间：loadEventStart&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;资源加载过程中关键数据的获取方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源加载过程中关键数据的获取方式&#34;&gt;#&lt;/a&gt; 资源加载过程中关键数据的获取方式：&lt;/h6&gt;
&lt;p&gt;利用 &lt;code&gt;performance.getEntriesByType(&#39;resource&#39;)&lt;/code&gt;  获取到所有静态资源加载的关键信息&lt;/p&gt;
&lt;h6 id=&#34;可以得到的静态资源信息和加载中的关键时间段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以得到的静态资源信息和加载中的关键时间段&#34;&gt;#&lt;/a&gt; 可以得到的静态资源信息和加载中的关键时间段&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;静态资源信息
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; : 资源地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initiatorType&lt;/code&gt; : 资源类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transferSize&lt;/code&gt; : 资源大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startTime&lt;/code&gt; : 开始时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;responseEnd&lt;/code&gt; : 结束时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duration&lt;/code&gt; : 消耗时间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;网络部分
&lt;ol&gt;
&lt;li&gt;重定向耗时：redirectEnd - redirectStart&lt;/li&gt;
&lt;li&gt;文档开始获取时间时间：fetchStart&lt;/li&gt;
&lt;li&gt;取缓存耗时：domainLookupStart - fetchStart&lt;/li&gt;
&lt;li&gt;DNS 查询耗时：domainLookupEnd - domainLookupStart&lt;/li&gt;
&lt;li&gt;ssl 四次握手耗时：connectEnd - secureConnectionStart&lt;/li&gt;
&lt;li&gt;TCP 建立耗时：connectEnd - connectStart&lt;/li&gt;
&lt;li&gt;请求响应耗时：responseStart - requestStart&lt;/li&gt;
&lt;li&gt;响应传输耗时：responseEnd - responseStart。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;静态资源加载的缓存命中率的计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态资源加载的缓存命中率的计算&#34;&gt;#&lt;/a&gt; 静态资源加载的缓存命中率的计算&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;直接判断 &lt;code&gt;performance.getEntriesByType(&#39;resource&#39;)&lt;/code&gt;  返回的资源数据对象数组中的元素的 &lt;code&gt;deliveryType&lt;/code&gt;  属性是否为 &lt;code&gt;cache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同时满足 &lt;code&gt;durantion === 0&lt;/code&gt;  和 &lt;code&gt;transferSize === 0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;行为监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行为监控&#34;&gt;#&lt;/a&gt; 行为监控：&lt;/h3&gt;
&lt;h4 id=&#34;行为监控中需要监控一些什么提供一些什么功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行为监控中需要监控一些什么提供一些什么功能&#34;&gt;#&lt;/a&gt; 行为监控中需要监控一些什么，提供一些什么功能？&lt;/h4&gt;
&lt;h5 id=&#34;监控-pvuv从而得到流量变化统计出热点页面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#监控-pvuv从而得到流量变化统计出热点页面&#34;&gt;#&lt;/a&gt; 监控 pv，uv，从而得到流量变化，统计出热点页面&lt;/h5&gt;
&lt;h6 id=&#34;pv-页面访问量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pv-页面访问量&#34;&gt;#&lt;/a&gt; pv: 页面访问量&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;获取方法&lt;/strong&gt;：路由跳转就说明访问了页面，在路由跳转的时候上报也就是 &lt;code&gt;popState&lt;/code&gt;  事件触发时，上报此时的事件，页面信息，用户来路&lt;/p&gt;
&lt;h6 id=&#34;uv用户访问量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uv用户访问量&#34;&gt;#&lt;/a&gt; uv：用户访问量&lt;/h6&gt;
&lt;p&gt;获取方法：对外暴露一个设置用户唯一标识的方法，让用户在合适的时候调用这个方法设置唯一标识，后续每次数据上报时都带上这个唯一标识，后端来通过时间戳和这个唯一标识，来统计不同时间段的 uv&lt;/p&gt;
&lt;h5 id=&#34;监控用户设备信息浏览器信息从而得到大多数用户的屏幕数据浏览器类型从而更好的适配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#监控用户设备信息浏览器信息从而得到大多数用户的屏幕数据浏览器类型从而更好的适配&#34;&gt;#&lt;/a&gt; 监控用户设备信息，浏览器信息，从而得到大多数用户的屏幕数据，浏览器类型从而更好的适配&lt;/h5&gt;
&lt;p&gt;利用 &lt;code&gt;window.navigation&lt;/code&gt;  获取到 userAgent, 再利用 &lt;code&gt;broser&lt;/code&gt;  和 &lt;code&gt;ua-parser-js&lt;/code&gt;  这两个包对其进行解析&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; parser &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;ua-parser-js&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Bowser &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;bowser&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;resolveUserAgent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userAgent&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; browserData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Bowser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userAgent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; parserData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userAgent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; browserName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;browser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;browser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 浏览器名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; browserVersion &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;browser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;browser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 浏览器版本号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; osName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 操作系统名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; osVersion &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 操作系统版本号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; deviceType &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;platform&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;device&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 设备类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; deviceVendor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;platform&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vendor &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;device&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;vendor &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 设备所属公司&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; deviceModel &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;platform&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;model &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;device&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;model &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 设备型号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; engineName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;engine&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;engine&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//engine 名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; engineVersion &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; browserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;engine&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; parserData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;engine&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//engine 版本号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    browserName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    browserVersion&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    osName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    osVersion&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    deviceType&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    deviceVendor&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    deviceModel&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    engineName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    engineVersion&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;监控用户的行为路由跳转接口请求当前访问的页面信息-并按顺序存入用户行为栈从而准确定位用户的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#监控用户的行为路由跳转接口请求当前访问的页面信息-并按顺序存入用户行为栈从而准确定位用户的操作&#34;&gt;#&lt;/a&gt; 监控用户的行为，路由跳转，接口请求，当前访问的页面信息， 并按顺序存入用户行为栈，从而准确定位用户的操作&lt;/h5&gt;
&lt;h6 id=&#34;用户行为的监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户行为的监控&#34;&gt;#&lt;/a&gt; 用户行为的监控：&lt;/h6&gt;
&lt;p&gt;考虑到监听所有元素的所有方法会过于消耗性能，所以支持用户通过配置对象的方式在初始化 sdk 的时候配置 &lt;code&gt;elementTrackedList&lt;/code&gt; ,  &lt;code&gt;classTrackedList&lt;/code&gt; ,  &lt;code&gt;eventTrackedList&lt;/code&gt;  从而监听指定元素 和 指定 class 的元素的指定事件。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;initDomHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;eventTrackedList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;eventName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        eventName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;elementTrackedList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; HTMLElement&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;tagName&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toLocaleLowerCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; HTMLElement&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            target &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token builtin&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; HTMLElement&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;classList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;className&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;classTrackedList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;className&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; HTMLElement&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; domData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            tagInfo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              classList&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;classList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              tagName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tagName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              text&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;textContent&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            pageInfo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getPageInformation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            time&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            timeFormat&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;formatDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;UserActionMetricsName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;DBR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;UserActionMetricsName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;DBR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;eventName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;domData&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;UserActionMetricsName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;DBR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;eventName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;UserActionMetricsName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;DBR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;eventName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;domData&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;UserActionMetricsName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;DBR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;eventName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;domData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; hehaviorStackData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; eventName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            page&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getPageInformation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pathname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              tagInfo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                classList&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;classList&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                tagName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tagName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                text&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;textContent&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              pageInfo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getPageInformation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            time&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            timeFormat&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;formatDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hehaviorStack&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hehaviorStackData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;页面基本信息获取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面基本信息获取&#34;&gt;#&lt;/a&gt; 页面基本信息获取：&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;通过 &lt;code&gt;window.location&lt;/code&gt;  获取到当前页面的 &lt;code&gt;protocol&lt;/code&gt; ,  &lt;code&gt;host&lt;/code&gt; , &lt;code&gt;port&lt;/code&gt;   &lt;code&gt;origin&lt;/code&gt; ,  &lt;code&gt;href&lt;/code&gt; ,  &lt;code&gt;pathname&lt;/code&gt; ,  &lt;code&gt;search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;window.screen&lt;/code&gt;  获取到用户屏幕的宽高&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;document.title&lt;/code&gt;  获取到网页的 title&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;路由跳转的监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由跳转的监控&#34;&gt;#&lt;/a&gt; 路由跳转的监控&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;监控 &lt;code&gt;hash&lt;/code&gt;  路由&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;hash&lt;/code&gt;  路由的 &lt;code&gt;hash&lt;/code&gt;  变化会触发 &lt;code&gt;hashchange&lt;/code&gt;  时间，但是也会触发 &lt;code&gt;popstate&lt;/code&gt;  事件，所以我们统一监听 &lt;code&gt;popstate&lt;/code&gt;  事件即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控 &lt;code&gt;history&lt;/code&gt;  路由&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;history&lt;/code&gt;  路由的 &lt;code&gt;back&lt;/code&gt; ，  &lt;code&gt;forword&lt;/code&gt; ，  &lt;code&gt;go&lt;/code&gt;  方法都会触发 &lt;code&gt;popstate&lt;/code&gt;  事件，所以我们可以监听 &lt;code&gt;popstate&lt;/code&gt;  事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但是 &lt;code&gt;pushState&lt;/code&gt; ，  &lt;code&gt;replaceState&lt;/code&gt;  方法不会触发对应的事件和 &lt;code&gt;popstate&lt;/code&gt;  事件，所以我们需要对其进行重写，在原有功能的基础上通过 &lt;code&gt;window.dispatch&lt;/code&gt;  派发事件&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;writePushStateAndReplaceState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  history&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pushState &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;writeHistoryEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;pushState&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  history&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;replaceState &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;writeHistoryEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;replaceState&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;writeHistoryEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;keyof&lt;/span&gt; History&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; originEvent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; history&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;originEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; event &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;界面停留事件的监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#界面停留事件的监控&#34;&gt;#&lt;/a&gt; 界面停留事件的监控&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;在 load 事件里记录初次进入界面的事件，把该界面的信息（url， startTime， endTime）推送进栈中&lt;/li&gt;
&lt;li&gt;在 popSate 事件触发，也就是路由跳转时，记录上一个界面也就是栈顶的哪个界面信息的结束时间&lt;/li&gt;
&lt;li&gt;在 beforeunload 中计算出最后一个界面的结束时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;访客来路的监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访客来路的监控&#34;&gt;#&lt;/a&gt; 访客来路的监控：&lt;/h6&gt;
&lt;p&gt;监控访客来路的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取到流量是从哪个界面来的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取方法：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;document.referer&lt;/code&gt;  来获取到网页前一个地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：以下场景获取到的值为空&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接在地址栏中输入地址跳转&lt;/li&gt;
&lt;li&gt;直接通过浏览器收藏夹打开&lt;/li&gt;
&lt;li&gt;从 https 的网站直接进入一个 http 协议的网站&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当发生 404 等问题的时候，知道是从哪个界面调过来的&lt;/p&gt;
&lt;p&gt;获取方法：&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;window.performance.navigation.type&lt;/code&gt;  属性，它返回一个整数，有以下 4 种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; : 点击链接、地址栏输入、表单提交、脚本操作等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; : 点击重新加载按钮、location.reload。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt; : 点击前进或后退按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;255&lt;/code&gt; : 任何其他来源。即非刷新 / 非前进后退、非点击链接 / 地址栏输入 / 表单提交 / 脚本操作等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;对外暴露上传数据的接口从而支持用户自己手动埋点提高灵活性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对外暴露上传数据的接口从而支持用户自己手动埋点提高灵活性&#34;&gt;#&lt;/a&gt; 对外暴露上传数据的接口，从而支持用户自己手动埋点，提高灵活性&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;通过对外暴露 &lt;code&gt;report&lt;/code&gt;  方法，支持用户自定义埋点，上传数据和数据类型&lt;/li&gt;
&lt;li&gt;并且每次的上报都会默认带上 &lt;code&gt;appID&lt;/code&gt;  来区别不同的 app,  &lt;code&gt;uid&lt;/code&gt;  来区别不同的用户统计 uv,  &lt;code&gt;time&lt;/code&gt;  来记录时间， &lt;code&gt;extra&lt;/code&gt;  来支持用户通过对外暴露的 &lt;code&gt;setExtra&lt;/code&gt;  方法来配置每次请求都必须带上的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; Record&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; params &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; type &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        appId&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;appId&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        uid&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;uid&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        extra&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;extra&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        time&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        timeFormat&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;formatDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; blob &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Blob&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    navigator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sendBeacon&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;requestUrl &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; blob&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;异常监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常监控&#34;&gt;#&lt;/a&gt; 异常监控：&lt;/h3&gt;
&lt;h4 id=&#34;js-运行错误监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js-运行错误监控&#34;&gt;#&lt;/a&gt; js 运行错误监控&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;在全局监控 &lt;code&gt;error&lt;/code&gt;  事件&lt;/li&gt;
&lt;li&gt;根据错误类型，文件名，信息生成一个随机 id，避免相同的错误重复上传&lt;/li&gt;
&lt;li&gt;将 event.message, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2V2ZW50LmVycm9yLm5hbWU=&#34;&gt;event.error.name&lt;/span&gt;（错误类型）,event.error (错误堆栈，可以让 gpt 写一个函数来解析这个错误堆栈)， event.filename, event.colno, event.lineno 上传&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源加载错误src-or-href-错了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源加载错误src-or-href-错了&#34;&gt;#&lt;/a&gt; 资源加载错误（src or href 错了）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;在全局监控 error 事件，通过 event.targrt.tagName 是不是 link or script or img or a 来判断是不是资源加载错误&lt;/li&gt;
&lt;li&gt;根据错误类型，src 生成一个随机 id，避免相同的错误重复上传&lt;/li&gt;
&lt;li&gt;将 event.tatget.src, event.target.tagName, outerHTMl 上传&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;promise-错误监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-错误监控&#34;&gt;#&lt;/a&gt; promise 错误监控&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;在全局监控 &lt;code&gt;unhandledRejection&lt;/code&gt;  事件&lt;/li&gt;
&lt;li&gt;根据错误信息，错误名字，生成一个随机 id，避免相同的错误重复上传&lt;/li&gt;
&lt;li&gt;上传 event.reason.message, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2V2ZW50LnJlYXNvbi5uYW1l&#34;&gt;event.reason.name&lt;/span&gt;, event.reason (错误堆栈，可以让 gpt 写一个函数来解析这个错误堆栈)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;跨域错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨域错误&#34;&gt;#&lt;/a&gt; 跨域错误&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;在全局监听 &lt;code&gt;error&lt;/code&gt;  事件&lt;/li&gt;
&lt;li&gt;通过 event.message 是否为  &lt;code&gt;Script error&lt;/code&gt;  来判断是否是跨域请求&lt;/li&gt;
&lt;li&gt;上报跨域请求错误&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;http-请求监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-请求监控&#34;&gt;#&lt;/a&gt; http 请求监控&lt;/h3&gt;
&lt;p&gt;我们通常需要监控 http 请求的各种信息， &lt;code&gt;请求地址&lt;/code&gt; ，  &lt;code&gt;方法&lt;/code&gt; ，  &lt;code&gt;状态码&lt;/code&gt; ，  &lt;code&gt;请求耗时&lt;/code&gt; ，  &lt;code&gt;请求体&lt;/code&gt; ，  &lt;code&gt;响应&lt;/code&gt; ， 从而在接口报错时及时发现，统计出流量大的后端服务，经常出问题的后端服务。&lt;/p&gt;
&lt;h4 id=&#34;xmlhttprequest-的劫持&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xmlhttprequest-的劫持&#34;&gt;#&lt;/a&gt; XMLHTTPRequest 的劫持：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;重写 xhr 对象的 &lt;code&gt;open&lt;/code&gt;  方法，在里面采集到请求的 url 和 method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写 xhr 对象的 &lt;code&gt;send&lt;/code&gt;  方法，在里面采集到请求的 body，并记录时间，为后续记录接口耗时做准备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监听 xhr 对象的 loadend 事件，然后从 xhr 对象中得到，状态码，状态码短语，response, 然后执行传递的函数来讲数据添加进 sdk 的 data 等待上报&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;proxyXmlHttp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;loadHandler&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;args&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;XMLHttpRequest&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; window &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XMLHttpRequest &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;function&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; oXMLHttpRequest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XMLHttpRequest&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;oXMLHttpRequest&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//oXMLHttpRequest 为原生的 XMLHttpRequest，可以用以 SDK 进行数据上报，区分业务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;oXMLHttpRequest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; oXMLHttpRequest&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;XMLHttpRequest&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 覆写 window.XMLHttpRequest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// eslint-disable-next-line new-cap&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; xhr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;oXMLHttpRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// eslint-disable-next-line @typescript-eslint/unbound-method&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; open&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; send &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; xhr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// eslint-disable-next-line @typescript-eslint/consistent-type-assertions&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; httpMetrics&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; HttpMetrics &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; HttpMetrics&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; url&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        httpMetrics&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;method &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; method&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        httpMetrics&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; url&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; method&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        httpMetrics&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;body &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; body &lt;span class=&#34;token operator&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        httpMetrics&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;requestTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        httpMetrics&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;requestTimeFormat &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;formatDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; body&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;loadend&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; status&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; statusText&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; response &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; xhr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        httpMetrics &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;httpMetrics&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          status&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          statusText&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          response&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; response &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          responseTime&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          responseTimeFormat&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;formatDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; loadHandler &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;function&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;httpMetrics&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; xhr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;前端监控需要注意的点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端监控需要注意的点&#34;&gt;#&lt;/a&gt; 前端监控需要注意的点：&lt;/h2&gt;
&lt;h3 id=&#34;数据的上报方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的上报方式&#34;&gt;#&lt;/a&gt; 数据的上报方式：&lt;/h3&gt;
&lt;h4 id=&#34;使用的上报方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用的上报方法&#34;&gt;#&lt;/a&gt; 使用的上报方法：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;优先使用 sendBeacon 方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是异步发送数据，不会阻塞页面的卸载和跳转&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可靠性很高，不会因为页面的关闭 or 跳转 而 终止发送&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虽然只支持 post 请求，但是用来发送埋点的统计数据，却足够了，也极为合适&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果浏览器不支持 sendBeacon 方法再降级使用 ajax 方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据的上报时机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的上报时机&#34;&gt;#&lt;/a&gt; 数据的上报时机：&lt;/h3&gt;
&lt;h4 id=&#34;需要实时上报的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需要实时上报的&#34;&gt;#&lt;/a&gt; 需要实时上报的：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;异常上报，需要实时上报&lt;/li&gt;
&lt;li&gt;pv，用户行为都是触发就上报&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;不需要实时上报的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不需要实时上报的&#34;&gt;#&lt;/a&gt; 不需要实时上报的&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;用户行为栈，http 请求记录都放到各自的一个队列里，满了再集中上报&lt;/li&gt;
&lt;li&gt;其他不会很多的数据在界面卸载前上报&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;当流量爆炸的时候怎么进行削峰限流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#当流量爆炸的时候怎么进行削峰限流&#34;&gt;#&lt;/a&gt; 当流量爆炸的时候，怎么进行削峰限流&lt;/h3&gt;
&lt;h4 id=&#34;1-简单方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-简单方法&#34;&gt;#&lt;/a&gt; 1. 简单方法：&lt;/h4&gt;
&lt;p&gt;直接丢弃百分之 20 的用户的数据，具体方法，Math.radom（）生成一个随机的方法，丢其小于 0.2 的用户的数据&lt;/p&gt;
&lt;h3 id=&#34;异常上报的时候需要根据异常的信息生成一个唯一性标识避免同一错误的重复上报&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常上报的时候需要根据异常的信息生成一个唯一性标识避免同一错误的重复上报&#34;&gt;#&lt;/a&gt; 异常上报的时候，需要根据异常的信息生成一个唯一性标识，避免同一错误的重复上报&lt;/h3&gt;
&lt;h2 id=&#34;前端监控提供的监控模块应该支持用户按需选择其需要的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端监控提供的监控模块应该支持用户按需选择其需要的&#34;&gt;#&lt;/a&gt; 前端监控提供的监控模块，应该支持用户按需选择其需要的：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;支持用户通过配置对象，按需选择它需要的性能监控，行为监控，异常监控，http 监控功能&lt;/li&gt;
&lt;li&gt;当用户开启性能监控的时候，应支持用户通过配置对象，按需选择自己需要收集的性能指标和关键时间段，缓存命中率&lt;/li&gt;
&lt;li&gt;当用户开启行为监控的时候，应支持用户通过配置对象，按需选择自己是否需要收集，pv，uv， 设备信息，界面信息，来源信息，路由跳转信息，用户行为栈，页面停留时间。&lt;/li&gt;
&lt;li&gt;当用户开启异常监控的时候应支持用户通过配置对象，按需选择自己是否需要 js 运行错误监控，资源加载错误监控，promise 错误监控，跨域错误监控，白屏错误监控&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/webpackKnowlege/</guid>
            <title>webpack八股文整理</title>
            <link>https://zimu-66ccff.github.io/webpackKnowlege/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="webpack" scheme="https://zimu-66ccff.github.io/tags/webpack/" />
            <category term="打包工具" scheme="https://zimu-66ccff.github.io/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/" />
            <pubDate>Wed, 13 Mar 2024 14:26:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-常见的-loader&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-常见的-loader&#34;&gt;#&lt;/a&gt; 1. 常见的 loader&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;资源加载处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file-loader&lt;/code&gt; : 通常用来处理图片和字体，用来将文件输出到一个文件夹中，代码中通过相对 url 来引用输出的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url-loader&lt;/code&gt; ：和 file-loader 类似，不同的是可以设定一个阈值，小于这个阈值的返回它的 base-64 形式编码，大的交给 file-loader 处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image-loader&lt;/code&gt; ：用来加载和压缩图片&lt;/li&gt;
&lt;li&gt;&lt;code&gt;svg-inline-loader&lt;/code&gt; ：用来将压缩后的 svg 内容注入到代码中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json-loader&lt;/code&gt; ：用来加载 json&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;代码加载处理转换&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ts-loader&lt;/code&gt; : 用来将 ts 转换成 js&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awesome-typescript-loader&lt;/code&gt; ：和 ts-loader 一样，但是性能比 ts-loader 好&lt;/li&gt;
&lt;li&gt;&lt;code&gt;babel-loader&lt;/code&gt; ：用来将 es6 的代码转换成 es5 的代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sass-loader&lt;/code&gt; ：用来将 sass 代码转换成 css 代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;less-loader&lt;/code&gt; ：用来将 less 代码转换成 css 代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postcss-loader&lt;/code&gt; ：用来加载扩展的 css 代码，支持使用下一代 css，可以配合 autoprefixer 来自动补齐 css3 前缀&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css-loader&lt;/code&gt; ：用来加载 css&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style-loader&lt;/code&gt; ：用来将 css 注入到 js 中，通过 dom 的形式去操作 css&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;代码检查&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tslint-loader&lt;/code&gt; ：用来检查 ts 代码的质量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eslint-loader&lt;/code&gt; ：用来检查 js 代码的质量&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;测试覆盖率&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;caverjs-loader&lt;/code&gt; ：用来加载测试的覆盖率&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;支持第三方框架 vue&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vue-loader&lt;/code&gt; ：用来加载 vue 的单文件组件&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;strong&gt;国际化&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i18-loader&lt;/code&gt; ：用于国际化&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cache-loader&lt;/code&gt; ：可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;strong&gt;调试&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source-map-loader&lt;/code&gt; : 生成对应的 map 文件，方便对应的断点调试&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-有哪些常见的-plugin你用过哪些-plugin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-有哪些常见的-plugin你用过哪些-plugin&#34;&gt;#&lt;/a&gt; 2. 有哪些常见的 Plugin？你用过哪些 Plugin？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;define-plugin&lt;/code&gt; ：定义环境变量 (Webpack4 之后指定 mode 会自动配置)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ignore-plugin&lt;/code&gt; ：忽略部分文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html-webpack-plugin&lt;/code&gt; ：简化 HTML 文件创建 (依赖于 html-loader)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web-webpack-plugin&lt;/code&gt; ：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uglifyjs-webpack-plugin&lt;/code&gt; ：不支持 ES6 压缩 (Webpack4 以前)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terser-webpack-plugin&lt;/code&gt; : 支持压缩 ES6 (Webpack4)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-parallel-uglify-plugin&lt;/code&gt; : 多进程执行代码压缩，提升构建速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mini-css-extract-plugin&lt;/code&gt; : 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代 extract-text-webpack-plugin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serviceworker-webpack-plugin&lt;/code&gt; ：为网页应用增加离线缓存功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean-webpack-plugin&lt;/code&gt; : 目录清理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speed-measure-webpack-plugin&lt;/code&gt; : 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; : 可视化 Webpack 输出文件的体积&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-loader-和-plugin-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-loader-和-plugin-的区别&#34;&gt;#&lt;/a&gt; 3. Loader 和 Plugin 的区别？&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;loader&lt;/code&gt; : 因为 webpack 本身只是针对 js 模块的打包器，所以本身只认识和加载 js 模块，而 loader 就是用来加载和转移其他模块的。本质上是一个函数，对内容进行转换，返回转换后的结果&lt;br /&gt;
 &lt;code&gt;plugin&lt;/code&gt; : plugin 是插件，用来扩展 webpack 的功能，会监听 webpack 生命周期中广播出的事件，从而做一切其他事情，扩展 webpack 的功能&lt;/p&gt;
&lt;h1 id=&#34;4-webpack-的构建流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-webpack-的构建流程&#34;&gt;#&lt;/a&gt; 4. webpack 的构建流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;初始化&lt;/code&gt; ：通过从配置文件和 shell 脚本中读取参数，得到最终的参数，加载插件，并实列化 compiler，调用 run 方法进行编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;编译&lt;/code&gt; ：从 entry 入口文件开始，利用配置的 loader 递归的加载并编译模块，并得到依赖关系&lt;/li&gt;
&lt;li&gt;&lt;code&gt;输出&lt;/code&gt; ：根据入口模块的依赖关系，组装一个个 chunk，最后打包成一个单独的文件，按照配置文件输出。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-如何优化-webpack-的构建速度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-如何优化-webpack-的构建速度&#34;&gt;#&lt;/a&gt; 5. 如何优化 webpack 的构建速度&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;多进程构建&lt;/code&gt; ： 使用 thread-loader 来实现多进程构建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代码压缩&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;多进程并行压缩 js 代码
&lt;ul&gt;
&lt;li&gt;webpack-paralle-uglifyjs-plugin&lt;/li&gt;
&lt;li&gt;uglifyjs-webpack-plugin 开启 paraller 参数&lt;/li&gt;
&lt;li&gt;terser-webpack-plugin 开启 parallel 参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过 mini-css-extra-plugin 将 css 代码提取到单独的文件，利用 css-loader 的 minimize 选项开启 cssnano 压缩 css 代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;图片压缩&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;使用 imagemin 库来压缩图片&lt;/li&gt;
&lt;li&gt;配置 image-loader 来压缩图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;缩小打包域&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通过 include，exclude 来缩小 loader 的范围&lt;/li&gt;
&lt;li&gt;通过 ignorePlugin 来忽略指定模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;利用cdn来引入一些小的基础包&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;利用 html-webpack-plugin 生成一个 html 文件，在这个 html 文件里将一些小的基础包通过 cdn 引入，不打包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;提取公共第三⽅库&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;SplitChunksPlugin 插件来进⾏公共模块抽取，利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;利用缓存提升二次构建速度&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;babel-loader 开启缓存&lt;/li&gt;
&lt;li&gt;terser-webpack-plugin 开启缓存&lt;/li&gt;
&lt;li&gt;使用 cache-loader&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tree shaking&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以通过在启动 webpack 时追加参数 --optimize-minimize 来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scope hoisting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-webpack-文件监听原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-webpack-文件监听原理&#34;&gt;#&lt;/a&gt; 6. webpack 文件监听原理&lt;/h1&gt;
&lt;p&gt;在发现源码发生变化时，自动重新构建出新的输出文件。&lt;br /&gt;
Webpack 开启监听模式，有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动 webpack 命令时，带上 --watch 参数&lt;/li&gt;
&lt;li&gt;在配置 webpack.config.js 中设置 watch:true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：每次需要手动刷新浏览器&lt;/p&gt;
&lt;p&gt;原理：轮询判断文件的最后编辑时间是否变化，如果某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等 aggregateTimeout 后再执行。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 默认 false，也就是不开启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    watchOptions &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 不监听的文件或者文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;ignored&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;node_modules&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 监听到变化后会等 aggregateTimeout 后再去执行，默认是 300ms&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;aggregateTimeout&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 判断文件是否发生变化时通过不停的询问指定文件有没有变化实现的，默认每秒问 1000 词&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;7-webpack-热更新原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-webpack-热更新原理&#34;&gt;#&lt;/a&gt; 7. webpack 热更新原理&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i0.imgs.ovh/2024/03/12/cAqtU.webp&#34; alt=&#34;HMR&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监视阶段
&lt;ul&gt;
&lt;li&gt;webpack 的 watch 模式会监视文件的变化，一旦文件有变化，就会对该文件重新编译打包，然后将重新编译打包后的代码存在一个 js 对象里&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt;  的中间件 &lt;code&gt;webpack-dev-middleware&lt;/code&gt;  会对代码进行监控，一旦有代码发生改变，就会通知 webpack 将代码打包到内存中&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;devServer.watchContentBase&lt;/code&gt;  设置为 &lt;code&gt;true&lt;/code&gt;  的时候，server 就会监视这些配置文件夹里面的静态文件的变化，一旦有变化就会让浏览器刷新也就是 &lt;code&gt;live reload&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传递阶段
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt;  和 &lt;code&gt;webpack-dev-server/client&lt;/code&gt;  客户端之间会维护一个 websockt 长连接，将 webpack 的信息传递给客户端，其中最主要的是传递新模块的 hash 值。&lt;/li&gt;
&lt;li&gt;因为客户端 &lt;code&gt;webpack-dev-server/client&lt;/code&gt;  不能请求更新的代码，所以它会将信息传递给 &lt;code&gt;webpack/hot/dev-server&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack/hot/dev-server&lt;/code&gt;  会将新模块的 hash 值与 &lt;code&gt;devSever&lt;/code&gt;  配置里面允许进行热更新模块的模块的 hash 值进行比对，如果一致，则说明需要热更新，就会把 hash 值进一步传递给 &lt;code&gt;HotModuleReplacementRuntime&lt;/code&gt; ，不过不一致则会直接刷新浏览器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HotModuleReplacementRuntime&lt;/code&gt;  会通过 &lt;code&gt;jsonpMainTemplateRuntime&lt;/code&gt;  来发送 Ajax 请求，来返回一个 json，这个 json 文件包括了所有要进行热更新的模块的 hash 值，然后会再发送一个 jsonp 请求，获取到最新的模块代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比对阶段
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HotModulePlugin&lt;/code&gt;  会对新旧模块进行对比，来决定是否进行热更新，在决定热更新后，就会更新模块，以及模块的依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;8-文件指纹是什么怎么用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-文件指纹是什么怎么用&#34;&gt;#&lt;/a&gt; 8. 文件指纹是什么？怎么用？&lt;/h1&gt;
&lt;p&gt;文件指纹是打包后输出的文件名的后缀。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hash&lt;/code&gt; ：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Chunkhash&lt;/code&gt; ：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Contenthash&lt;/code&gt; ：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/bfc/</guid>
            <title>bfc-块级格式化上下文</title>
            <link>https://zimu-66ccff.github.io/bfc/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="CSS" scheme="https://zimu-66ccff.github.io/categories/note/front-end/css/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="CSS" scheme="https://zimu-66ccff.github.io/tags/CSS/" />
            <category term="BFC" scheme="https://zimu-66ccff.github.io/tags/BFC/" />
            <pubDate>Sat, 25 Nov 2023 18:03:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;什么是-bfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是-bfc&#34;&gt;#&lt;/a&gt; 什么是 BFC&lt;/h1&gt;
&lt;p&gt;BFC 就是一个 css 布局区域，这个区域内元素布局有一定的规则&lt;/p&gt;
&lt;h1 id=&#34;哪些元素是-bfc怎么让元素成为-bfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哪些元素是-bfc怎么让元素成为-bfc&#34;&gt;#&lt;/a&gt; 哪些元素是 BFC（怎么让元素成为 BFC）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;body 标签就是一个 bfc&lt;/li&gt;
&lt;li&gt;inline-block 是 bfc&lt;/li&gt;
&lt;li&gt;float 的元素 是 bfc&lt;/li&gt;
&lt;li&gt;除了 static, relative 的定位元素 是 bfc&lt;/li&gt;
&lt;li&gt;overflow 设置为 hidden，auto 的元素 是 bfc&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;bfc-的规则bfc-的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bfc-的规则bfc-的特点&#34;&gt;#&lt;/a&gt; BFC 的规则，BFC 的特点&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;BFC 区域内的普通的块级元素垂直方向由上到下排列&lt;br /&gt;
我们平时写的 html 标签都在 body 标签里面，也就是都在 bfc 渲染区域内，所以要遵守这个规则，所以才会从上到下排列&lt;/li&gt;
&lt;li&gt;BFC 计算高度的时候，会计算浮动元素和定位元素的高度。&lt;br /&gt;
基于这一点，可以去除浮动带来的副作用（让父元素变成 bfc， 这样就会计算浮动元素的高度）&lt;/li&gt;
&lt;li&gt;BFC 渲染区域内的上下相邻的普通的块级元素垂直方向会出现外边距合并&lt;/li&gt;
&lt;li&gt;BFC 的样式不受外界影响&lt;br /&gt;
基于这个可以解决外边距合并的问题，只需要让其中一个元素成为 BFC，因为成为 BFC 的元素的外边距是自己的属性，也就是 BFC 自身的属性&lt;/li&gt;
&lt;li&gt;BFC 不会和浮动元素重叠&lt;br /&gt;
基于这一点可以做两栏布局，和三栏布局&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/whyUnocss/</guid>
            <title>为什么选择unocss</title>
            <link>https://zimu-66ccff.github.io/whyUnocss/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="CSS" scheme="https://zimu-66ccff.github.io/categories/note/front-end/css/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="CSS" scheme="https://zimu-66ccff.github.io/tags/CSS/" />
            <category term="原子化css" scheme="https://zimu-66ccff.github.io/tags/%E5%8E%9F%E5%AD%90%E5%8C%96css/" />
            <pubDate>Sat, 25 Nov 2023 17:20:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;什么是原子化-css&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是原子化-css&#34;&gt;#&lt;/a&gt; 什么是原子化 css&lt;/h1&gt;
&lt;p&gt;原子化 css 就是提供了很多 &lt;code&gt;preset class&lt;/code&gt; （预设类），就是提前写好了很多类名，这些类名都有自己的样式，可以直接用这些类名，就不需要写 css 了（提供的预设类是足够的，完全不需要写 css）&lt;/p&gt;
&lt;h1 id=&#34;早期原子化-css-带来的问题现在都解决了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#早期原子化-css-带来的问题现在都解决了&#34;&gt;#&lt;/a&gt; 早期原子化 css 带来的问题（现在都解决了）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;不能按需引入预设类，导致项目里有很多用不上的预设类，影响构建速度&lt;br /&gt;
&lt;strong&gt;解决方案&lt;/strong&gt;：现在可以构建阶段扫描代码，能够按照代码中的实际使用情况生成工具类，解决了原子类使 CSS 产物膨胀问题。&lt;/li&gt;
&lt;li&gt;不能使用提供的预设类来自定义类，导致不能完全脱离 css 代码&lt;br /&gt;
&lt;strong&gt;解决方案&lt;/strong&gt;：针对原子类堆叠降低可读性的问题，提供了  &lt;code&gt;@apply&lt;/code&gt;  语法支持在 CSS 中对多个原子类进行合并，与语义化 CSS 实现了很好的配合。&lt;/li&gt;
&lt;li&gt;没有插件提供，提升我们使用预设类的效率&lt;br /&gt;
&lt;strong&gt;解决方案&lt;/strong&gt;：现在都推出了 VSCode 插件，为编写原子类提供了充分的提示与自动补全。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/whySendSeacon/</guid>
            <title>前端监控中为什么选择sendBeacon来发送数据</title>
            <link>https://zimu-66ccff.github.io/whySendSeacon/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端监控" scheme="https://zimu-66ccff.github.io/categories/note/front-end/FEMonitoring/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端监控" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/" />
            <category term="sendSeacon" scheme="https://zimu-66ccff.github.io/tags/sendSeacon/" />
            <pubDate>Mon, 20 Nov 2023 11:11:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端监控中发送数据通常有什么样的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端监控中发送数据通常有什么样的问题&#34;&gt;#&lt;/a&gt; 前端监控中发送数据通常有什么样的问题&lt;/h1&gt;
&lt;p&gt;前端监控中通常尝试在卸载（unload）文档之前向 Web 服务器发送数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;过早的发送数据可能导致错过收集数据的机会。&lt;/li&gt;
&lt;li&gt;然而，对于开发者来说保证在文档卸载期间发送数据一直是一个困难。
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;unload&lt;/code&gt;  时，无法保证数据被可靠的稳定的发送出去了，因为浏览器通常会忽略在  &lt;code&gt;unload&lt;/code&gt;  事件处理器中产生的异步  &lt;code&gt;XMLHttpRequest。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;发送数据可能会迫使浏览器延迟卸载文档，并使得下一个导航出现的更晚。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;各种技术发送数据时的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各种技术发送数据时的优缺点&#34;&gt;#&lt;/a&gt; 各种技术发送数据时的优缺点&lt;/h1&gt;
&lt;h2 id=&#34;xmlhttprequest-或-fetch-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xmlhttprequest-或-fetch-api&#34;&gt;#&lt;/a&gt; XMLHttpRequest 或 Fetch API：&lt;/h2&gt;
&lt;h3 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;支持各种请求方法： &lt;code&gt; XMLHttpRequest&lt;/code&gt;  和  &lt;code&gt;Fetch API&lt;/code&gt;  支持多种请求方法，包括  &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt;  等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;同步请求可能阻塞页面： 如果在页面卸载或跳转时同步发送请求，可能会阻塞页面的卸载或跳转，影响用户体验。&lt;/li&gt;
&lt;li&gt;不适用于页面关闭时的异步请求：浏览器通常会忽略在  &lt;code&gt;unload&lt;/code&gt;  事件处理器中产生的异步  &lt;code&gt;XMLHttpRequest。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;image-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#image-对象&#34;&gt;#&lt;/a&gt; image 对象&lt;/h2&gt;
&lt;h3 id=&#34;优点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点-2&#34;&gt;#&lt;/a&gt; 优点：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;简单： 通过创建 Image 对象，可以简单地发送 GET 请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;缺点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点-2&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;仅支持 GET 请求： 由于是通过图片的 src 属性发送请求，只能发送 GET 请求。&lt;/li&gt;
&lt;li&gt;不可靠： 无法确定请求是否成功，不能获得服务器的响应状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sendbeacon&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sendbeacon&#34;&gt;#&lt;/a&gt; sendBeacon&lt;/h2&gt;
&lt;h3 id=&#34;优点-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点-3&#34;&gt;#&lt;/a&gt; 优点：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;异步方式发送请求：  &lt;code&gt;sendBeacon&lt;/code&gt;  是异步的，不会阻塞页面的卸载或者跳转，适用于页面关闭时仍需要发送统计数据的场景。&lt;/li&gt;
&lt;li&gt;可靠性： 由于是浏览器在后台默默处理，不会因为页面的关闭或者跳转而中断发送。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;缺点-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点-3&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;仅支持  &lt;code&gt;POST&lt;/code&gt;  请求：  &lt;code&gt;sendBeacon&lt;/code&gt;  只支持使用  &lt;code&gt;POST&lt;/code&gt;  方法发送数据，因此不适用于所有类型的请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;前端监控中为什么选择-sendbeacon-来发送数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端监控中为什么选择-sendbeacon-来发送数据&#34;&gt;#&lt;/a&gt; 前端监控中为什么选择 sendBeacon 来发送数据&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;是异步发送数据，不会阻塞页面的卸载和跳转&lt;/li&gt;
&lt;li&gt;可靠性很高，不会因为页面的关闭 or 跳转 而 终端发送&lt;/li&gt;
&lt;li&gt;虽然只支持 &lt;code&gt;post&lt;/code&gt;  请求，但是用来发送埋点的统计数据，却足够了，也极为合适&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;sendbeacon-使用方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sendbeacon-使用方法&#34;&gt;#&lt;/a&gt; sendBeacon 使用方法&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;navigator.sendBeacon(url, data);&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;url&lt;/code&gt; : 上报地址（接口地址）&lt;br /&gt;
 &lt;code&gt;data&lt;/code&gt; ： 可以是 &lt;code&gt;ArrayBufferView&lt;/code&gt;  , &lt;code&gt;Blob&lt;/code&gt; ,  &lt;code&gt;DOMString&lt;/code&gt; ,  &lt;code&gt;Formdata&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据官方规范，需要  &lt;code&gt;request header&lt;/code&gt;  为 CORS-safelisted-request-header，在这里则需要保证  &lt;code&gt;Content-Type &lt;/code&gt; 为以下三种之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们一般会用到 DOMString , Blob 和 Formdata 这三种对象作为数据发送到后端，下面以这三种方式为例进行说明。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; queryString &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;query-string&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 1. DOMString 类型，该请求会自动设置请求头的 Content-Type 为 text/plain&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;reportData&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  navigator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sendBeacon&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 2. 如果用 Blob 发送数据，这时需要我们手动设置 Blob 的 MIME type，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 一般设置为 application/x-www-form-urlencoded。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 然后可以用 query-string 库来做编吗将 data 编码成 query-string 格式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;reportData&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; blob &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Blob&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    queryString&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;application/x-www-form-urlencoded&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  navigator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sendBeacon&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; blob&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 3. 发送的是 Formdata 类型，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 此时该请求会自动设置请求头的 Content-Type 为 multipart/form-data。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;reportData&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; formData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FormData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; value &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;string&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//formData 只能 append string 或 Blob&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    formData&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  navigator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sendBeacon&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; formData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/globLearn/</guid>
            <title>glob语法详解</title>
            <link>https://zimu-66ccff.github.io/globLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="glob" scheme="https://zimu-66ccff.github.io/tags/glob/" />
            <pubDate>Thu, 16 Nov 2023 18:55:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础语法&#34;&gt;#&lt;/a&gt; 基础语法&lt;/h1&gt;
&lt;h2 id=&#34;分隔符和片段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分隔符和片段&#34;&gt;#&lt;/a&gt; 分隔符和片段&lt;/h2&gt;
&lt;h3 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;分隔符是・，通过・得到的数组每一项是片段。&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src/index.js&lt;/code&gt;  有两个片段，分别是  &lt;code&gt;src&lt;/code&gt;  和  &lt;code&gt;index.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/**/*.js&lt;/code&gt;  有三个片段，分别是 &lt;code&gt; src&lt;/code&gt; 、 &lt;code&gt;**&lt;/code&gt;  和  &lt;code&gt;*.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单个星号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单个星号&#34;&gt;#&lt;/a&gt; 单个星号&lt;/h2&gt;
&lt;h3 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;单个星号  &lt;code&gt;*&lt;/code&gt;  用于匹配单个片段中的零个或多个字符。&lt;/p&gt;
&lt;h3 id=&#34;示例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-2&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src/*.js&lt;/code&gt;  表示 &lt;code&gt;src&lt;/code&gt;  目录下所有以  &lt;code&gt;js&lt;/code&gt;  结尾的文件，但是不能匹配  &lt;code&gt;src &lt;/code&gt; 子目录中的文件，例如  &lt;code&gt;src/login/login.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/*/.bashrc &lt;/code&gt; 匹配所有用户的 .bashrc 文件&lt;div class=&#34;note danger&#34;&gt;
&lt;p&gt;需要注意的是， &lt;code&gt;*&lt;/code&gt;  不能匹配分隔符  &lt;code&gt;/&lt;/code&gt; ，也就是说不能跨片段匹配字符。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问号&#34;&gt;#&lt;/a&gt; 问号&lt;/h2&gt;
&lt;h3 id=&#34;概念-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-3&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;问号  &lt;code&gt;?&lt;/code&gt;  匹配单个片段中的单个字符。&lt;/p&gt;
&lt;h3 id=&#34;示例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-3&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test/?at.js &lt;/code&gt; 匹配形如  &lt;code&gt;test/cat.js&lt;/code&gt; 、 &lt;code&gt;test/bat.js&lt;/code&gt;  等所有 3 个字符且后两位是  &lt;code&gt;at&lt;/code&gt;  的 js 文件，但是不能匹配  &lt;code&gt;test/flat.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/index.??&lt;/code&gt;  匹配  &lt;code&gt;src&lt;/code&gt;  目录下以  &lt;code&gt;index&lt;/code&gt;  打头，后缀名是两个字符的文件，例如可以匹配  &lt;code&gt;src/index.js &lt;/code&gt; 和  &lt;code&gt;src/index.md&lt;/code&gt; ，但不能匹配  &lt;code&gt;src/index.jsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;中括号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中括号&#34;&gt;#&lt;/a&gt; 中括号&lt;/h2&gt;
&lt;h3 id=&#34;概念-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-4&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;同样是匹配单个片段中的单个字符，但是字符集只能从括号内选择，如果字符集内有  &lt;code&gt;-&lt;/code&gt; ，表示范围。&lt;/p&gt;
&lt;h3 id=&#34;示例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-4&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test/[bc]at.js &lt;/code&gt; 只能匹配  &lt;code&gt;test/bat.js&lt;/code&gt;  和  &lt;code&gt;test/cat.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test/[c-f]at.js&lt;/code&gt;  能匹配 &lt;code&gt; test/cat.js&lt;/code&gt; 、 &lt;code&gt;test/dat.js&lt;/code&gt; 、 &lt;code&gt;test/eat.js&lt;/code&gt;  和  &lt;code&gt;test/fat.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;惊叹号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#惊叹号&#34;&gt;#&lt;/a&gt; 惊叹号&lt;/h2&gt;
&lt;h3 id=&#34;概念-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-5&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;表示取反，即排除那些去掉惊叹号之后能够匹配到的文件。&lt;/p&gt;
&lt;h3 id=&#34;示例-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-5&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;test/[!bc]at.js&lt;/code&gt;  不能匹配  &lt;code&gt;test/bat.js&lt;/code&gt;  和  &lt;code&gt;test/cat.js&lt;/code&gt; ，但是可以匹配  &lt;code&gt;test/fat.js&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;!test/tmp/**&lt;/code&gt;  排除  &lt;code&gt;test/tmp&lt;/code&gt;  目录下的所有目录和文件&lt;/p&gt;
&lt;h1 id=&#34;扩展语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展语法&#34;&gt;#&lt;/a&gt; 扩展语法&lt;/h1&gt;
&lt;h2 id=&#34;两个星号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两个星号&#34;&gt;#&lt;/a&gt; 两个星号&lt;/h2&gt;
&lt;h3 id=&#34;概念-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-6&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;两个星号  &lt;code&gt;**&lt;/code&gt;  可以跨片段匹配零个或多个字符，也就是说  &lt;code&gt;**&lt;/code&gt;  是递归匹配所有文件和目录的，如果后面有分隔符，即  &lt;code&gt;**/ &lt;/code&gt; 的话，则表示只递归匹配所有目录（不含隐藏目录）。&lt;/p&gt;
&lt;h3 id=&#34;示例-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-6&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log/**&lt;/code&gt;  匹配  &lt;code&gt;/var/log&lt;/code&gt;  目录下所有文件和文件夹，以及文件夹里面所有子文件和子文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/**/*.log&lt;/code&gt;  匹配  &lt;code&gt;/var/log&lt;/code&gt;  及其子目录下的所有以 .log 结尾的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/*/.ssh/**/*.key&lt;/code&gt;  匹配所有用户的  &lt;code&gt;.ssh&lt;/code&gt;  目录及其子目录内的以  &lt;code&gt;.key&lt;/code&gt;  结尾的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大括号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大括号&#34;&gt;#&lt;/a&gt; 大括号&lt;/h2&gt;
&lt;h3 id=&#34;概念-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-7&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;匹配大括号内的所有模式，模式之间用逗号进行分隔，支持大括号嵌套，支持用  &lt;code&gt;..&lt;/code&gt;  匹配连续的字符，即  &lt;code&gt;&amp;#123;start..end&amp;#125;&lt;/code&gt;  语法。&lt;/p&gt;
&lt;h3 id=&#34;示例-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-7&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.&amp;#123;png,jp&amp;#123;,e&amp;#125;g&amp;#125;&lt;/code&gt;  匹配  &lt;code&gt;a.png&lt;/code&gt; 、 &lt;code&gt;a.jpg&lt;/code&gt; 、 &lt;code&gt;a.jpeg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;a..c&amp;#125;&amp;#123;1..2&amp;#125;&lt;/code&gt;  匹配  &lt;code&gt;a1`` a2&lt;/code&gt;   &lt;code&gt;b1&lt;/code&gt;   &lt;code&gt;b2 ``c1&lt;/code&gt;   &lt;code&gt;c2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;注意： &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  与  &lt;code&gt;[]&lt;/code&gt;  有一个很重要的区别：如果匹配的文件不存在， &lt;code&gt;[]&lt;/code&gt;  会失去模式的功能，变成一个单纯的字符串，而 &lt;code&gt; &amp;#123;&amp;#125;&lt;/code&gt;  依然可以展开。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;小括号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小括号&#34;&gt;#&lt;/a&gt; 小括号&lt;/h2&gt;
&lt;h3 id=&#34;概念-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-8&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;小括号必须跟在 &lt;code&gt; ?&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;!&lt;/code&gt;  后面使用，且小括号里面的内容是一组以  &lt;code&gt;| &lt;/code&gt; 分隔符的模式集合，例如： &lt;code&gt;abc|a?c|ac*&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;示例-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-8&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?(pattern|pattern|pattern)&lt;/code&gt; ：匹配 0 次或 1 次给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*(pattern|pattern|pattern)&lt;/code&gt; ：匹配 0 次或多次给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+(pattern|pattern|pattern)&lt;/code&gt; ：匹配 1 次或多次给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@(pattern|pattern|pattern)&lt;/code&gt; ：严格匹配给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!(pattern|pattern|pattern)&lt;/code&gt; ：匹配非给定的模式&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/gitLearn/</guid>
            <title>git命令详解</title>
            <link>https://zimu-66ccff.github.io/gitLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="git" scheme="https://zimu-66ccff.github.io/tags/git/" />
            <pubDate>Thu, 16 Nov 2023 17:39:47 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;创建本地-git-仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建本地-git-仓库&#34;&gt;#&lt;/a&gt; 创建本地 git 仓库&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;  会在当前目录下创建一个.git 隐藏文件夹&lt;/p&gt;
&lt;h1 id=&#34;将本地仓库和远程仓库相关联&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将本地仓库和远程仓库相关联&#34;&gt;#&lt;/a&gt; 将本地仓库和远程仓库相关联&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add origin &amp;lt;registry-url&amp;gt;&lt;/code&gt;  将本地仓库和远程仓库相关联&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;  查看关联的远程仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;将本地对应的代码提交到暂存区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将本地对应的代码提交到暂存区&#34;&gt;#&lt;/a&gt; 将本地对应的代码提交到暂存区：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;file&amp;gt; &lt;/code&gt; 将指定的 file 提交到暂存区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add . &lt;/code&gt; 将所有有变动的文件提交到暂存区&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;将暂存区的代码提交到本地-git-仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将暂存区的代码提交到本地-git-仓库&#34;&gt;#&lt;/a&gt; 将暂存区的代码提交到本地 git 仓库：&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git commit -m &#39;&amp;lt;commit-msg&amp;gt;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;查看文件状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看文件状态&#34;&gt;#&lt;/a&gt; 查看文件状态&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;  可以查看哪些文件被修改了，哪些文件提交到暂存区了但是还没有 commit&lt;/p&gt;
&lt;h1 id=&#34;提交本地-git-仓库代码到远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提交本地-git-仓库代码到远程仓库&#34;&gt;#&lt;/a&gt; 提交本地 git 仓库代码到远程仓库:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;  会将当前分支的最新的 commit 提交到远程仓库对应的分支，然后本地的对应的远程分支 ( &lt;code&gt;remotes/origin/对应当前分支名&lt;/code&gt; ) 也会自动更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin &amp;lt;source&amp;gt; &lt;/code&gt; 会将本地的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 提交到远程仓库对应的分支，然后本地的对应的远程分支（ &lt;code&gt;remotes/origin/&amp;lt;source&amp;gt;&lt;/code&gt; ）也会自动更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin &amp;lt;source&amp;gt;:&amp;lt;destination&amp;gt;&lt;/code&gt;  会将本地的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 提交到远程仓库的 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt;  然后本地对应的远程分支 ( &lt;code&gt;remotes/origin&amp;lt;destination&amp;gt;&lt;/code&gt; ) 也会自动更新。 如果 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt; 不存在，会在远程仓库自动创建 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt; ，然后在本地创建对应的远程分支 ( &lt;code&gt;remotes/origin/&amp;lt;destination&amp;gt;&lt;/code&gt; ) 并更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin :&amp;lt;destination&amp;gt; &lt;/code&gt; 会在远程仓库直接删除 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  (个人感觉这样设计是因为 push 了一个空给 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt; ，所以 git 就理解为你要删除 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt; )&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;拉取远程仓库代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉取远程仓库代码&#34;&gt;#&lt;/a&gt; 拉取远程仓库代码：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt;  会拉取远程仓库的&lt;ins&gt;所有分支&lt;/ins&gt;各自对应的最新代码 将远程仓库所有的分支各自的最新的 commit 添加到对应的本地的各个远程分支（ &lt;code&gt;remotes/origin/\*&lt;/code&gt; ） &lt;ins&gt;但是不会合并分支&lt;/ins&gt;。&lt;ins&gt;也就是说 只需一次命令 就可以将远程仓库的所有的最新更新给拉下来&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch origin &amp;lt;source&amp;gt;&lt;/code&gt;  拉取远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 然后添加到本地对应的远程分支（ &lt;code&gt;remotes/origin/source&lt;/code&gt; ）但是不会合并分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch origin &amp;lt;source&amp;gt;:&amp;lt;destination&amp;gt; &lt;/code&gt; 拉取远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 然后添加到本地的 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt;  但是不会合并分支。如果 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  不存在，会在本地以当前分支为基本自动创建 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt; 。&lt;br /&gt;
 &lt;code&gt;git fetch origin :&amp;lt;destination&amp;gt;&lt;/code&gt;  会在本地新建一个 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt;  （感觉这样设计是因为，相当于 fetch 了一个空到本地，所以 git 就会理解为你要新建一个分支）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;拉取远程仓库代码并和本地的分支做一个合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉取远程仓库代码并和本地的分支做一个合并&#34;&gt;#&lt;/a&gt; 拉取远程仓库代码，并和本地的分支做一个合并：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;  其实就是  &lt;code&gt;git fetch&lt;/code&gt;  和  &lt;code&gt;git merge&lt;/code&gt;  的缩写，在  &lt;code&gt;git fetch&lt;/code&gt;  的基础上 会将远程分支（ &lt;code&gt;remotes/origin/对应当前分支名&lt;/code&gt; ）和本地当前分支做一个合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin &amp;lt;source&amp;gt;&lt;/code&gt;  会拉取远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit, 然后添加到对应的本地的远程分支上面 ( &lt;code&gt;remotes/origin/&amp;lt;source&amp;gt;&lt;/code&gt; )，再将这个远程分支和本地当前分支做一个合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin &amp;lt;source&amp;gt;:&amp;lt;destination&amp;gt;&lt;/code&gt;  会将远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新的 commit 添加到本地的 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  分支上面（如果 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  不存在，会自动创建），然后将 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  合并到当前分支。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;创建分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建分支&#34;&gt;#&lt;/a&gt; 创建分支：&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git branch &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;查看分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看分支&#34;&gt;#&lt;/a&gt; 查看分支：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;  查看本地分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -r&lt;/code&gt;  查看远程分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -a&lt;/code&gt;  查看所有分支&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;删除分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除分支&#34;&gt;#&lt;/a&gt; 删除分支：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch -d &amp;lt;branch-name&amp;gt;&lt;/code&gt;  当被删除分支有新内容没有被合并的时候，使用 - d，会提示该分支有新内容没有被合并，不执行删除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -D &amp;lt;branch-name&amp;gt;&lt;/code&gt;  当被删除分支有新内容没有被合并的时候，使用 - D，会直接删除&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;切换分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切换分支&#34;&gt;#&lt;/a&gt; 切换分支:&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;创建并切换分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建并切换分支&#34;&gt;#&lt;/a&gt; 创建并切换分支:&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;将分支移动到指定-commit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将分支移动到指定-commit&#34;&gt;#&lt;/a&gt; 将分支移动到指定 commit：&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git branch -f &amp;lt;branch-name&amp;gt; &amp;lt;commit-hash&amp;gt;&lt;/code&gt; &lt;br /&gt;
 以&lt;ins&gt;相对移动&lt;/ins&gt;的方式将分支移动到指定 commit&lt;br /&gt;
 &lt;code&gt;git branch -f &amp;lt;branch-name&amp;gt; HEAD&amp;#123;^[num], ~[num]&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;代码回滚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码回滚&#34;&gt;#&lt;/a&gt; 代码回滚&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset --mixed &amp;lt;commit-hash&amp;gt;&lt;/code&gt;   &lt;code&gt;git reset &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  默认就是这个命令，将&lt;ins&gt;暂存区， 本地 git 仓库&lt;/ins&gt;回滚到指定 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  将&lt;ins&gt;本地代码，暂存区，本地 git 仓库&lt;/ins&gt;回滚到指定 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --soft &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  将&lt;ins&gt;本地 git 仓库&lt;/ins&gt;回滚到指定 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git revert &amp;lt;commit-hash&amp;gt; &lt;/code&gt; 会在当前分支新添加一个 commit 这个 commit 的作用是抵消之前的对应的 commit，也可以用于回滚分支。&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgs.ovh/2023/11/16/ndPCv.png&#34; alt=&#34;ndPCv.png&#34; /&gt;&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;从&lt;ins&gt;数据安全&lt;/ins&gt;上角度， &lt;code&gt;revert&lt;/code&gt;  比  &lt;code&gt;reset&lt;/code&gt;  安全，因为它的操作可以回溯，反转了还可以倒回来。 &lt;code&gt;reset &lt;/code&gt; 比较彻底，是直接丢弃了，不过可以考虑想第一个例子中创建一个备份分支来保证安全。&lt;br /&gt;
从&lt;ins&gt;分支历史&lt;/ins&gt;的长期维护角度， &lt;code&gt;reset&lt;/code&gt;  的历史比较干净， &lt;code&gt;revert &lt;/code&gt; 的反转提交没多大意义，毕竟很少有需求让你滚来滚去的。&lt;br /&gt;
在被撤销提交，不在分支顶端的场景上， &lt;code&gt;reset&lt;/code&gt;  无法使用， &lt;code&gt;revert&lt;/code&gt;  可以做到，。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;合并分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并分支&#34;&gt;#&lt;/a&gt; 合并分支：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git merge &amp;lt;branch-name&amp;gt;&lt;/code&gt;  将分支合并到当前分支，会在当前分支新增一个 commit（用来合并需要合并的分支）并且当前分支会自动更新 &lt;ins&gt;不是线性的&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase &amp;lt;target-branch-name&amp;gt;&lt;/code&gt;  将当前分支有的，但是目标分支没有的 commit 直接线性的添加到目标分支 但是目标分支不会自动更新 &lt;ins&gt;是线性的&lt;/ins&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgs.ovh/2023/11/16/nYGdI.png&#34; alt=&#34;gitlearn01.png&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;合并指定的-commit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并指定的-commit&#34;&gt;#&lt;/a&gt; 合并指定的 commit：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git check-chery &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  将指定的 commit 添加到当前分支 可以一次添加多个  &lt;code&gt;commit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;切换-head&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切换-head&#34;&gt;#&lt;/a&gt; 切换 HEAD:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;commit hash&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout HEAD&amp;#123;^[num], ~[num]&amp;#125; &lt;/code&gt; 注：^ 后面的 num 指的是切换到第几个 parent commit (横向的) ~ 后面的 num 是指以当前 HEAD 为参考，切换到上面第几个 commit&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;查看-head-指针的移动记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看-head-指针的移动记录&#34;&gt;#&lt;/a&gt; 查看 HEAD 指针的移动记录&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;查看分支历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看分支历史&#34;&gt;#&lt;/a&gt; 查看分支历史&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;  显示 commit 的 SHA1 值，创建作者和时间，提交信息，会多行显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --oneline&lt;/code&gt;  只显示提交的 SHA1 值和提交信息，SHA1 还是缩短显示前几位，只在一行显示&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;推荐一个特别好的-git-的交互式学习网站&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#推荐一个特别好的-git-的交互式学习网站&#34;&gt;#&lt;/a&gt; 推荐一个特别好的 git 的交互式学习网站&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcv&#34;&gt;https://learngitbranching.js.org/&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/npmLink/</guid>
            <title>npm link 详解</title>
            <link>https://zimu-66ccff.github.io/npmLink/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="npm link" scheme="https://zimu-66ccff.github.io/tags/npm-link/" />
            <pubDate>Sun, 12 Nov 2023 21:20:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;npm-link-的应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm-link-的应用场景&#34;&gt;#&lt;/a&gt; npm link 的应用场景&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;开发脚手架时，在本地调试命令&lt;br /&gt;
开发脚手架时，在项目所在目录，执行 &lt;code&gt;npm link&lt;/code&gt;  命令，就可以在全局执行项目的 &lt;code&gt;package.json&lt;/code&gt;  文件的 &lt;code&gt;bin&lt;/code&gt;  属性里面配置的命令&lt;/li&gt;
&lt;li&gt;可以在项目里，直接使用本地包，从而对本地包进行调试&lt;br /&gt;
当我们开发包 &lt;code&gt;a&lt;/code&gt;  时，可以在发布前直接 &lt;code&gt;npm link&lt;/code&gt; ，将包 &lt;code&gt;a&lt;/code&gt;  链接到全局，然后在项目里 &lt;code&gt;npm link a&lt;/code&gt; ，这样就可以在项目里面使用包 &lt;code&gt;a&lt;/code&gt; ，从而对包进行调试&lt;/li&gt;
&lt;li&gt;MultiRepo 多仓库多模块应用 本地开发时，多模块之间共享代码的一种解决方案&lt;br /&gt;
当仓库 &lt;code&gt;a&lt;/code&gt;  要使用仓库 &lt;code&gt;b&lt;/code&gt;  提供的代码的时候，可以在 &lt;code&gt;b&lt;/code&gt;  仓库目录下， &lt;code&gt;npm link&lt;/code&gt;  从而将仓库 &lt;code&gt;b&lt;/code&gt;  链接到全局，然后再在仓库 &lt;code&gt;a&lt;/code&gt;  里执行 &lt;code&gt;npm link b&lt;/code&gt; ， 然后就可以在 &lt;code&gt;a&lt;/code&gt;  里导入 &lt;code&gt;b&lt;/code&gt;  了。从而实现多仓库共享代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;本地包里执行-npm-link-发生了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地包里执行-npm-link-发生了什么&#34;&gt;#&lt;/a&gt; 本地包里执行 npm link 发生了什么？&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 npm 的全局模块目录（node 安装目录下的 &lt;code&gt;node_modules&lt;/code&gt; ）下会创建一个 &lt;code&gt;软连接（符号链接）&lt;/code&gt; ，指向本地包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据 &lt;code&gt;bin&lt;/code&gt;  配置的命令，在可执行目录下创建一个符号链接，指向 &lt;code&gt;bin&lt;/code&gt;  里配置的可执行文件。&lt;br /&gt;
例如，如果你的 &lt;code&gt; package.json&lt;/code&gt;  文件中有如下配置：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your-project&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;version&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;your-script&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./bin/your-script.js&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行  &lt;code&gt;npm link&lt;/code&gt;  后，将在全局的可执行文件目录下创建一个名为  &lt;code&gt;your-script&lt;/code&gt;  的符号链接，指向你项目中  &lt;code&gt;./bin/your-script.js&lt;/code&gt;  文件。所以当我们在命令行里执行 &lt;code&gt;your-script&lt;/code&gt;  的时候，实际相当于执行了 &lt;code&gt;./bin/your-script.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;当我们全局安装包的时候，对 &lt;code&gt;bin&lt;/code&gt;  的处理也是类似的，在全局的可执行目录下创建一个符号链接，指向 npm 全局模块目录下我们安装的全局包对应的可执行文件&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;项目里面执行-npm-link-package-name-发生了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目里面执行-npm-link-package-name-发生了什么&#34;&gt;#&lt;/a&gt; 项目里面执行  &lt;code&gt;npm link &amp;lt;package-name&amp;gt;&lt;/code&gt;  发生了什么&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在项目的 &lt;code&gt;node_modules&lt;/code&gt;  目录下创建一个符号链接，指向 npm 的 &lt;code&gt;全局模块目录&lt;/code&gt; 下对应的符号链接（这个符号链接是我们在对应的本地包里执行  &lt;code&gt;npm link&lt;/code&gt;  的时候创建的）。然后当我们导入这个包的时候，就会在项目的 &lt;code&gt;node_modules&lt;/code&gt;  里找，从而就会找到对应的符号链接，然后这个符号链接又指向 npm 全局模块目录下的符号链接，而这个符号链接又指向本地包文件，从而正确的导入和使用。&lt;/li&gt;
&lt;li&gt;在项目的 &lt;code&gt;node_modules/.bin&lt;/code&gt;  目录下根据对应本地包的 &lt;code&gt;bin&lt;/code&gt;  创建对应的符号链接指向 npm 全局模块的对应的符号链接的可执行文件。&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;当我们使用 &lt;code&gt;npx&lt;/code&gt;  执行命令的时候，实际上是在 &lt;code&gt;node_modules/.bin&lt;/code&gt;  找的对应的可执行文件执行的&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/whyMonorepo/</guid>
            <title>为什么选择monorepo架构</title>
            <link>https://zimu-66ccff.github.io/whyMonorepo/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="monorepo" scheme="https://zimu-66ccff.github.io/tags/monorepo/" />
            <pubDate>Fri, 10 Nov 2023 08:14:05 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;monolith-和-multirepo-存在什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monolith-和-multirepo-存在什么问题&#34;&gt;#&lt;/a&gt; Monolith 和 MultiRepo 存在什么问题&lt;/h1&gt;
&lt;h2 id=&#34;monolith-单仓库巨石应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monolith-单仓库巨石应用&#34;&gt;#&lt;/a&gt; Monolith 单仓库巨石应用&lt;/h2&gt;
&lt;p&gt;用一个 git 仓库来维护项目代码，随着业务复杂度的上升，代码量会急剧上升，最终项目会变得十分庞大，复杂， 难以继续维护，更新迭代，并且构建效率也会降低。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在的问题：
&lt;ol&gt;
&lt;li&gt;代码耦合度非常高，可能改了这里，又会影响那里，并且当我们排查问题时，难度也变得非常高，可能很多时间都花在了找代码上面。&lt;/li&gt;
&lt;li&gt;代码量非常大，项目构建的效率低下，明明只改了一点点代码，却要重新构建整个代码，构建花费的时间非常长。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;multirepo-多仓库多模块应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#multirepo-多仓库多模块应用&#34;&gt;#&lt;/a&gt; MultiRepo 多仓库多模块应用&lt;/h2&gt;
&lt;p&gt;将一个项目拆解为多个多个模块，放在多个 git 仓库里面管理，直接的对项目进行了解耦，每个单独的模块都可以独立的编码，测试，发布。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在的问题
&lt;ol&gt;
&lt;li&gt;各个仓库之间的代码共享非常困难，粗糙，一般想要进行代码的共享只有如下几种方式：
&lt;ol&gt;
&lt;li&gt;将需要共享的代码复制粘贴到自己的仓库里&lt;br /&gt;
这种方式会明显的造成&lt;ins&gt;代码体积变大&lt;/ins&gt;，从而&lt;ins&gt;影响构建效率&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;将需要共享的代码单独维护成一个仓库，发布成 npm 包，&lt;br /&gt;
这样方式很麻烦，&lt;ins&gt;每次都需要，重新发布 npm 包，然后在使用了这些共享的代码的仓库里 &lt;code&gt;npm install&lt;/code&gt;  更新 npm 包&lt;/ins&gt;。&lt;br /&gt;
&lt;ins&gt;并且当维护的 npm 包出现了 &lt;code&gt;break change&lt;/code&gt;  的时候，只有等到 npm 包发布，并且各个仓库更新了 npm 包的时候，才能发现问题，问题发现不及时，导致排查问题，解决问题，十分困难&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;npm link&lt;/code&gt;  来实现本地开发的时候共享代码，这种方式相比上面两种方式好了很多，但是依旧需要手动在需要共享代码的仓库里 &lt;code&gt;npm link&lt;/code&gt; ，在需要使用其他仓库共享的代码的仓库里 &lt;code&gt;npm link &amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;版本管理很困难，当一个仓库有更新，需要发布的时候，需要在其他所有依赖这个仓库的仓库里执行 &lt;code&gt;npm install&lt;/code&gt;  来使用这个刚更新仓库的最新版本。&lt;/li&gt;
&lt;li&gt;无法积累一个统一的工程化配置，从而复用，每次有新的项目的时候都要重新配置一次几乎一摸一样的， &lt;code&gt;ci&lt;/code&gt; , &lt;code&gt;lint&lt;/code&gt; ,  &lt;code&gt;构建&lt;/code&gt; ，等流程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;采用-monorepo-架构-可以解决这些问题吗会有哪些好处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#采用-monorepo-架构-可以解决这些问题吗会有哪些好处&#34;&gt;#&lt;/a&gt; 采用 Monorepo 架构 可以解决这些问题吗？会有哪些好处&lt;/h1&gt;
&lt;h2 id=&#34;将-monolith-巨石应用-换成-monorepo-架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将-monolith-巨石应用-换成-monorepo-架构&#34;&gt;#&lt;/a&gt; 将 Monolith 巨石应用 换成 Monorepo 架构&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将巨石应用，分为了不同的模块，在一定程度上进行了&lt;ins&gt;解耦&lt;/ins&gt;，明显的降低了耦合性，既&lt;ins&gt;降低了维护成本（找代码，改代码）&lt;/ins&gt;，&lt;ins&gt;也降低了新人上手门槛&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;当代码有更新，有变动的时候，只需要进行&lt;ins&gt;增量构建&lt;/ins&gt;，只构建，发布，有变动的模块和使用了有变动的模块的模块，而不需要构建所有的代码，大大提升了&lt;ins&gt;构建效率&lt;/ins&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;将-multirepo-多仓库多模块应用-换成-monorepo-架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将-multirepo-多仓库多模块应用-换成-monorepo-架构&#34;&gt;#&lt;/a&gt; 将 MultiRepo 多仓库多模块应用 换成 Monorepo 架构&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;模块之间的代码共享，更加&lt;ins&gt;便捷&lt;/ins&gt;，&lt;ins&gt;安全&lt;/ins&gt;，&lt;ins&gt;问题发现更加及时&lt;/ins&gt;。所有的模块都在一个仓库里，可以很轻松的使用维护的对外共享代码的模块共享的代码，并且当对外共享代码的模块出现问题时，在&lt;ins&gt;开发阶段&lt;/ins&gt;就可以及时发现，解决，而不是像 &lt;code&gt;MultiRepo&lt;/code&gt;  一样，只能等到 npm 包发布，才能发现。&lt;/li&gt;
&lt;li&gt;现代的众多 &lt;code&gt;monorepo&lt;/code&gt;  工具可以实现&lt;ins&gt;自动的版本管理&lt;/ins&gt;，当有模块更新的时候，自动更新该模块，和使用了该模块的模块。&lt;/li&gt;
&lt;li&gt;可以&lt;ins&gt;积累下统一的工程化配置&lt;/ins&gt;，多模块共同使用，&lt;ins&gt;当有新的项目的时候，可以作为一个新的模块直接接入，不再需要进行重复的工程化配置&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;所有的项目，公共函数库，公共组件库，都作为一个模块在一个仓库里，作为&lt;ins&gt;数据资产落地&lt;/ins&gt;下来，&lt;ins&gt;便于新人快速上手&lt;/ins&gt;，知晓有哪些公共函数，公共组件，可以使用，并维护，提升开发效率。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;直接无脑的使用-monorepo-架构会带来哪些问题呢可以解决吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接无脑的使用-monorepo-架构会带来哪些问题呢可以解决吗&#34;&gt;#&lt;/a&gt; 直接无脑的使用 Monorepo 架构，会带来哪些问题呢，可以解决吗？&lt;/h1&gt;
&lt;h2 id=&#34;可能带来的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能带来的问题&#34;&gt;#&lt;/a&gt; 可能带来的问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;所有的项目都作为模块在同一个仓库里，可能出现改了其他模块的代码，并且负责该模块的同事还不知道，结果出现了问题。&lt;/li&gt;
&lt;li&gt;在维护对外共享代码的模块（比如，组件库，函数库， hooks 库）的时候，无意间造成了 &lt;code&gt;break change&lt;/code&gt; ，从而影响了其他使用了该模块的模块的正常运转。&lt;/li&gt;
&lt;li&gt;在更新对外共享代码的模块的时候，不通知更新内容，从而使其他同事不知道公共模块多了哪些东西，导致对外共享模块形同虚设，无法发挥作用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h2&gt;
&lt;p&gt;团队需要有严格的 &lt;code&gt;commit msg&lt;/code&gt;  规范，每次的 &lt;code&gt;commit msg&lt;/code&gt;  必须附上，更改的模块名；当公共模块有更新的时候，必须写上更新内容，并告知团队成员，一方面当不小心造成 &lt;code&gt;break change&lt;/code&gt;  时，团队成员能够及时发现，并解决。另一方面，团队成员可以及时知道公共模块更新了哪些内容，自己是否可以用到，从而放公共模块发挥作用。&lt;br /&gt;
团队需要有严格的 &lt;code&gt;code review&lt;/code&gt;  作为兜底&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;Monorepo 架构确实拥有着很大的优势（解耦；增量构建，提升构建效率；代码共享；积累统一的工程化配置，公共库，从而提高开发效率，积累数据资产；降低新人上手门槛），可以带来很多积极的作用，但是对团队规范有一定的要求，无脑的使用，可能会带来很多致命的问题，但是可以通过严格的团队规范来避免。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/pnpmLearn/</guid>
            <title>为什么选择pnpm来替代npm，yarn</title>
            <link>https://zimu-66ccff.github.io/pnpmLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="pnpm" scheme="https://zimu-66ccff.github.io/tags/pnpm/" />
            <category term="包管理器" scheme="https://zimu-66ccff.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/" />
            <pubDate>Tue, 31 Oct 2023 16:51:37 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;npm-yarn-遇到了什么问腿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm-yarn-遇到了什么问腿&#34;&gt;#&lt;/a&gt; npm, yarn, 遇到了什么问腿？&lt;/h1&gt;
&lt;p&gt;为了得到这个问题的答案，我们需要对 npm，yarn 执行 &lt;code&gt;npm install&lt;/code&gt;  or  &lt;code&gt;yarn install&lt;/code&gt;  后，在 &lt;code&gt;node_modules&lt;/code&gt;  文件夹里面是怎么管理依赖的。&lt;/p&gt;
&lt;h2 id=&#34;npm3-版本之前对依赖的管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之前对依赖的管理&#34;&gt;#&lt;/a&gt; npm3 版本之前对依赖的管理&lt;/h2&gt;
&lt;p&gt;npm3 版本之前在生成的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹对依赖的管理是&lt;ins&gt;嵌套结构&lt;/ins&gt;的&lt;/p&gt;
&lt;p&gt;假设我们有一个项目，它依赖于  &lt;code&gt;b&lt;/code&gt;  包， &lt;code&gt;c &lt;/code&gt; 包， &lt;code&gt;b&lt;/code&gt;  包又依赖于  &lt;code&gt;d&lt;/code&gt;  包和  &lt;code&gt;f&lt;/code&gt;  包，  &lt;code&gt;c&lt;/code&gt;  包又依赖于  &lt;code&gt;d&lt;/code&gt;  包和  &lt;code&gt;f&lt;/code&gt;  包&lt;br /&gt;
依赖关系如下：&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/31/AIEns.png&#34; alt=&#34;pnpmLearn01.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当我们运行 &lt;code&gt;npm install&lt;/code&gt;  的时候，生成的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹中对依赖的管理会是嵌套结构的，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
├── b
|   └── node_modules
|       └── d
|       └── f
├── c
|   └── node_modules
|       └── d
|       └── e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以发现，是和依赖关系对应的嵌套结构&lt;/p&gt;
&lt;h2 id=&#34;npm3-版本之前对依赖的管理方式嵌套式的-node_modules-文件结构的缺陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之前对依赖的管理方式嵌套式的-node_modules-文件结构的缺陷&#34;&gt;#&lt;/a&gt; npm3 版本之前对依赖的管理方式：嵌套式的 node_modules 文件结构的缺陷&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;嵌套的可能会非常深，就像  &lt;code&gt;d&lt;/code&gt;  又依赖于  &lt;code&gt;d1&lt;/code&gt; ， &lt;code&gt;d1&lt;/code&gt;  又依赖于  &lt;code&gt;d2&lt;/code&gt; ， &lt;code&gt;d2&lt;/code&gt;  又依赖于  &lt;code&gt;d3&lt;/code&gt; , 如此下去，嵌套的就会非常深，有的操作系统可能就难以支持了&lt;/li&gt;
&lt;li&gt;同一个项目里会出现依赖重复安装，我们可以看到 d 包是被安装了两次的，在 b 包的 &lt;code&gt;node_modules&lt;/code&gt;  里被安装了一次，在 &lt;code&gt;c&lt;/code&gt;  包的 &lt;code&gt;node_nodules&lt;/code&gt;  又被重复安装了一次&lt;/li&gt;
&lt;li&gt;不同的项目里都依赖同一个依赖的时候，这个依赖在磁盘里会被重复安装。比如 &lt;code&gt;x&lt;/code&gt;  项目和 &lt;code&gt;y&lt;/code&gt;  项目都依赖于 &lt;code&gt;z&lt;/code&gt;  包，那么 &lt;code&gt;z&lt;/code&gt;  包就会在磁盘里被安装两次&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;npm3-版本之后和-yarn-对依赖的管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之后和-yarn-对依赖的管理&#34;&gt;#&lt;/a&gt; npm3 版本之后和 yarn 对依赖的管理&lt;/h2&gt;
&lt;p&gt;npm3 以后的版本和 yarn 生成的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹是&lt;ins&gt;扁平结构的&lt;/ins&gt;&lt;br /&gt;
根据我们上面的项目例子，它的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹结构应该是如下的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
├── b
├── c
├── d
├── f
└── e

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以发现所有的依赖都被拍平了，是扁平化的，都被提升到了 node_modules 文件夹下面，而不是嵌套的。&lt;/p&gt;
&lt;h2 id=&#34;npm3-版本之后和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-解决了之前的哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之后和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-解决了之前的哪些问题&#34;&gt;#&lt;/a&gt; npm3 版本之后和 yarn 对依赖的管理方式：扁平式的 node_modules 文件结构 解决了之前的哪些问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;解决了嵌套的非常深的问题&lt;br /&gt;
采用了扁平式的结构，完全不存在嵌套&lt;/li&gt;
&lt;li&gt;解决了同一个项目里依赖重复安装的问题&lt;br /&gt;
我们可以看到 &lt;code&gt;d包&lt;/code&gt; 在 &lt;code&gt;node_modules&lt;/code&gt;  文件夹下面是只安装了一次的。&lt;br /&gt;
那么 &lt;code&gt;b包&lt;/code&gt;  or  &lt;code&gt;c包&lt;/code&gt; 包要怎么找到他们依赖的 &lt;code&gt;d&lt;/code&gt;  包呢，因为他们自己目录下没有 &lt;code&gt;node_modules&lt;/code&gt; ，就会到上层目录里找 &lt;code&gt;node_modules&lt;/code&gt; ，就可以找到项目根目录下面的 &lt;code&gt;node_modules&lt;/code&gt; ，里面就有他们需要的 &lt;code&gt;d&lt;/code&gt;  包&lt;br /&gt;
&lt;ins&gt; ps：依赖的查找方式是先在自己包目录下的 node_modules 目录下面找，如果不存在 or 没找到，就到上层目录的 node_modules 目录找，以此方式，不断的往上找&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;npm3-版本之后-和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-带来了哪些新的问题-还存在哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之后-和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-带来了哪些新的问题-还存在哪些问题&#34;&gt;#&lt;/a&gt; npm3 版本之后 和 yarn 对依赖的管理方式：扁平式的 node_modules 文件结构 带来了哪些新的问题，还存在哪些问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;带来的新的问题
&lt;ol&gt;
&lt;li&gt;带了了 &lt;code&gt;幽灵依赖的问题&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;什么是幽灵依赖&lt;br /&gt;
在我们上面的例子里，我们项目 &lt;code&gt;a&lt;/code&gt;  只依赖于 &lt;code&gt;b&lt;/code&gt;  和 &lt;code&gt;c&lt;/code&gt; ，也就是说 &lt;code&gt;package.json&lt;/code&gt;  里的 &lt;code&gt;dependencies&lt;/code&gt;  只声明了 &lt;code&gt;b&lt;/code&gt;  和 &lt;code&gt;c&lt;/code&gt; ，但是因为扁平化的结构，我们可以在项目里使用 &lt;code&gt;package.json&lt;/code&gt;  的 &lt;code&gt;dependencies&lt;/code&gt;  里没有声明的 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt; 。 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt;  这三个依赖没有在项目目录的 &lt;code&gt;package.json&lt;/code&gt;  里声明，但是却可以使用，这种依赖就被称为 &lt;code&gt;幽灵依赖&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;幽灵依赖&lt;/code&gt; 会造成什么后果&lt;br /&gt;
 &lt;code&gt;d&lt;/code&gt;  是被 &lt;code&gt;b&lt;/code&gt;  依赖的，然后因为 &lt;code&gt;扁平化&lt;/code&gt; 的结构，我们才能使用，那么如果有一天 &lt;code&gt;b&lt;/code&gt;  不在依赖于 &lt;code&gt;d&lt;/code&gt;  了，那么我们一旦 &lt;code&gt;npm install&lt;/code&gt; ， &lt;code&gt;node_modules&lt;/code&gt;  里就不会再有 &lt;code&gt;d&lt;/code&gt;  了，而我们的项目代码还在使用 &lt;code&gt;d&lt;/code&gt; ，那么马上就会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;之前存在但是没有得到解决的问题
&lt;ol&gt;
&lt;li&gt;不同的项目里都依赖同一个依赖的时候，这个依赖在磁盘里会被重复安装。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;为什么选择-pnpmpnpm-的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么选择-pnpmpnpm-的优势&#34;&gt;#&lt;/a&gt; 为什么选择 pnpm（pnpm 的优势）&lt;/h1&gt;
&lt;h2 id=&#34;pnpm-对依赖的管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pnpm-对依赖的管理&#34;&gt;#&lt;/a&gt; pnpm 对依赖的管理&lt;/h2&gt;
&lt;p&gt;pnpm 对依赖的管理是一种扁平式和嵌套式相结合的，利用了软连接和硬链接的一种结构&lt;/p&gt;
&lt;p&gt;&lt;ins&gt;ps: 这里简单的讲解一下什么是软连接，什么是硬链接&lt;/ins&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬链接&lt;br /&gt;
在操作系统的文件系统里，磁盘的文件都会有一个编号叫索引节点号 (Inode Index)， 而硬链接就是文件名直接指向这个索引号，从而找到磁盘里的文件内容。并且可以存在多个文件硬链接同一个索引节点号。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。&lt;/li&gt;
&lt;li&gt;软连接&lt;br /&gt;
软连接也叫符号链接，它是一个保存有其他文件位置信息的文件，指向的是其他文件的位置信息，而不是磁盘里的文件的索引节点号。所以一旦它指向的那个文件被删除，它就找不到了&lt;/li&gt;
&lt;li&gt;详细的讲解请看这篇文章&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaXRlY2gvYXJjaGl2ZS8yMDA5LzA0LzEwLzE0MzMwNTIuaHRtbA==&#34;&gt; Linux 软连接和硬链接&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依旧是我们上面的例子，它的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹结构应该是如下的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
├── .pnpm
    └── b // 硬连接 指向的是磁盘里的b包
        └── node_modules
            └── d // 软连接 指向的是 .pnpm/d
            └── f // 软连接 指向的是 .pnpm/f
    └── c
        └── node_modules
            └── d // 软连接 指向的是 .pnpm/d
            └── e // 软连接 指向的是 .pnpm/e
    └── d // 硬连接 指向的是磁盘里的d包
    └── e // 硬连接 指向的是磁盘里的e包
    └── f // 硬连接 指向的是磁盘里的f包
    └── node_modules
        └── b // 软连接 指向的是.pnpm/b
        └── c // 软连接 指向的是.pnpm/c
        └── d // 软连接 指向的是.pnpm/d
        └── e // 软连接 指向的是.pnpm/e
        └── f // 软连接 指向的是.pnpm/f
├── b // 软连接 指向的是 .pnpm/b
├── c // 软连接 指向的是 .pnpm/c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到这个文件结构的时候第一感觉肯定是，好复杂啊，一下子多了好多东西，没关系，我接下来会逐一介绍为什么会是这样的，然后你就会发现这个结构真的是十分巧妙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;node_modules&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我们会发现 &lt;code&gt;node_modules&lt;/code&gt;  目录下的包文件和我们项目里的 &lt;code&gt;package.json&lt;/code&gt;  里 &lt;code&gt;dependencies&lt;/code&gt;  声明的包是一摸一样的。这样就可以有效的避免 &lt;code&gt;幽灵依赖的问题&lt;/code&gt; ，项目里就不能直接使用 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt;  , &lt;code&gt;f&lt;/code&gt;  这些幽灵依赖了，因为 &lt;code&gt;node_modules&lt;/code&gt;  里面没有。&lt;ins&gt;完美解决幽灵依赖的问题&lt;/ins&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;好，聪明的你马上就会问， &lt;code&gt;b&lt;/code&gt; ,  &lt;code&gt;c&lt;/code&gt;  都有各自的依赖呀，可是 &lt;code&gt;node_modules/b&lt;/code&gt; , &lt;code&gt;node_modules/c&lt;/code&gt;  里面没有 &lt;code&gt;node_modules&lt;/code&gt;  呀，那怎么找到他们的依赖呢。那么现在就告诉你真相， &lt;code&gt;node_modules/&lt;/code&gt;  下面的包文件全部都是 &lt;code&gt;软连接&lt;/code&gt; ，他们都指向 &lt;code&gt;node_modules/.pnpm/&lt;/code&gt;  目录下 对应的包，也就是 &lt;code&gt;node_modules/.pnpm/b&lt;/code&gt; ，  &lt;code&gt;node_modules/.pnpm/c&lt;/code&gt; , 他们下面就有对应的 &lt;code&gt;node_modules&lt;/code&gt;  来存储他们各自对应的依赖啦。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node_modules/.pnpm&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们会发现 &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  目录下拥有着我们项目所有的依赖， &lt;code&gt;b&lt;/code&gt; ,  &lt;code&gt;c&lt;/code&gt; ,  &lt;code&gt;d&lt;/code&gt;  , &lt;code&gt;e&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt; ，并且是扁平化的，而且他们都是 &lt;code&gt;硬链接&lt;/code&gt; 。都指向磁盘里的 &lt;code&gt;b&lt;/code&gt; ， &lt;code&gt;c&lt;/code&gt; ， &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt;  , &lt;code&gt;f&lt;/code&gt; 。这样当我们在其他项目里面也有这些依赖的时候，就不需要在磁盘里面重复安装，直接一个 &lt;code&gt;硬连接&lt;/code&gt; 指向磁盘里对应的文件就可以。&lt;ins&gt;完美解决不同项目里同样的依赖在磁盘里重复安装的问题&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node_modules/.pnpm/ 包文件 /node_modules&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们会发现 &lt;code&gt;node_modules/.pnpm/包文件/node_modules/&lt;/code&gt;  目录下拥有者包所需要的依赖， 而这些依赖其实都是软连接，指向 &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  目录下对应的包文件。在这里就是 &lt;code&gt;node_modules/.pnpm/b/&lt;/code&gt;  下面有着 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt; , 但其实这个 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt;  都是软连接，指向 &lt;code&gt;node_modules/.pnpm/d&lt;/code&gt; ,  &lt;code&gt;node_modules/.pnpm/f&lt;/code&gt; 。这样虽然 &lt;code&gt;b&lt;/code&gt; ,  &lt;code&gt;c&lt;/code&gt;  都依赖于 &lt;code&gt;d&lt;/code&gt; , 但是却不会重复安装，而是都指向 &lt;code&gt;node_modules/.pnpm/d&lt;/code&gt; 。 &lt;ins&gt;完美解决同一项目里依赖重复安装的问题&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node_modules/.pnpm/node_modules&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们会发现 &lt;code&gt;node_modules/.pnpm/node_modules&lt;/code&gt;  这个目录下存有项目的所有依赖。当然，都是软连接，指向 &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  下面的包，那么这个文件夹到底是什么作用呢。&lt;/li&gt;
&lt;li&gt;我们都知道 &lt;code&gt;幽灵依赖&lt;/code&gt; 是不安全的，是很容易导致问题的，但是现实是，依旧很多第三方包使用了幽灵依赖，而我们的 pnpm 也对幽灵依赖做了兼容，在特定的情况下是允许幽灵依赖的，那么幽灵依赖在哪找呢，就是这个目录下面，这个目录是扁平化的，拥有项目所有的包。 &lt;ins&gt;实现了对幽灵依赖的支持 但是最好不要这样 因为幽灵依赖并不安全&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pnpm-的优势解决了哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pnpm-的优势解决了哪些问题&#34;&gt;#&lt;/a&gt; pnpm 的优势，解决了哪些问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过软连接避免了 &lt;code&gt;幽灵依赖&lt;/code&gt; 的问题&lt;/li&gt;
&lt;li&gt;通过硬连接解决了 &lt;code&gt;不同项目的相同依赖&lt;/code&gt; 在磁盘重复安装的问题，提升了速度&lt;/li&gt;
&lt;li&gt;通过软连接，  &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  的 &lt;code&gt;扁平化&lt;/code&gt; 结构解决了 &lt;code&gt;同一项目里相同依赖&lt;/code&gt; 重复安装的问题&lt;/li&gt;
&lt;li&gt;通过软连接和 &lt;code&gt;node_modules/.pnpm/node_modules&lt;/code&gt;  目录，兼容了 &lt;code&gt;幽灵依赖&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/plopLearn/</guid>
            <title>plop-一个基于模板的代码生成器</title>
            <link>https://zimu-66ccff.github.io/plopLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="plop" scheme="https://zimu-66ccff.github.io/tags/plop/" />
            <category term="脚手架" scheme="https://zimu-66ccff.github.io/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/" />
            <pubDate>Sun, 29 Oct 2023 17:53:34 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;plop-是什么为什么需要-plop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#plop-是什么为什么需要-plop&#34;&gt;#&lt;/a&gt; plop 是什么，为什么需要 plop&lt;/h1&gt;
&lt;p&gt;Plop is a little tool that saves you time and helps your team build new files with consistency.&lt;br /&gt;
 这是官网对于 plop 的评价，实际上也确实是这样， plop 可以通过命令和用户配置的 hbs 模板文件来在指定的目录下生成对应的模板代码。想一想，我们只需要通过一个命令，就可以在我们需要的目录下生成对应的文件，里面有本来需要我们手写的结构代码，这该是一件多爽的事情，可以大大的节约我们的时间&lt;/p&gt;
&lt;h1 id=&#34;plop-体验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#plop-体验&#34;&gt;#&lt;/a&gt; plop 体验&lt;/h1&gt;
&lt;h2 id=&#34;下载-plop推荐全局下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载-plop推荐全局下载&#34;&gt;#&lt;/a&gt; 下载 plop (推荐全局下载)&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;pnpm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; plop &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;编写模板代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写模板代码&#34;&gt;#&lt;/a&gt; 编写模板代码&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- templates/sfc/index.vue.hbs --&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
&amp;#123;&amp;#123;&gt; importVueRef&amp;#125;&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;
&amp;#123;&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在根目录下新建一个文件夹存放我们对应的模板代码，plop 后面会根据这些模板代码来生成我们需要的代码&lt;/p&gt;
&lt;p&gt;你可能已经发现了出现了 &lt;code&gt;&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;&lt;/code&gt;  这样的代码  &lt;code&gt;&amp;#123;&amp;#123;&amp;#125;&amp;#125;&lt;/code&gt;  这个叫模板语法，你可能会说这不是和 vue 的模板语法是一样的嘛 是的 是一样的 因为 vue 的模板语法就是借鉴（抄）的这个 那么你应该会好奇 componentName 的值是什么呢 这个将会在命令里传递 请继续往下看&lt;/p&gt;
&lt;h3 id=&#34;在项目根目录创建我们的-plopfilejs-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在项目根目录创建我们的-plopfilejs-文件&#34;&gt;#&lt;/a&gt; 在项目根目录创建我们的 plopfile.js 文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;export default function (plop) &amp;#123;
  plop.setGenerator(&#39;createSFC&#39;, &amp;#123;
    description: &#39;create one SFC&#39;,
    prompts: [&amp;#123; type: &#39;input&#39;, name: &#39;componentName&#39;, message: &#39;input componentName&#39; &amp;#125;],
    actions: (data) =&amp;gt; &amp;#123;
      return [
        &amp;#123;
          type: &#39;add&#39;,
          path: &#39;./src/&amp;#123;&amp;#123;camelCase componentName&amp;#125;&amp;#125;/index.vue&#39;,
          templateFile: &#39;./templates/sfc/index.vue.hbs&#39;,
        &amp;#125;,
      ];
    &amp;#125;,
  &amp;#125;);
  plop.setPartial(&#39;importVueRef&#39;, `import &amp;#123;Ref&amp;#125; from &#39;vue&#39; `);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单讲解一下，我们用 &lt;code&gt;plop&lt;/code&gt;  这个对象身上的 &lt;code&gt;setGenerator&lt;/code&gt;  命令，配置了一个命令， &lt;code&gt;createSFC&lt;/code&gt;  是这个命令的名字（自己取），然后通过终端输入 &lt;code&gt;plop createSFC&lt;/code&gt;  这个命令来使用。&lt;br /&gt;
 &lt;code&gt;description&lt;/code&gt;  是对这个命令功能的描述，当我们输入 &lt;code&gt;plop&lt;/code&gt;  命令的时候，终端会列出所有的 plop 命令和它的描述（就是我们这里 description 写的）.&lt;br /&gt;
 &lt;code&gt;prompts&lt;/code&gt;  是一个数组，数组里面的元素是一个对象（用来描述终端提示语的）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type&lt;br /&gt;
 这个提示的类型，这里是 &#39;input&#39;,&lt;/li&gt;
&lt;li&gt;name&lt;br /&gt;
 定义变量名 (这里的变量名是 componentName)，用来存储用户将从终端输入的值 (因为是 input 类型，所以是用户输入一个值)。&lt;/li&gt;
&lt;li&gt;message&lt;br /&gt;
 提示信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;action&lt;/code&gt;  是这个命令具体将执行的操作，是一个数组，因为一个命令是可以执行多个操作的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type&lt;br /&gt;
 操作的类型，这里是 &#39;add&#39;, 也就是在指定目录下生成一个文件&lt;/li&gt;
&lt;li&gt;path&lt;br /&gt;
 生成的文件的路径， &lt;code&gt;&#39;./src/&amp;#123;&amp;#123;camelCase componentName&amp;#125;&amp;#125;/index.vue&#39;&lt;/code&gt; ， 这里又出现了插值语法， &lt;code&gt;componentName&lt;/code&gt;  是我们在 &lt;code&gt;prompts&lt;/code&gt;  里面配置的用户输入的，我们假设输入的是 &#39;button-success&#39;， 你可能注意到了前面还有一个 &lt;code&gt;camelCase&lt;/code&gt; ，这个是一个 &lt;code&gt;helper&lt;/code&gt; ，它的作用是把 componentName 的值变成驼峰形式，也就是说用户输入的 &#39;button-success&#39; 会变成 &#39;buttonSuccess&#39;。也就是说实际上生成的文件路径会是 &lt;code&gt;./src/buttonSuccess/index.vue&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
 我们写的模板代码，也就是 hbs 文件的路径，在这里就是生成的 &lt;code&gt;index.vue&lt;/code&gt;  文件的代码将会是这个 &lt;code&gt;&#39;./templates/sfc/index.vue.hbs&#39;&lt;/code&gt;  文件里的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在-packagejson-文件的-script-里面配置脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在-packagejson-文件的-script-里面配置脚本&#34;&gt;#&lt;/a&gt; 在 package.json 文件的 script 里面配置脚本&lt;/h2&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;scripts&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;plop&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;plop&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;执行命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行命令&#34;&gt;#&lt;/a&gt; 执行命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;执行 &lt;code&gt;pnpm plop&lt;/code&gt;  命令&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/29/AVTPm.png&#34; alt=&#34;plopLearn01.png&#34; /&gt;&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;componentName&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/29/AVq6N.png&#34; alt=&#34;plopLearn02.png&#34; /&gt;&lt;/li&gt;
&lt;li&gt;src/buttonSuccess 目录下就生成了 index.vue 代码了&lt;/li&gt;
&lt;li&gt;查看 src/buttonSuccess/index.vue 的代码&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/29/AVGGp.png&#34; alt=&#34;plop03.png&#34; /&gt;&lt;br /&gt;
 我们可以发现和我们的模板代码 hbs 文件几乎是一样的，并且 &lt;code&gt;&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;&lt;/code&gt;  这种插值语法也已经被正确的替换为了用户输入的 &lt;code&gt;buttonSucess&lt;/code&gt;  (用户输入的 button-success， 但是被我们设置的 camelCase 给转化成了驼峰形式)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;plop-的-api-讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#plop-的-api-讲解&#34;&gt;#&lt;/a&gt; plop 的 api 讲解&lt;/h1&gt;
&lt;h2 id=&#34;sethelper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sethelper&#34;&gt;#&lt;/a&gt; setHelper&lt;/h2&gt;
&lt;p&gt;用来自定义 &lt;code&gt;helper&lt;/code&gt; ,  &lt;code&gt;helper&lt;/code&gt;  用来对值做转换，例如:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;plop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  plop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHelper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;upperCase&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toUpperCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一个参数为 helper 的名字，这里是 &amp;quot;upperCase&amp;quot;, 第二个参数为处理函数，这里是将值转换为大写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用方式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;&amp;#123;upperCase componentName&amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;效果：&lt;br /&gt;
假设 componentName 本来的值是 &amp;quot;button&amp;quot;， 那么它最终会被转换成 &#39;BUTTON&#39;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自带的 helper（这些 helper 为 plop 自带的，可以直接使用）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;camelCase: changeFormatToThis&lt;/li&gt;
&lt;li&gt;snakeCase: change_format_to_this&lt;/li&gt;
&lt;li&gt;dashCase/kebabCase: change-format-to-this&lt;/li&gt;
&lt;li&gt;dotCase: change.format.to.this&lt;/li&gt;
&lt;li&gt;pathCase: change/format/to/this&lt;/li&gt;
&lt;li&gt;properCase/pascalCase: ChangeFormatToThis&lt;/li&gt;
&lt;li&gt;lowerCase: change format to this&lt;/li&gt;
&lt;li&gt;sentenceCase: Change format to this,&lt;/li&gt;
&lt;li&gt;constantCase: CHANGE_FORMAT_TO_THIS&lt;/li&gt;
&lt;li&gt;titleCase: Change Format To This&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setpartial&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setpartial&#34;&gt;#&lt;/a&gt; setPartial&lt;/h2&gt;
&lt;p&gt;用来自定义局部的模板，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;/** @type &amp;#123;import(&#39;plop&#39;).NodePlopAPI&amp;#125; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  plop&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  plop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setPartial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;importVueRef&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;import &amp;#123;Ref&amp;#125; from &#39;vue&#39; &lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一个参数为局部模板的名字，这里是 &#39;importVueRef&#39;, 第二个人参数为模板，这里是 &#39;import {Ref} from &#39;vue&#39;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;&amp;#123;&gt; importVueRef&amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;效果：&lt;br /&gt;
 &lt;code&gt;&amp;#123;&amp;#123;&gt; importVueRef&amp;#125;&amp;#125;&lt;/code&gt;  会变成  &lt;code&gt;import &amp;#123;Ref&amp;#125; from &#39;vue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内置的-actions-type&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置的-actions-type&#34;&gt;#&lt;/a&gt; 内置的 actions type&lt;/h1&gt;
&lt;h2 id=&#34;add&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#add&#34;&gt;#&lt;/a&gt; add&lt;/h2&gt;
&lt;p&gt;用来在指定的路径生成文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;path&lt;br /&gt;
string 类型，生成的文件的路径&lt;/li&gt;
&lt;li&gt;template&lt;br /&gt;
string 类型，模板，以这个模板来生成文件（说白点，就是生成的文件的代码会和这个模板一摸一样）&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
string 类型，模板代码文件的路径，会以这个路径的模板文件来生成文件&lt;/li&gt;
&lt;li&gt;force&lt;br /&gt;
boolean 类型，当该文件已经存在的时候，是否覆盖&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 对象或者函数类型（函数要返回一个对象），为模板提供额外的数据（就是为那些插值语法提供额外的数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;addmany&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addmany&#34;&gt;#&lt;/a&gt; addMany&lt;/h2&gt;
&lt;p&gt;将多个目录和文件添加到指定目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;destination&lt;br /&gt;
string 类型，在该路径下添加文件&lt;/li&gt;
&lt;li&gt;base&lt;br /&gt;
string 类型， 在该路径下匹配目录和文件，匹配到的目录和文件将会被添加到对应路径下面&lt;/li&gt;
&lt;li&gt;templateFiles&lt;br /&gt;
glob 类型， 以该模式匹配目录和文件的模式， 比如 templates/components/*, 就是匹配 templates 目录下的 components 目录下的所有文件&lt;/li&gt;
&lt;li&gt;stripExtensions&lt;br /&gt;
 添加到指定目录时自动删掉对应的后缀名，默认值为 [&#39;hbs&#39;]， 也就是说添加文件的时候.hbs 后缀会被默认删掉。比如说文件名为 index.vue.hbs, 添加的时候就会变成 index.vue&lt;/li&gt;
&lt;li&gt;force&lt;br /&gt;
boolean 类型，当该文件已经存在的时候，是否覆盖&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 对象或者函数类型（函数要返回一个对象），为模板提供额外的数据（就是为那些插值语法提供额外的数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modify&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modify&#34;&gt;#&lt;/a&gt; modify&lt;/h2&gt;
&lt;p&gt;用于替换指定文件中的匹配到的文本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;path&lt;br /&gt;
 同上&lt;/li&gt;
&lt;li&gt;pattern&lt;br /&gt;
 正则表达式，用于匹配文本&lt;/li&gt;
&lt;li&gt;template&lt;br /&gt;
string 类型，用于将匹配到的文本替换成这个模板&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
string 类型， 模板的路径，以该路径的模板来替换匹配到的文本&lt;/li&gt;
&lt;li&gt;transform&lt;br /&gt;
 函数类型，用来转换文件内容&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;append&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#append&#34;&gt;#&lt;/a&gt; append&lt;/h2&gt;
&lt;p&gt;用于在指定文件中匹配到的文本后面添加内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;path&lt;br /&gt;
 同上&lt;/li&gt;
&lt;li&gt;pattern&lt;br /&gt;
 正则表达式，用于匹配文本&lt;/li&gt;
&lt;li&gt;template&lt;br /&gt;
string 类型，用于在匹配到的文本后面添加这个模板&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
string 类型， 模板的路径，将该路径的模板添加到匹配到的文本后面&lt;/li&gt;
&lt;li&gt;transform&lt;br /&gt;
 函数类型，用来转换文件内容&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内置的-promps-type&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置的-promps-type&#34;&gt;#&lt;/a&gt; 内置的 promps type&lt;/h2&gt;
&lt;p&gt;和 inquire 的一样 详细的可以查看 inquire 的官网&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NCb3Vkcmlhcy9JbnF1aXJlci5qcw==&#34;&gt; https://github.com/SBoudrias/Inquirer.js&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/packageJsonLearn/</guid>
            <title>package.json文件详解</title>
            <link>https://zimu-66ccff.github.io/packageJsonLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="package.json文件" scheme="https://zimu-66ccff.github.io/tags/package-json%E6%96%87%E4%BB%B6/" />
            <pubDate>Sat, 28 Oct 2023 14:56:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;packagejson-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#packagejson-是什么&#34;&gt;#&lt;/a&gt; package.json 是什么&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;  文件会描述我们项目的所有配置信息（名称，版本，使用协议），所有 npm 包的信息（版本，是否是开发环境依赖）&lt;/p&gt;
&lt;h1 id=&#34;怎么创建-packagejson-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么创建-packagejson-文件&#34;&gt;#&lt;/a&gt; 怎么创建 package.json 文件&lt;/h1&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# npm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# pnpm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;pnpm&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;属性介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性介绍&#34;&gt;#&lt;/a&gt; 属性介绍&lt;/h1&gt;
&lt;h2 id=&#34;name&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#name&#34;&gt;#&lt;/a&gt; name&lt;/h2&gt;
&lt;p&gt;包的名字， 不能以 &lt;code&gt;.&lt;/code&gt; ,  &lt;code&gt;_&lt;/code&gt; ,  &lt;code&gt;大写字母&lt;/code&gt; 开头&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm 域级包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;介绍及其作用&lt;br /&gt;
在 npm 的包管理系统中，有一种  &lt;code&gt;scoped packages&lt;/code&gt;  机制，用于将一些 npm 包以 &lt;code&gt;@scope/package&lt;/code&gt;  的命名形式集中在一个命名空间下面，实现域级的包管理。域级包不仅不用担心会和别人的包名重复，同时也能对功能类似的包进行统一的划分和管理；比如我们用 vue 脚手架搭建的项目，里面就有 &lt;code&gt;@vue/cli-plugin-babel&lt;/code&gt; 、 &lt;code&gt;@vue/cli-plugin-eslint&lt;/code&gt;  等等域级包。相同域级范围内的包会被安装在相同的文件路径下，比如 &lt;code&gt;node_modules/@username/&lt;/code&gt; ，可以包含任意数量的作用域包；安装域级包也需要指明其作用域范围：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; @username/package&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们在初始化项目时可以使用命令行来添加  &lt;code&gt;scope&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; init &lt;span class=&#34;token parameter variable&#34;&gt;--scope&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;username&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;version&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#version&#34;&gt;#&lt;/a&gt; version&lt;/h2&gt;
&lt;p&gt;包的版本号，npm 包的版本号也是有规范要求的，通用的就是遵循  &lt;code&gt;semver&lt;/code&gt;  语义化版本规范，版本格式为： &lt;code&gt;major.minor.patch&lt;/code&gt; ，每个字母代表的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主版本号 (major)：当你做了不兼容的 API 修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;次版本号 (minor)：当你做了向下兼容的功能性新增&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修订号 (patch)：当你做了向下兼容的问题修正&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先行版本号：先行版本号是加到修订号的后面，作为版本号的延伸；当要发行大版本或核心功能时，但不能保证这个版本完全正常，就要先发一个先行版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式&lt;br /&gt;
先行版本号的格式是在修订版本号后面加上一个连接号（-），再加上一连串以点（.）分割的标识符，标识符可以由英文、数字和连接号（[0-9A-Za-z-]）组成。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.0​​.0-alpha
1.0.0-alpha.1
1.0.0-0.3.7
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见先行版本号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alpha：不稳定版本，一般而言，该版本的 Bug 较多，需要继续修改，是测试版本&lt;/li&gt;
&lt;li&gt;beta：基本稳定，相对于 Alpha 版已经有了很大的进步，消除了严重错误&lt;/li&gt;
&lt;li&gt;rc：和正式版基本相同，基本上不存在导致错误的 Bug&lt;/li&gt;
&lt;li&gt;release：最终版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;当主版本号升级后，次版本号和修订号需要重置为 0，次版本号进行升级后，修订版本需要重置为 0。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;description-keywords&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#description-keywords&#34;&gt;#&lt;/a&gt; description, keywords&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;description&lt;br /&gt;
 &lt;code&gt;String&lt;/code&gt;  类型，描述项目的信息， 可以显示在 &lt;code&gt;npm search&lt;/code&gt;  命令的返回结果中&lt;/li&gt;
&lt;li&gt;keywords&lt;br /&gt;
Array &lt;code&gt;类型， 描述项目的信息， 可以显示在&lt;/code&gt;  npm search` 命令的返回结果中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;homepage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homepage&#34;&gt;#&lt;/a&gt; homepage&lt;/h2&gt;
&lt;p&gt;用来指定项目的主页 or 部署网站的根目录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开发环境的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免路径问题&lt;/p&gt;
&lt;p&gt;一些前端框架和构建工具在路由和资源加载时依赖于  &lt;code&gt;homepage&lt;/code&gt;  属性。如果你不在开发环境中设置  &lt;code&gt;homepage&lt;/code&gt; ，可能会在构建应用时遇到问题，尤其是当你使用前端路由（如  &lt;code&gt;React Router&lt;/code&gt; ）时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试相对路径:&lt;/p&gt;
&lt;p&gt;开发环境中的开发服务器通常使用相对路径来加载资源，而不需要指定完整的 URL。设置  &lt;code&gt;homepage&lt;/code&gt;  属性可以帮助你测试应用在不同路径上的行为，以确保它在生产环境中正常工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生产环境的作用&lt;br /&gt;
指定应用程序的根 URL，确保所有资源（例如 CSS、JavaScript 文件等）的加载路径正确。这是非常关键的，因为在生产环境中，你的应用可能托管在不同的域名、子目录或路径上，而  &lt;code&gt;homepage&lt;/code&gt;  可以确保资源正确加载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;author-contributors-maintainers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#author-contributors-maintainers&#34;&gt;#&lt;/a&gt; author, contributors, maintainers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;author&lt;br /&gt;
 作者， &lt;code&gt;string | &amp;#123;name: string, url?: sting, email?: string&amp;#125;&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;contributors&lt;br /&gt;
 贡献者列表，  &lt;code&gt;Array&amp;lt;string | &amp;#123;name: string, url?: sting, email?: string&amp;#125;&amp;gt;&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;maintainers&lt;br /&gt;
 维护者列表， &lt;code&gt;Array&amp;lt;string | &amp;#123;name: string, url?: sting, email?: string&amp;#125;&amp;gt;&lt;/code&gt;  类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bugs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bugs&#34;&gt;#&lt;/a&gt; bugs&lt;/h2&gt;
&lt;p&gt;提供地址来让用户反馈存在的问题， &lt;code&gt;&amp;#123;url: string, email: string&amp;#125;&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;license-license&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#license-license&#34;&gt;#&lt;/a&gt; license, license&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;license&lt;br /&gt;
 开源协议名称， &lt;code&gt;string&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;licenses&lt;br /&gt;
 多个包的开源协议名称， &lt;code&gt;Array&amp;lt;&amp;#123;type: string, url: string&amp;#125;&amp;gt;&lt;/code&gt;  类型&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/28/FDPvK.png&#34; alt=&#34;license.png&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;main-module-browser&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#main-module-browser&#34;&gt;#&lt;/a&gt; main, module, browser&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;main&lt;br /&gt;
 指定加载时的入口文件， &lt;code&gt;cmd&lt;/code&gt;  模块规范导入的时候就会加载这个文件，默认为根目录下的 &lt;code&gt;index.js&lt;/code&gt;  文件，  &lt;code&gt;browser&lt;/code&gt;  和 &lt;code&gt;node&lt;/code&gt;  环境下均可使用， &lt;code&gt;string&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;module&lt;br /&gt;
 指定 &lt;code&gt;esm&lt;/code&gt;  模块规范时的入口文件， &lt;code&gt;browser&lt;/code&gt;  和 &lt;code&gt;node&lt;/code&gt;  环境下均可使用， &lt;code&gt;string&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;browser&lt;br /&gt;
 指定 &lt;code&gt;browser&lt;/code&gt;  环境下的入口文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dependencies-devdependencies&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dependencies-devdependencies&#34;&gt;#&lt;/a&gt; dependencies, devDependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dependencies&lt;br /&gt;
 项目 &lt;code&gt;运行&lt;/code&gt; 所需的依赖， &lt;code&gt;开发&lt;/code&gt; 和 &lt;code&gt;生产&lt;/code&gt; 环境都需要的依赖，命令如下:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 不缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx &lt;span class=&#34;token parameter variable&#34;&gt;--save&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;devDependencies&lt;br /&gt;
 项目 &lt;code&gt;开发&lt;/code&gt; 所需的依赖，只会在 &lt;code&gt;开发&lt;/code&gt; 环境被安装，命令如下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 不缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx --save-dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;版本号规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有任何符号：完全百分百匹配，必须使用当前版本号&lt;/li&gt;
&lt;li&gt;对比符号类的：&amp;gt;(大于) &amp;gt;=(大于等于) &amp;lt;(小于) &amp;lt;=(小于等于)&lt;/li&gt;
&lt;li&gt;波浪符号&lt;sub&gt;：固定主版本号和次版本号，修订号可以随意更改，例如&lt;/sub&gt; 2.0.0，可以使 用 2.0.0、2.0.2 、2.0.9 的版本。&lt;/li&gt;
&lt;li&gt;插入符号&lt;sup&gt;：固定主版本号，次版本号和修订号可以随意更改，例如&lt;/sup&gt; 2.0.0，可以使 用 2.0.1、2.2.2 、2.9.9 的版本。&lt;/li&gt;
&lt;li&gt;任意版本 *：对版本没有限制，一般不用&lt;/li&gt;
&lt;li&gt;或符号：|| 可以用来设置多个版本号限制规则，例如 &amp;gt;= 3.0.0 || &amp;lt;= 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;peerdependencies-bundleddependencies-optionaldependencies&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#peerdependencies-bundleddependencies-optionaldependencies&#34;&gt;#&lt;/a&gt; peerDependencies, bundledDependencies, optionalDependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;peerDependencies&lt;br /&gt;
 用来告诉别人当使用这个依赖的时候，需要使用那些特定版本的依赖，比如 &lt;code&gt;依赖 A&lt;/code&gt;  的  &lt;code&gt;package.json&lt;/code&gt;  中声明了  &lt;code&gt;peerDependencies&lt;/code&gt; ,  &lt;code&gt;xxx6.0&lt;/code&gt;  吗，那么如果安装了 &lt;code&gt;依赖 A&lt;/code&gt;  就也应该安装  &lt;code&gt;xxx6.0&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;但是请注意， &lt;code&gt;peerDependencies&lt;/code&gt;  下的依赖并不会被强行安装，它只是告诉你，应该安装 对应版本的这些依赖，因为该依赖依赖于这些依赖，如果不安装，可能会出现问题&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bundledDependencies&lt;/p&gt;
&lt;p&gt;依赖默认时不会被打包的，但是 &lt;code&gt;bundledDependencies&lt;/code&gt;  下的依赖也会被一起打包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optionalDependencies&lt;/p&gt;
&lt;p&gt;指定一些可选的依赖，这些依赖也会被 &lt;code&gt;npm install&lt;/code&gt;  安装，但是安装失败了，不会报错，不会导致整个 &lt;code&gt;npm install&lt;/code&gt;  失败&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#files&#34;&gt;#&lt;/a&gt; files&lt;/h2&gt;
&lt;p&gt;用来指定 npm 发包时应该包括哪些目录和文件， &lt;code&gt;string | Array&amp;lt;string&amp;gt;&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;bin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bin&#34;&gt;#&lt;/a&gt; bin&lt;/h2&gt;
&lt;p&gt;用来指定命令和对应的可执行文件，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;my-cli-tool&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;version&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;my-command&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;bin/my-command.js&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;bin&lt;/code&gt;  中的键（例如  &lt;code&gt;&amp;quot;my-command&amp;quot;&lt;/code&gt; ）是用户在命令行中执行的命令名称。 &lt;code&gt;bin&lt;/code&gt;  中的值是指向模块中实际可执行文件的相对路径。当全局安装 &lt;code&gt;my-cli-tool&lt;/code&gt;  的时候，系统会创建一个符号链接，将  &lt;code&gt;bin&lt;/code&gt;  中指定的命令名称与相应的可执行文件关联，然后这个符号连接会被添加到系统的 &lt;code&gt;PATH&lt;/code&gt;  变量中。当我们执行 &lt;code&gt;my-command&lt;/code&gt;  命令的时候，系统就会通过 &lt;code&gt;PATH&lt;/code&gt;  的符号连接找到对应的 &lt;code&gt;bin/my-command&lt;/code&gt;  文件并执行其中的代码。如果我们的包以 &lt;code&gt;依赖&lt;/code&gt; 的方式被安装时，如果有 &lt;code&gt;bin&lt;/code&gt; ，就会在 &lt;code&gt;node_modules/.bin/&lt;/code&gt;  生成对应的文件，然后建立符号链接，所有 &lt;code&gt;node_modules/.bin/&lt;/code&gt;  目录下的命令都可以使用 &lt;code&gt;npm run [命令]&lt;/code&gt;  的格式下运行。&lt;/p&gt;
&lt;h2 id=&#34;directories&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#directories&#34;&gt;#&lt;/a&gt; directories&lt;/h2&gt;
&lt;p&gt;展示项目的目录结构信息，用来告诉用户每个目录在什么位置， 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;my-module&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;version&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;directories&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;lib&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;src&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;doc&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;docs&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用来告诉用户 or 其他开发者 可执行文件请放到  &lt;code&gt;bin&lt;/code&gt;  目录，库的核心代码请放到  &lt;code&gt;lib&lt;/code&gt;  目录，文档代码请放到  &lt;code&gt;doc&lt;/code&gt;  目录。&lt;/p&gt;
&lt;h2 id=&#34;repository&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#repository&#34;&gt;#&lt;/a&gt; repository&lt;/h2&gt;
&lt;p&gt;用来告诉想要加入我们，对我们的代码做贡献的人，我们的代码仓库在哪里， &lt;code&gt;&amp;#123;type: string, url: string, directory: string&amp;#125;&lt;/code&gt;  类型。比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;&#34;repository&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;git&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;url&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://github.com/DomeSy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;directory&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;描述话语&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;script&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#script&#34;&gt;#&lt;/a&gt; script&lt;/h2&gt;
&lt;p&gt;指定对应命令的脚本（缩写）, 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;&#34;scripts&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token property&#34;&gt;&#34;start&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;cross-env UMI_ENV=dev umi dev&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当执行 &lt;code&gt;npm run script&lt;/code&gt;  的时候就相当于执行了 &lt;code&gt;cross-env UMI_ENV=dev umi dev&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;config&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#config&#34;&gt;#&lt;/a&gt; config&lt;/h2&gt;
&lt;p&gt;用来添加命令行的环境变量， 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;domesy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;config&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;port&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;8088&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;script&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;start&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;node server.js&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当我们在 node 环境中打印 &lt;code&gt;process.npm_package_config_port&lt;/code&gt;  的时候就会打印出 8080&lt;/p&gt;
&lt;h2 id=&#34;engines&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#engines&#34;&gt;#&lt;/a&gt; engines&lt;/h2&gt;
&lt;p&gt;用来指定本库的运行条件， 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;engines&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;node&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&gt;=0.10.3 &amp;lt;0.12&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里就限制了，如果想要运行本库，node 的版本必须大于等于 0.10.3 小于 0.12&lt;/p&gt;
&lt;h2 id=&#34;os&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#os&#34;&gt;#&lt;/a&gt; os&lt;/h2&gt;
&lt;p&gt;用来指定可以在哪些操作系统上运行，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;os&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;linux&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;win64&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;就说明可以在 &lt;code&gt;linux&lt;/code&gt;  和 &lt;code&gt;64位的windows&lt;/code&gt;  操作系统上运行&lt;/p&gt;
&lt;h2 id=&#34;cpu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt; cpu&lt;/h2&gt;
&lt;p&gt;用来指定可以在哪些架构下的 &lt;code&gt;cpu&lt;/code&gt;  上运行， 比如:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;cpu&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;x64&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ia32&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;private&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#private&#34;&gt;#&lt;/a&gt; private&lt;/h2&gt;
&lt;p&gt;用来指定这是否是一个私人的库，如果是，那么就不能在 npm 上面发布公开，  &lt;code&gt;boolean&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;publishconfig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#publishconfig&#34;&gt;#&lt;/a&gt; publishConfig&lt;/h2&gt;
&lt;p&gt;用来指定发包时候的一些配置，比如发到哪个包管理服务器上面，是发布哪个版本，访问级别（哪些用户可以访问）比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;publishConfig&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;tag&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 发布 1.0.0 版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;registry&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://www.npmjs.com/package/domesy-cli&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 发布到这个包管理服务器上面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;access&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;public&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 所有用户都可以访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;preferglobal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preferglobal&#34;&gt;#&lt;/a&gt; preferGlobal&lt;/h2&gt;
&lt;p&gt;用来指定当用户不全局下载该库的时候是否发出警告，  &lt;code&gt;boolean&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;browserslist&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#browserslist&#34;&gt;#&lt;/a&gt; browserslist&lt;/h2&gt;
&lt;p&gt;指定该库支持的浏览器类型， 比如&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;browserslist&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;production&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&gt;0.2%&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;not dead&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;not op_mini all&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;development&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;last 1 chrome version&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;last 1 firefox version&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;last 1 safari version&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/esbuildPlugin/</guid>
            <title>怎么写一个esbuild插件</title>
            <link>https://zimu-66ccff.github.io/esbuildPlugin/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="深入浅出vite" scheme="https://zimu-66ccff.github.io/tags/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAvite/" />
            <pubDate>Thu, 27 Jul 2023 16:07:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;esbuild-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esbuild-api&#34;&gt;#&lt;/a&gt; esbuild API&lt;/h1&gt;
&lt;h3 id=&#34;项目打包-build-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目打包-build-api&#34;&gt;#&lt;/a&gt; 项目打包 build API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普通 api&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;build API&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; esbuild &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;esbuild&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;runBuild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 异步方法，返回一个 Promise&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; esbuild&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//---- 如下是一些常见的配置 ---&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 当前项目根目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    absWorkingDir&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 入口文件列表，为一个数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    entryPoints&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./src/index.jsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 打包产物目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    outdir&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 是否需要打包，一般设为 true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    bundle&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 模块格式，包括 `esm`、`commonjs` 和 `iife`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    format&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;esm&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 需要排除打包的依赖列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    external&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 是否开启自动拆包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    splitting&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 是否生成 SourceMap 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sourcemap&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 是否生成打包的元信息文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    metafile&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 是否进行代码压缩&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    minify&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 是否将产物写入磁盘&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    write&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// Esbuild 内置了一系列的 loader，包括 base64、binary、  css、dataurl、file、js (x)、ts (x)、text、json&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 针对一些特殊的文件，调用不同的 loader 进行加载&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    loader&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string-property property&#34;&gt;&#39;.png&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;base64&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;runBuild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;result&lt;/code&gt;  为 esbuild 打包的原信息&lt;br /&gt;
&lt;a href=&#34;https://imgse.com/i/pP938ud&#34;&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/07/31/pP938ud.md.png&#34; alt=&#34;esbuild打包原信息&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高级 api（依赖于构建上下文）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;watch API&lt;br /&gt;
 开启 &lt;code&gt;watch mode&lt;/code&gt; ，一旦有文件发生改变，直接自动重新打包&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; ctx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; esbuild&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  entryPoints&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;app.ts&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  bundle&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  outdir&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serve API&lt;br /&gt;
 开启 &lt;code&gt;serve mode&lt;/code&gt; ，启动本地开发服务器 ，不是将打包后的代码写进磁盘，而是通过请求来获取，当每次请求到来时，都会 &lt;code&gt;rebuild&lt;/code&gt; ，返回最新的产物&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// build.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; build&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buildSync&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; serve &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;esbuild&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;runBuild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;serve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      port&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 静态资源目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      servedir&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./dist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      absWorkingDir&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      entryPoints&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./src/index.jsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      bundle&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      format&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;esm&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      splitting&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      sourcemap&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ignoreAnnotations&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      metafile&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;server&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;HTTP Server starts at port&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; server&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;runBuild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单文件转译-transform-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单文件转译-transform-api&#34;&gt;#&lt;/a&gt; 单文件转译 transform API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;transform Api&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// transform.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; transform&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; transformSync &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;esbuild&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;runTransform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 第一个参数是代码字符串，第二个参数为编译配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; content &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;const isNull = (str: string): boolean =&gt; str.length &gt; 0;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sourcemap&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    loader&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;tsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;runTransform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;esbuild-插件开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esbuild-插件开发&#34;&gt;#&lt;/a&gt; esbuild 插件开发&lt;/h1&gt;
&lt;h3 id=&#34;插件基本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插件基本结构&#34;&gt;#&lt;/a&gt; 插件基本结构&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;esbuild&lt;/code&gt;  插件的结构为一个有 &lt;code&gt;name&lt;/code&gt; ,  &lt;code&gt;setup&lt;/code&gt;  属性的 obj。&lt;br /&gt;
 &lt;code&gt;name&lt;/code&gt;  属性为插件的名称&lt;br /&gt;
 &lt;code&gt;setup&lt;/code&gt;  属性为一个函数，有一个参数为 &lt;code&gt;build&lt;/code&gt;  对象，这个 &lt;code&gt;build&lt;/code&gt;  对象身上有我们需要的一些钩子函数&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; envPlugin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;env&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;build&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;onResolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; filter&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;^env$&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      namespace&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;env-ns&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;onLoad&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; filter&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;.*&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; namespace&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;env-ns&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      contents&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      loader&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;esbuild&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    entryPoints&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;src/index.jsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    bundle&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    outfile&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;out.js&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 应用插件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    plugins&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;envPlugin&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;插件钩子函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插件钩子函数&#34;&gt;#&lt;/a&gt; 插件钩子函数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onStart&lt;/code&gt; &lt;br /&gt;
 执行时机是每次 build 的时候，包括 &lt;code&gt;watch mode&lt;/code&gt;  和 &lt;code&gt;serve mode&lt;/code&gt;  模式下的重新构建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onResolve&lt;/code&gt; &lt;br /&gt;
 用来控制路径解析，具有两个参数 &lt;code&gt;options&lt;/code&gt; ,  &lt;code&gt;callback&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt;  的类型&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  filter&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RegExp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  namespace&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;  为必传参数，为一个正则表达式，用来过滤出需要处理的文件&lt;br /&gt;
 &lt;code&gt;namespace&lt;/code&gt;  为选填参数， 为我们过滤出来的需要处理的文件进行一个标记，在 &lt;code&gt;callback&lt;/code&gt;  里面返回，从而在 &lt;code&gt;onLoad&lt;/code&gt;  钩子函数中找到并处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt;  常见参数及其返回值&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;build&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;onResolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; filter&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;^env$&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; onResolveArgs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; onResolveResult &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 模块路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 父模块路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;importer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;//namespace 标识&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;namespace&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 基准路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;resolveDir&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 导入方式，如 import、require&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;kind&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 额外绑定的插件数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pluginData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 错误信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       errors&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 是否需要 external&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       external&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;//namespace 标识&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       namespace&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;env-ns&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 模块路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 额外绑定的插件数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       pluginData&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 插件名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       pluginName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 设置为 false，如果模块没有被用到，模块代码将会在产物     中   会删除。否则不会这么做&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       sideEffects&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 添加一些路径后缀，如 `?xxx`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       suffix&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;?xxx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 警告信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       warnings&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 仅仅在 Esbuild 开启 watch 模式下生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 告诉 Esbuild 需要额外监听哪些文件 / 目录的变化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       watchDirs&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       watchFiles&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onLoad&lt;/code&gt; &lt;br /&gt;
 控制模块内容加载的过程， 具有两个参数 &lt;code&gt;options&lt;/code&gt; ,  &lt;code&gt;callback&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt;  的类型&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  filter&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RegExp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  namespace&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;  为必传参数，为一个正则表达式，用来过滤出需要处理的文件&lt;br /&gt;
 &lt;code&gt;namespace&lt;/code&gt;  为选填参数， 通过 &lt;code&gt;namespace&lt;/code&gt;  来将需要处理的模块的过滤出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt;  常见参数及其返回值&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;build&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;onLoad&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; filter&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;.*&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; namespace&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;env-ns&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; OnLoadArgs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; OnLoadResult &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 模块路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//namespace 标识&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;namespace&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 后缀信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;suffix&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 额外的插件数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pluginData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 模块具体内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    contents&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;省略内容&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 错误信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    errors&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 指定 loader，如 `js`、`ts`、`jsx`、`tsx`、`json` 等         等&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    loader&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 额外的插件数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    pluginData&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 插件名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    pluginName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 基准路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    resolveDir&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./dir&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 警告信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    warnings&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 同上&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    watchDirs&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    watchFiles&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onEnd&lt;/code&gt; &lt;br /&gt;
 在打包结束时做一些事情，比如拿到打包的原信息 &lt;code&gt;matafile&lt;/code&gt;  来做一些事情，但是想要拿到 &lt;code&gt;metafile&lt;/code&gt; ，必须将 &lt;code&gt;metafile&lt;/code&gt;  属性设置为 &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; examplePlugin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;example&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;build&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;onStart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;build started&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;onEnd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buildResult&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buildResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;errors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 构建元信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 获取元信息后做一些自定义的事情，比如生成 HTML&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buildResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;metafile&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;esbuild-插件示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esbuild-插件示例&#34;&gt;#&lt;/a&gt; esbuild 插件示例&lt;/h1&gt;
&lt;h3 id=&#34;html-pluginjs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html-pluginjs&#34;&gt;#&lt;/a&gt; html-plugin.js&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; fs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;fs/promises&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createScript&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; createLink&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; generateHTML &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./util&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;esbuild:html&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;build&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      build&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;onEnd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buildResult&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buildResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;errors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; metafile &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; buildResult&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 1. 拿到 metafile 后获取所有的 js 和 css 产物路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; scripts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; links &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;metafile&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; outputs &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; metafile&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; assets &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;outputs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          assets&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;asset&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;asset&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;endsWith&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;.js&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              scripts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createScript&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;asset&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;asset&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;endsWith&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;.css&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              links&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createLink&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;asset&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 2. 拼接 HTML 内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; templateContent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;generateHTML&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;scripts&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; links&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 3. HTML 写入磁盘&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; templatePath &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;index.html&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; fs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;templatePath&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; templateContent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// util.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 一些工具函数的实现&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;createScript&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;src&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;script type=&#34;module&#34; src=&#34;&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;src&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&gt;&amp;lt;/script&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;createLink&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;src&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;src&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&gt;&amp;lt;/link&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;generateHTML&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;scripts&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; links&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;!DOCTYPE html&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;html lang=&#34;en&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;head&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &amp;lt;meta charset=&#34;UTF-8&#34; /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34; /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &amp;lt;title&gt;Esbuild App&amp;lt;/title&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;links&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;/head&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;body&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &amp;lt;div id=&#34;root&#34;&gt;&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;scripts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;/body&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;/html&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createLink&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; createScript&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; generateHTML &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/vite%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BE%97%E5%8A%9B%E5%8A%A9%E6%89%8B-esbuild-rollup/</guid>
            <title>vite的两个得力助手-esbuild-rollup</title>
            <link>https://zimu-66ccff.github.io/vite%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BE%97%E5%8A%9B%E5%8A%A9%E6%89%8B-esbuild-rollup/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="深入浅出vite" scheme="https://zimu-66ccff.github.io/tags/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAvite/" />
            <pubDate>Wed, 26 Jul 2023 17:47:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;esbuild&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esbuild&#34;&gt;#&lt;/a&gt; esbuild&lt;/h1&gt;
&lt;h3 id=&#34;esubuild-为什么快vite-选择-esbuild-在开发环境打包第三方依赖的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esubuild-为什么快vite-选择-esbuild-在开发环境打包第三方依赖的原因&#34;&gt;#&lt;/a&gt; esubuild 为什么快 (vite 选择 esbuild 在开发环境打包第三方依赖的原因)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 Go 开发&lt;br /&gt;
 Go 的代码会被直接编译成原生机器码，而不需要像 JS 一样先解析为字节码，然后再转换成字节码，大大的节省了程序运行的时间、&lt;/li&gt;
&lt;li&gt;多核并行&lt;br /&gt;
因为 Go 中多线程共享内存的优势，内部打包算法充分的利用了多核 CPU 的多核优势，使得所有步骤尽可能的并行&lt;/li&gt;
&lt;li&gt;从零造轮子&lt;br /&gt;
几乎没有使用第三方库，全部是自己编写的逻辑，保证了代码的极致性能&lt;/li&gt;
&lt;li&gt;高效的内存利用&lt;br /&gt;
 Esbuild 中从头到尾尽可能地复用一份 AST 节点数据，而不用像 JS 打包工具中频繁地解析和传递 AST 数据（如 string -&amp;gt; TS -&amp;gt; JS -&amp;gt; string)，造成内存的大量浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;esbuild-的不足vite-为什么在生产环境不选择-esbuild-而选择了-rollup-来进行打包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esbuild-的不足vite-为什么在生产环境不选择-esbuild-而选择了-rollup-来进行打包&#34;&gt;#&lt;/a&gt; esbuild 的不足（vite 为什么在生产环境不选择 esbuild 而选择了 rollup 来进行打包）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无法兼容低端浏览器&lt;br /&gt;
不支持把语法降级到 &lt;code&gt;es5&lt;/code&gt; ，不支持 &lt;code&gt;const enum&lt;/code&gt;  等高级语法&lt;/li&gt;
&lt;li&gt;无法灵活处理打包产物，无法自定义拆包&lt;br /&gt;
没有提供操作打包产物的接口，没有提供子定义拆包策略的 api&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vite-用-esbuild-做了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vite-用-esbuild-做了什么&#34;&gt;#&lt;/a&gt; vite 用 esbuild 做了什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bunder
&lt;ol&gt;
&lt;li&gt;在开发环境，为了顺利的实现 &lt;code&gt;no-bunder&lt;/code&gt; ，在&lt;strong&gt;预构建&lt;/strong&gt;使用 esuild 来将其他的模块化规范转换成了 &lt;code&gt;esm&lt;/code&gt; （因为 &lt;code&gt;no-bundler&lt;/code&gt;  本质上是利用了浏览器原生支持 esm，让浏览器来请求对应模块）&lt;/li&gt;
&lt;li&gt;使用 esbuild 来对第三方依赖进行打包（避免出现请求瀑布流，浏览器发起过多请求，导致首屏时间过长）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;transformer&lt;br /&gt;
 进行单文件编译，作为 TS, JSX, TSX 的编译工具，并且在&lt;strong&gt;生产环境&lt;/strong&gt;也是用的 esbuild 来进行编译。但是无法进行 ts 的类型检查，所以还是需要利用 &lt;code&gt;tsc&lt;/code&gt;  来进行类型检查&lt;/li&gt;
&lt;li&gt;minifier&lt;br /&gt;
 对 css, js 文件进行压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rollup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rollup&#34;&gt;#&lt;/a&gt; rollup&lt;/h1&gt;
&lt;h3 id=&#34;vite-用-rollup-做了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vite-用-rollup-做了什么&#34;&gt;#&lt;/a&gt; vite 用 rollup 做了什么&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生产环境利用 &lt;code&gt;rollup&lt;/code&gt;  进行打包，并对其进行扩展和优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS 代码分割&lt;br /&gt;
如果某个异步模块中引入了一些 CSS 代码，Vite 就会自动将这些 CSS 抽取出来生成单独的文件，提高线上产物的缓存复用率。&lt;/li&gt;
&lt;li&gt;自动预加载&lt;br /&gt;
 Vite 会自动为入口 chunk 的依赖自动生成预加载标签 &lt;code&gt;&amp;lt;link       rel=&amp;quot;modulepreload&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;异步 Chunk 加载优化&lt;br /&gt;
在异步引入的 Chunk 中，通常会有一些公用的模块，如现有两个 异 步引入的 Chunk: A 和 B，而且两者有一个公共依赖 C，一般 情况 下，Rollup 打包之后，会先请求 A，然后浏览器在加载 A 的过程 中才决定请求和加载 C，但 Vite 进行优化之后，请求 A 的同时会 自动预加载 C，通过优化 Rollup 产物依赖加载方式节省 了不必要 的网络开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兼容了 &lt;code&gt;rollup&lt;/code&gt;  的插件机制&lt;br /&gt;
 vite 插件可以直接传入 rollup 作为插件使用，但是 rollup 的插件不一定能直接传入 vite 作为 vite 插件使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/engineeringProblems-viteLearning/</guid>
            <title>前端工程化痛点-vite的解决方案-深入浅出vite学习</title>
            <link>https://zimu-66ccff.github.io/engineeringProblems-viteLearning/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="深入浅出vite" scheme="https://zimu-66ccff.github.io/tags/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAvite/" />
            <pubDate>Wed, 26 Jul 2023 15:04:39 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端工程化的痛点及-vite-的解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端工程化的痛点及-vite-的解决方案&#34;&gt;#&lt;/a&gt; 前端工程化的痛点及 vite 的解决方案&lt;/h1&gt;
&lt;h3 id=&#34;痛点一模块化规范太多需要一个支持和兼容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点一模块化规范太多需要一个支持和兼容&#34;&gt;#&lt;/a&gt; 痛点一：模块化规范太多，需要一个支持和兼容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;支持 ESM 模块化方案（支持异步，浏览器原生支持），由于浏览器原生支持 ESM，所以可以基于 ESM 实现  &lt;code&gt;no-bunder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;兼容其他的模块化方案，通过在 &lt;code&gt;预构建&lt;/code&gt; 过程中来使用 &lt;code&gt;esbuild&lt;/code&gt;  来将其他模块化方案转换成 ESM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化方案面对的问题
&lt;ul&gt;
&lt;li&gt;模块的拆分&lt;/li&gt;
&lt;li&gt;模块的依赖关系导致的加载顺序（a 模块依赖 b 模块，那就需要先引入 b 模块再引入 a 模块）&lt;/li&gt;
&lt;li&gt;变量命名冲突&lt;/li&gt;
&lt;li&gt;浏览器是否兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化方案发展历史
&lt;ul&gt;
&lt;li&gt;第一阶段：通过 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  来做模块化，但是存在变量命名冲突，模块加载顺序的问题&lt;/li&gt;
&lt;li&gt;第二阶段：通过 &lt;code&gt;命名空间（window.moduleA, window,moduleB）&lt;/code&gt; 来做模块化，解决了变量命名冲突，但是 没有解决模块加载顺序的问题&lt;/li&gt;
&lt;li&gt;第三阶段：通过  &lt;code&gt;IIFE（立即执行函数）&lt;/code&gt; 来做模块化，解决了变量命名冲突，但是没有解决模块加载顺序的问题&lt;/li&gt;
&lt;li&gt;第四阶段：通过  &lt;code&gt;CommonJS&lt;/code&gt;  规范来做模块化，解决了变量冲突，模块加载顺序的问题，但是存在一个加载是同 步的问题（这在浏览器是个大问题，当加载的模块过大时，会阻塞后续代码的执行，会造成界面白屏时间过长），并且 浏览器并不支持这个模块化方案&lt;/li&gt;
&lt;li&gt;第五阶段：通过  &lt;code&gt;AMD&lt;/code&gt;  来做模块化，也就是异步模块定义方案，解决了上述的问题，但是写起来太麻烦，并且也 没有得到浏览器的支持&lt;/li&gt;
&lt;li&gt;最终阶段：通过 &lt;code&gt;ESM&lt;/code&gt;  来做模块化，完美解决了上述问题所有问题（变量命名冲突，模块加载顺序），并且加载是 异步的，不会阻塞页面渲染，并且是浏览器原生支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛点二需要对-tstsx-等高级语法做一个转译对静态资源做处理使其能作为一个正常模块加载能够对语法做一个降级并注入一些高级语法以支持低级浏览器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点二需要对-tstsx-等高级语法做一个转译对静态资源做处理使其能作为一个正常模块加载能够对语法做一个降级并注入一些高级语法以支持低级浏览器&#34;&gt;#&lt;/a&gt; 痛点二：需要对 ts，tsx 等高级语法做一个转译，对静态资源做处理，使其能作为一个正常模块加载，能够对语法做一个降级，并注入一些高级语法，以支持低级浏览器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;esbuild&lt;/code&gt;  来对 ts，tsx 等语法来进行一个转译（但是 ts 的语法检查还是需要 &lt;code&gt;tsc&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;vite 内置对 JSON 模块的加载（底层使用 @rollup/pluginutils 的 dataToEsm 方法将 JSON 对象转换为一 个包含各种具名导出的 ES 模块）&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;bable&lt;/code&gt;  来将高级语法编译成低级语法（比如把箭头函数变成普通函数），通过 &lt;code&gt;corejs&lt;/code&gt;  来注入一些高级 API (比如 promise)，从而兼容低版本的浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛点三提高产物质量要能给对代码进行压缩和-treeshaking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点三提高产物质量要能给对代码进行压缩和-treeshaking&#34;&gt;#&lt;/a&gt; 痛点三：提高产物质量，要能给对代码进行压缩和 Treeshaking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;esbuild&lt;/code&gt;  来对代码进行一个压缩&lt;/li&gt;
&lt;li&gt;treeShaking (待更新)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛点四开发效率低下开发启动时间很长热更新很慢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点四开发效率低下开发启动时间很长热更新很慢&#34;&gt;#&lt;/a&gt; 痛点四：开发效率低下，开发启动时间很长，热更新很慢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;开发阶段直接 &lt;code&gt;no-bunder&lt;/code&gt;  不打包直接启动，利用浏览器原生支持 ESM 的这一点，让浏览器来加载源代码对应的模块（在预构建过程中，利用 &lt;code&gt;esbuild&lt;/code&gt;  来将其他模块化方案转换成 ESM，并打包第三方依赖，避免请求瀑布的出现，导致白屏时间过长）&lt;/li&gt;
&lt;li&gt;热更新（待更新）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/download/</guid>
            <title>前端实现文件下载的几种方式</title>
            <link>https://zimu-66ccff.github.io/download/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="项目" scheme="https://zimu-66ccff.github.io/categories/note/project/" />
            <category term="项目" scheme="https://zimu-66ccff.github.io/tags/%E9%A1%B9%E7%9B%AE/" />
            <category term="文件下载" scheme="https://zimu-66ccff.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/" />
            <pubDate>Tue, 18 Jul 2023 10:13:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;后端提供的下载文件的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后端提供的下载文件的方式&#34;&gt;#&lt;/a&gt; 后端提供的下载文件的方式&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;直接返回文件的网络地址（一般用在静态文件上，比如图片以及各种音视频资源等）&lt;/li&gt;
&lt;li&gt;返回文件流（一般用在动态文件上，比如根据前端选择，导出不同的统计结果 excel 等）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;不同方式前端的处理方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不同方式前端的处理方案&#34;&gt;#&lt;/a&gt; 不同方式，前端的处理方案&lt;/h1&gt;
&lt;h4 id=&#34;第一种&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一种&#34;&gt;#&lt;/a&gt; 第一种&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 a 标签的 &lt;code&gt;download&lt;/code&gt;  属性和 &lt;code&gt;click&lt;/code&gt;  函数&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;https://www.baidu.top.pdf&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;download&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;附件.pdf&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;下载文件&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;window.location.href&lt;/code&gt;  (推荐)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javaScript&#34;&gt;&amp;lt;script&amp;gt;
function Download() &amp;#123;
  window.location.href = &#39;www.baidu.pdf&#39;
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;window.open&lt;/code&gt;  (推荐)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javaScript&#34;&gt;&amp;lt;script&amp;gt;
  function Download() &amp;#123;
    window.open(&#39;www.baidu.pdf&#39;)
  &amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第二种-使用-blob-文件流下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二种-使用-blob-文件流下载&#34;&gt;#&lt;/a&gt; 第二种 使用 blob 文件流下载&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-javaScript&#34;&gt; &amp;lt;script&amp;gt;
    function Download() &amp;#123;
      axios(&amp;#123;
        url: &amp;quot;www.baidu.pdf&amp;quot;,
        method: &#39;GET&#39;,
        responseType: &#39;blob&#39;, // 这里就是转化为blob文件流
        headers: &amp;#123;
          token: &#39;sss&#39;     // 可以携带token
        &amp;#125;
      &amp;#125;).then(res =&amp;gt; &amp;#123;
        const href = URL.createObjectURL(res.data)
        const box = document.createElement(&#39;a&#39;)
        box.download = &#39;附件.pdf&#39;
        box.href = href
        box.click()
      &amp;#125;)
    &amp;#125;
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/omi/</guid>
            <title>腾讯犀牛鸟开源活动-OMI开源申请书</title>
            <link>https://zimu-66ccff.github.io/omi/</link>
            <category term="开源" scheme="https://zimu-66ccff.github.io/categories/openSource/" />
            <category term="开源" scheme="https://zimu-66ccff.github.io/tags/%E5%BC%80%E6%BA%90/" />
            <category term="omi" scheme="https://zimu-66ccff.github.io/tags/omi/" />
            <pubDate>Mon, 17 Jul 2023 09:40:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;omi-开源申请书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#omi-开源申请书&#34;&gt;#&lt;/a&gt; OMI 开源申请书&lt;/h1&gt;
&lt;h2 id=&#34;技术方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术方案&#34;&gt;#&lt;/a&gt; 技术方案&lt;/h2&gt;
&lt;h4 id=&#34;omi-编程任务分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#omi-编程任务分解&#34;&gt;#&lt;/a&gt; OMI 编程任务分解&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;开发脚手架搭建&lt;/li&gt;
&lt;li&gt;组件开发&lt;/li&gt;
&lt;li&gt;组件设计器开发&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任务-1开发-omi-组件库脚手架以自动生成-omi-组件模板辅助后续组件开发并集成-tdesign-common-提供的-tdesign-样式文件和工具函数保持组件的样式风格一致&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务-1开发-omi-组件库脚手架以自动生成-omi-组件模板辅助后续组件开发并集成-tdesign-common-提供的-tdesign-样式文件和工具函数保持组件的样式风格一致&#34;&gt;#&lt;/a&gt; 任务 1：开发 OMI 组件库脚手架，以自动生成 OMI 组件模板辅助后续组件开发，并集成 Tdesign-common 提供的 Tdesign 样式文件和工具函数，保持组件的样式风格一致&lt;/h4&gt;
&lt;p&gt;实战周期 2--3 周&lt;/p&gt;
&lt;p&gt;目标一：借鉴生态成熟的组件库脚手架 比如 valet-cli 抽离出 OMI 的 webComponents 的公共模板 以自动生成组件模板辅助开发&lt;br /&gt;
预计耗时： 一周&lt;/p&gt;
&lt;p&gt;目标二：在脚手架里集成 Tdesign-common 提供的样式文件和工具函数，以实现通过命令生成对应组件模板的时候可以根据配置选择是否自动导入类似组件的样式文件&lt;br /&gt;
预计耗时：一周&lt;/p&gt;
&lt;p&gt;本人优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;研究过 varlet-cli 源码，有脚手架开发经验&lt;/li&gt;
&lt;li&gt;开发过简易脚手架，来自动化实现相关配置和集成&lt;br /&gt;
链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2ZmL3ppTXUtY2xp&#34;&gt;https://github.com/ziMu-66ccff/ziMu-cli&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;可以熟练使用 inquirer，figlet，fs-extra，chalk， commander 等工具库&lt;/li&gt;
&lt;li&gt;有比较好的审美&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任务-2利用上一步提供的脚手架来辅助开发基于-omi-和-tdesign-common-的相关组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务-2利用上一步提供的脚手架来辅助开发基于-omi-和-tdesign-common-的相关组件&#34;&gt;#&lt;/a&gt; 任务 2：利用上一步提供的脚手架来辅助开发基于 OMI 和 Tdesign-common 的相关组件&lt;/h4&gt;
&lt;p&gt;实战周期：2-3 周&lt;/p&gt;
&lt;p&gt;目标一：通过对组件的复杂程度排个序，来从简到难的逐步开发相关的组件，可以借鉴主流的生态完善的组件库 比如 ant-design&lt;br /&gt;
 预计耗时 2.5 周&lt;/p&gt;
&lt;p&gt;本人优势:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在合合信息实习时 参与过部门的高度定制化的组件库的开发，有一定的组件库开发能力&lt;/li&gt;
&lt;li&gt;参加字节青训营时，和小伙伴们一起开发过 lucky-Componets 组件库&lt;br /&gt;
链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xpdVNlbjY4OC9sdWNreUNvbXBvbmVudHM=&#34;&gt;https://github.com/LiuSen688/luckyComponents&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任务-3开发基于-omi-的组件设计器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务-3开发基于-omi-的组件设计器&#34;&gt;#&lt;/a&gt; 任务 3：开发基于 OMI 的组件设计器&lt;/h4&gt;
&lt;p&gt;实战周期： 3 周以上&lt;/p&gt;
&lt;p&gt;目标：在相关导师的指导下，完善自己低代码开发的能力，努力再努力，热情再热情的完成这个组件设计器的开发&lt;/p&gt;
&lt;h4 id=&#34;申请人项目经历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#申请人项目经历&#34;&gt;#&lt;/a&gt; 申请人项目经历&lt;/h4&gt;
&lt;p&gt;github：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2Zm&#34;&gt;https://github.com/ziMu-66ccff&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ziMu-cli， 一款简单的开箱即用的搭建 vue，react 项目的脚手架&lt;br /&gt;
项目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2ZmL3ppTXUtY2xp&#34;&gt;https://github.com/ziMu-66ccff/ziMu-cli&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;lucky-components， 一款合作完成的适配 vue3 的组件库&lt;br /&gt;
项目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xpdVNlbjY4OC9sdWNreUNvbXBvbmVudHM=&#34;&gt;https://github.com/LiuSen688/luckyComponents&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;mini-vue3 自己学习 vue3 源码后 写的一个简单的 vue3 框架&lt;br /&gt;
项目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2ZmL21pbmktdnVlMw==&#34;&gt;https://github.com/ziMu-66ccff/mini-vue3&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;前端全栈开发能力 熟练使用 Vue.js， OMI， Nest.js, mongoDB 等&lt;/li&gt;
&lt;li&gt;对 vite，webpack 有一定了解&lt;/li&gt;
&lt;li&gt;目前大二，在合合信息实习&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;姓名：李文豪&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/bigProject/</guid>
            <title>瑞翼工坊暑期大项目宣讲会</title>
            <link>https://zimu-66ccff.github.io/bigProject/</link>
            <category term="学校" scheme="https://zimu-66ccff.github.io/categories/school/" />
            <category term="学校" scheme="https://zimu-66ccff.github.io/tags/%E5%AD%A6%E6%A0%A1/" />
            <category term="瑞翼工坊" scheme="https://zimu-66ccff.github.io/tags/%E7%91%9E%E7%BF%BC%E5%B7%A5%E5%9D%8A/" />
            <pubDate>Fri, 07 Jul 2023 15:53:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;为什么我们需要做这样的一个平台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么我们需要做这样的一个平台&#34;&gt;#&lt;/a&gt; 为什么我们需要做这样的一个平台？&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;工坊的很多东西 散落在各个地方 刚进来的人无法知道工坊的财富 无法得到自己需要的东西 所以我们用这样的一个平台对其做一个整合，让工坊成员都能得到自己想要的东西&lt;/li&gt;
&lt;li&gt;开发部门的新人缺少一个项目开发的经验，我们以这样的一个平台，来让新人得到锻炼，并且提供一对一的指导&lt;/li&gt;
&lt;li&gt;有新的技术，奇妙的想法，无法付诸于实践， 所以我们提供这样的一个可扩展的平台，随时对其进行扩展。&lt;/li&gt;
&lt;li&gt;开发部门的新人们简历上缺乏一个优秀的，高技术的，真正的项目（有访问量的），缺乏项目部署的经验，业务思维，而我们提供这样的一个项目&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;开发完毕后我们将得到什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发完毕后我们将得到什么&#34;&gt;#&lt;/a&gt; 开发完毕后，我们将得到什么&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;一个真正的项目开发经验，部署经验（这是区别于网上的项目的）&lt;/li&gt;
&lt;li&gt;获得业务思维，提升业务能力 （业务能力也是面试时很看重的一点，而这种真正的项目，不是为了做而做的项目，有背景的项目可以很好的提升业务思维）&lt;/li&gt;
&lt;li&gt;获取一定的名誉，如果可以的话，项目将向全计信推广，我们也会将开发者的名字放到项目里&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;具体开发信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体开发信息&#34;&gt;#&lt;/a&gt; 具体开发信息&lt;/h1&gt;
&lt;h3 id=&#34;模块拆分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块拆分&#34;&gt;#&lt;/a&gt; 模块拆分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工坊（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;瑞翼荣耀 （小卡片）&lt;/li&gt;
&lt;li&gt;场地助手 （小卡片）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;技术学习（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;方向介绍 （小卡片）
&lt;ul&gt;
&lt;li&gt;前端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;服务端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;vr （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;算法部 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学习路线 （小卡片）
&lt;ul&gt;
&lt;li&gt;前端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;服务端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;vr （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;算法部 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每日一问 （小卡片）
&lt;ul&gt;
&lt;li&gt;前端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;服务端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;vr （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;算法部 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;暑期实习，秋招公司信息 （小卡片）&lt;/li&gt;
&lt;li&gt;开发平台 （小卡片）
&lt;ul&gt;
&lt;li&gt;jekins （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;coding （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;tapd （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活动（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;训练营 （小卡片） ps：建议支持一键组队功能&lt;/li&gt;
&lt;li&gt;开源活动 （小卡片） ps：建议支持一键组队功能&lt;/li&gt;
&lt;li&gt;比赛 （小卡片） ps: 建议支持一键组队功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;练习（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;工坊 oj 平台 （小卡片）&lt;/li&gt;
&lt;li&gt;leetcode （小卡片）&lt;/li&gt;
&lt;li&gt;前端刷题网站 （小卡片）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学校 （顶部导航栏）
&lt;ul&gt;
&lt;li&gt;学校平台 （小卡片）
&lt;ul&gt;
&lt;li&gt;湖大 vpn （小卡片）&lt;/li&gt;
&lt;li&gt;智慧服务中心 （小卡片）&lt;/li&gt;
&lt;li&gt;教务系统 （小卡片）&lt;/li&gt;
&lt;li&gt;实践系统 （小卡片）&lt;/li&gt;
&lt;li&gt;图书管理系统 （小卡片）&lt;/li&gt;
&lt;li&gt;体测系统 （小卡片）&lt;/li&gt;
&lt;li&gt;LMS 课程平台 （小卡片）&lt;/li&gt;
&lt;li&gt;宿管系统 （小卡片）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;课程资料 （小卡片）
&lt;ul&gt;
&lt;li&gt;cpp （小卡片 or 左侧一级导航栏） ps： 只是一个例子
&lt;ul&gt;
&lt;li&gt;知识总结 （小卡片 or 左侧二级导航栏）&lt;/li&gt;
&lt;li&gt;推荐书籍 （小卡片 or 左侧二级导航栏）&lt;/li&gt;
&lt;li&gt;课后习题答案 （小卡片 or 左侧二级导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;友链 （顶部导航栏）&lt;/li&gt;
&lt;li&gt;小工具 （顶部导航栏）&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/workflowConfig/</guid>
            <title>前端工作流配置——代码不仅是给机器看的，也是给人看的（持续更新中）</title>
            <link>https://zimu-66ccff.github.io/workflowConfig/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="工作流配置" scheme="https://zimu-66ccff.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81%E9%85%8D%E7%BD%AE/" />
            <pubDate>Mon, 19 Jun 2023 19:41:24 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslint&#34;&gt;#&lt;/a&gt; eslint&lt;/h1&gt;
&lt;h3 id=&#34;为什么需要-eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要-eslint&#34;&gt;#&lt;/a&gt; 为什么需要 eslint&lt;/h3&gt;
&lt;p&gt;因为我们写的代码有时候可能质量并不高，所以我们需要这样的一个工具来 &lt;code&gt;规范我们的代码&lt;/code&gt; ，保障我们的 &lt;code&gt;代码质量&lt;/code&gt; （比如我们写了一个变量 但是这个变量我们没有使用 那么这个变量就是多余的 这时候我们的 eslint 可以直接报错 让我们知道这个多余的变量应该删除）&lt;/p&gt;
&lt;h3 id=&#34;怎么在项目中集成-eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么在项目中集成-eslint&#34;&gt;#&lt;/a&gt; 怎么在项目中集成 eslint&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载 eslint&lt;br /&gt;
 使用你的包管理工具（pnpm，yarn，npm，npx）安装 eslint 具体命令  &lt;code&gt;pnpm install eslint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化 eslint（）&lt;br /&gt;
具体命令  &lt;code&gt;pnpm eslint --init&lt;/code&gt; , 执行该命令后会让你 &lt;code&gt;回答相关问题&lt;/code&gt; ，从而选择适合你的规则来约束你的代码，目的只有一个提高你的代码质量
&lt;ul&gt;
&lt;li&gt;how would you like to use eslint?（你想使用 eslint 来做什么）
&lt;ul&gt;
&lt;li&gt;to check syntax only（只检查语法）&lt;/li&gt;
&lt;li&gt;to check syntax and find problems（检查语法并找出错误）&lt;/li&gt;
&lt;li&gt;to check syntax, find problems, and enforce code style （检查语法，找出错误，规范代码）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what type of modules does your project use? （你想使用什么模块化规范）
&lt;ul&gt;
&lt;li&gt;javascript modules (import/export)&lt;/li&gt;
&lt;li&gt;commonjs (require/exports)&lt;/li&gt;
&lt;li&gt;none of these&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;which framework does your project use? （你想使用什么框架）
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;none of these&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Does your project use Typescript No/Yes （是否要使用 ts）&lt;/li&gt;
&lt;li&gt;Where does your code run? （代码运行在什么环境，一般两个都选）
&lt;ul&gt;
&lt;li&gt;Browser&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How would you like to define a style for your project? （你想怎么来定义 eslint 的规则， 推荐直接使用流行的规范）
&lt;ul&gt;
&lt;li&gt;use a popular style guide （使用流行的规范）&lt;/li&gt;
&lt;li&gt;answer questions about your style （通过询问问题 得到你想要的规范吧）&lt;/li&gt;
&lt;li&gt;inspect your javascript files （根据配置文件 生成规范）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Which style guide do you want to to follow? （你想使用哪个流行的规范）
&lt;ul&gt;
&lt;li&gt;Standard&lt;/li&gt;
&lt;li&gt;XO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What format do you want your config file to be in ? （配置文件的格式 建议直接选择 JavaScript）
&lt;ul&gt;
&lt;li&gt;javascript&lt;/li&gt;
&lt;li&gt;yaml&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vscode 安装 eslint 插件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;eslintcjs-配置文件的相关配置项解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslintcjs-配置文件的相关配置项解析&#34;&gt;#&lt;/a&gt; .eslint.cjs 配置文件的相关配置项解析&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;parser - 解析器&lt;br /&gt;
 ESLint 底层默认使用 Espree 来进行 AST 解析，这个解析器目前已经基于 Acron 来实现，虽然说 Acron 目前能够解析绝大多数的 ECMAScript 规范的语法，但还是不支持 TypeScript ，因此需要引入其他的解析器完成 TS 的解析。&lt;/p&gt;
&lt;p&gt;社区提供了 @typescript-eslint/parser 这个解决方案，专门为了 TypeScript 的解析而诞生，将 TS 代码转换为 Espree 能够识别的格式 (即 Estree 格式)，然后在 Eslint 下通过 Espree 进行格式检查， 以此兼容了 TypeScript 语法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parserOptions - 解析器选项&lt;br /&gt;
这个配置可以对上述的解析器进行能力定制，默认情况下 ESLint 支持 ES5 语法，你可以配置这个选项，具体内容如下:&lt;/p&gt;
&lt;p&gt;ecmaVersion: 这个配置和 Acron 的 ecmaVersion 是兼容的，可以配置 ES + 数字 (如 ES6) 或者 ES + 年份 (如 ES2015)，也可以直接配置为 latest，启用最新的 ES 语法。&lt;br /&gt;
sourceType: 默认为 script，如果使用 ES Module 则应设置为 module&lt;br /&gt;
ecmaFeatures: 为一个对象，表示想使用的额外语言特性，如开启 jsx。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rules - 具体代码规则&lt;br /&gt;
 rules 配置即代表在 ESLint 中手动调整哪些代码规则，比如禁止在 if 语句中使用赋值语句这条规则可以像如下的方式配置:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 其它配置省略&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//key 为规则名，value 配置内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string-property property&#34;&gt;&#39;no-cond-assign&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;always&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 rules 对象中，key 一般为规则名，value 为具体的配置内容，在上述的例子中我们设置为一个数组，数组第一项为规则的 ID，第二项为规则的配置。&lt;/p&gt;
&lt;p&gt;这里重点说一说规则的 ID，它的语法对所有规则都适用，你可以设置以下的值:&lt;/p&gt;
&lt;p&gt;off 或 0: 表示关闭规则。&lt;/p&gt;
&lt;p&gt;warn 或 1: 表示开启规则，不过违背规则后只抛出 warning，而不会导致程序退出。&lt;br /&gt;
error 或 2: 表示开启规则，不过违背规则后抛出 error，程序会退出。&lt;br /&gt;
具体的规则配置可能会不一样，有的是一个字符串，有的可以配置一个对象，你可以参考 ESLint 官方文档。&lt;/p&gt;
&lt;p&gt;当然，你也能直接将 rules 对象的 value 配置成 ID，如: &amp;quot;no-cond-assign&amp;quot;: &amp;quot;error&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plugins&lt;br /&gt;
 上面提到过 ESLint 的 parser 基于 Acorn 实现，不能直接解析 TypeScript，需要我们指定 parser 选项为 @typescript-eslint/parser 才能兼容 TS 的解析。同理，ESLint 本身也没有内置 TypeScript 的代码规则，这个时候 ESLint 的插件系统就派上用场了。我们需要通过添加 ESLint 插件来增加一些特定的规则，比如添加 @typescript-eslint/eslint-plugin 来拓展一些关于 TS 代码的规则，如下代码所示:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 添加 TS 规则，可省略 `eslint-plugin`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;@typescript-eslint&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;值得注意的是，添加插件后只是拓展了 ESLint 本身的规则集，但 ESLint 默认并没有 开启这些规则的校验！如果要开启或者调整这些规则，你需要在 rules 中进行配置，如:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 开启一些 TS 规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string-property property&#34;&gt;&#39;@typescript-eslint/ban-ts-comment&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string-property property&#34;&gt;&#39;@typescript-eslint/no-explicit-any&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;warn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;extends - 继承配置&lt;br /&gt;
 extends 相当于继承另外一份 ESLint 配置，可以配置为一个字符串，也可以配置成一个 字符串数组。主要分如下 3 种情况:&lt;/p&gt;
&lt;p&gt;从 ESLint 本身继承；&lt;br /&gt;
从类似 eslint-config-xxx 的 npm 包继承；&lt;br /&gt;
从 ESLint 插件继承。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string-property property&#34;&gt;&#34;extends&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第 1 种情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;eslint:recommended&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第 2 种情况，一般配置的时候可以省略 `eslint-config`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;standard&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第 3 种情况，可以省略包名中的 `eslint-plugin`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 格式一般为: `plugin:$&amp;#123;pluginName&amp;#125;/$&amp;#123;configName&amp;#125;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;plugin:react/recommended&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;plugin:@typescript-eslint/recommended&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;有了 extends 的配置，对于之前所说的 ESLint 插件中的繁多配置，我们就不需要手动 一一开启了，通过 extends 字段即可自动开启插件中的推荐规则:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;plugin:@typescript-eslint/recommended&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;env 和 globals&lt;br /&gt;
 这两个配置分别表示运行环境和全局变量，在指定的运行环境中会预设一些全局变量，比如:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslint.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;browser&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;指定上述的 env 配置后便会启用浏览器和 Node.js 环境，这两个环境中的一些全局变量 (如 window、global 等) 会同时启用。&lt;/p&gt;
&lt;p&gt;有些全局变量是业务代码引入的第三方库所声明，这里就需要在 globals 配置中声明全局变 量了。每个全局变量的配置值有 3 种情况:&lt;/p&gt;
&lt;p&gt;&amp;quot;writable&amp;quot; 或者 true，表示变量可重写；&lt;br /&gt;
&amp;quot;readonly&amp;quot; 或者 false，表示变量不可重写；&lt;br /&gt;
&amp;quot;off&amp;quot;，表示禁用该全局变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prettier&#34;&gt;#&lt;/a&gt; prettier&lt;/h1&gt;
&lt;h3 id=&#34;为啥需要-prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为啥需要-prettier&#34;&gt;#&lt;/a&gt; 为啥需要 prettier&lt;/h3&gt;
&lt;p&gt;因为我们写的代码有时候需要可以的控制格式 比如：换行 缩进之类的 当代码量多起来 这就显得非常麻烦 所以我们需要一个工具 来自动帮我们格式化代码（让代码格式变正确）&lt;/p&gt;
&lt;h3 id=&#34;怎么在项目中集成-prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么在项目中集成-prettier&#34;&gt;#&lt;/a&gt; 怎么在项目中集成 prettier&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载 prettier 命令：  &lt;code&gt;pnpm install prettier&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和 eslint 适配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载 eslint-config-prettier (用于用 prettier 的规则来覆盖部分 eslint 的规则) eslint-plugin-prettier（用来让 prettier 来接管 eslint 修复代码的功能）&lt;/li&gt;
&lt;li&gt;在.eslintrc.cjs 文件里面的 &lt;code&gt;extend&lt;/code&gt;  属性里面添加 &lt;code&gt;&amp;quot;prettier&amp;quot;&lt;/code&gt;  来解决 eslint 和 prettier 的冲突，让 prerrier 适配 eslint&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.cjs&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;prettier&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加.prettierrc 文件来配置 prettier 相关规则&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .prettierrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;printWidth&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 一行的字符数，如果超过会进行换行，默认为 80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;tabWidth&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 一个 tab 代表几个空格数，默认为 2 个&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;useTabs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 是否使用 tab 进行缩进，默认为 false，表示用空格进行缩减&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;singleQuote&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 字符串是否使用单引号，默认为 false，使用双引号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;semi&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 行尾是否使用分号，默认为 true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;trailingComma&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 是否使用尾逗号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;bracketSpacing&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 对象大括号直接是否有空格，默认为 true，效果：&amp;#123;a: 1&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vscode 下载 prettier 插件&lt;br /&gt;
 vscode 下载了 prettier 插件后 在 vscode 的设置里面将 Format on Save 开启。这样当你 ctrl + s 保存的时候代码就会自动被 prettier 格式化&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/19/Vj92oU.png&#34; alt=&#34;Vj92oU.png&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/firstInternship/</guid>
            <title>埋种一年半，终破土而出</title>
            <link>https://zimu-66ccff.github.io/firstInternship/</link>
            <category term="随笔" scheme="https://zimu-66ccff.github.io/categories/life/" />
            <category term="自我" scheme="https://zimu-66ccff.github.io/tags/%E8%87%AA%E6%88%91/" />
            <pubDate>Fri, 09 Jun 2023 18:37:32 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;故事开始埋下种子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故事开始埋下种子&#34;&gt;#&lt;/a&gt; 故事开始，埋下种子&lt;/h1&gt;
&lt;p&gt;我想，如果我没有记错的话，我应该是 2022 年的 2 月份埋下了这颗种子，在一个敲可爱的学长（ &lt;code&gt;舒总&lt;/code&gt; ，敲击强的字节跳动大佬）的带动下开始邂逅前端开发，那时不知道前方是什么，只是觉得很新鲜，很酷，并未想到它会给我带来这么多美好的东西（与很多有趣，努力，温柔的人相遇；为我带来未来就业的极大便利）&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pvEF.jpeg&#34; alt=&#34;V2pvEF.jpeg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;加入瑞翼工坊学校的一个工作室&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加入瑞翼工坊学校的一个工作室&#34;&gt;#&lt;/a&gt; 加入瑞翼工坊（学校的一个工作室）&lt;/h1&gt;
&lt;p&gt;后来，加入了学校的工作室，目的其实也很简单，只是想遇见一些同行的人，有一个学习技术，追求技术的空间；实际上，我后来的时间也基本上全是在这里。早上睡醒了就去，晚上夜深而归，会有很多一同学习技术的人在这里学习到很晚，真的是一个很好的环境和氛围。&lt;br /&gt;
认识了很多有趣的人， &lt;code&gt;舒总&lt;/code&gt; ， &lt;code&gt;小双哥&lt;/code&gt; ， &lt;code&gt;陈老师&lt;/code&gt; ， &lt;code&gt;林学长&lt;/code&gt; ， &lt;code&gt;匡学姐&lt;/code&gt; ， &lt;code&gt;李佬&lt;/code&gt; ， &lt;code&gt;王佬&lt;/code&gt; ， &lt;code&gt;叶桑&lt;/code&gt; ， &lt;code&gt;博神&lt;/code&gt; 等...，&lt;strong&gt;人与人的相遇总是美好的&lt;/strong&gt;。&lt;br /&gt;
也遇到了很多大一的后辈们，都很努力，很认真， &lt;code&gt;梦玉&lt;/code&gt; ， &lt;code&gt;于瑛&lt;/code&gt; ， &lt;code&gt;杨冉&lt;/code&gt; ， &lt;code&gt;蔡典&lt;/code&gt; ， &lt;code&gt;孙子龙&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pSu8.jpeg&#34; alt=&#34;V2pSu8.jpeg&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2psHZ.jpeg&#34; alt=&#34;V2psHZ.jpeg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;新年小愿望的许下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新年小愿望的许下&#34;&gt;#&lt;/a&gt; 新年小愿望的许下&lt;/h1&gt;
&lt;p&gt;在 2023 年来临的时候，许下了一些小愿望，希望可以找到实习，可以和更多温柔的人相遇，身边的两三个很重要的人依旧在我身边&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2p5d5.jpeg&#34; alt=&#34;V2p5d5.jpeg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;找实习的痛苦温柔的人的帮助和鼓励第一段实习真的太难找了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找实习的痛苦温柔的人的帮助和鼓励第一段实习真的太难找了&#34;&gt;#&lt;/a&gt; 找实习的痛苦，温柔的人的帮助和鼓励（第一段实习真的太难找了）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;寒气逼人&lt;br /&gt;
现在行情确实很不好，真的是寒气逼人，找第一段实习真的是很困难，学校是双非，学历并没有有事，第一次找实习，当然也没有实习经历，真的就是全考运气。记得在 boss 直聘上面沟通了八九十次，简历却只投出去了了了几份，甚至没人约面。那段时间真的是很绝望，对自己的打击也确实很大，那时经常会到实训大楼的顶层吹风，以图忘记一切烦恼。&lt;/li&gt;
&lt;li&gt;帮助与鼓励&lt;br /&gt;
好在遇到了很多温柔的人， &lt;code&gt;咖啡哥&lt;/code&gt; 耐心的给我做模拟面试，给我鼓劲，让我再耐心的沉淀沉淀。 &lt;code&gt;嘉晨&lt;/code&gt; ， &lt;code&gt;沈七哥&lt;/code&gt; ，我们互相鼓励，一同前行，最终结果也都很好。我在 &lt;code&gt;小双哥&lt;/code&gt; 的内推下，顺利进入&lt;em&gt;合合信息&lt;/em&gt;；嘉晨则是进入&lt;em&gt;绿盟&lt;/em&gt;；沈七哥也顺利进入&lt;em&gt;第四范式&lt;/em&gt;，&lt;strong&gt;一个人只能走很短的路，而一群人可以走的很远&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://imgloc.com/i/V2phNy&#34;&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2phNy.jpeg&#34; alt=&#34;V2phNy.jpeg&#34; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;终破土而出顺利开启实习生活&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终破土而出顺利开启实习生活&#34;&gt;#&lt;/a&gt; 终破土而出（顺利开启实习生活）&lt;/h1&gt;
&lt;p&gt;后来终于拿到了合合信息的前端实习生岗位的 offer，在这里体验到了真正的企业开发，事情不是很多，但是上线那会真的把我忙炸了，需求疯狂调整，一天发布好几次。不过整体真的是个很好的经历&lt;br /&gt;
也遇见了很多有趣的人，部门 boss &lt;code&gt;徐杰哥&lt;/code&gt; （请我们部门全员吃了贼好吃的冰激凌，笑死了，进来一个月我不认识部门 boss） leader &lt;code&gt;佳骏哥&lt;/code&gt; （人超级好，全能，超级厉害，啥都会），mentor  &lt;code&gt;seven哥&lt;/code&gt; （前端架构师，超级厉害）带教 mentor &lt;code&gt;慧东哥&lt;/code&gt; （超级温柔，耐心，经常请我们喝咖啡），组长 &lt;code&gt;付同哥&lt;/code&gt; （后端架构师，经常和我们开玩笑，聊天），后端老哥  &lt;code&gt;建辉哥&lt;/code&gt; （很耐心，对我们很宽容）， 后端老哥  &lt;code&gt;永辉哥&lt;/code&gt; （凶凶的，又很搞笑），产品经理  &lt;code&gt;崔老师&lt;/code&gt; （人很好，会让我们慢慢做需求，虽然上线那几天需求变动频繁给我搞麻了）等...&lt;br /&gt;
 当然还有另外一个实习生姐姐， &lt;code&gt;兰英姐&lt;/code&gt; （嘤嘤嘤），部门就我们两个前端实习生，算是相依为命了，也确实是相依为命。姐姐超级可爱，温柔，好看，很大程度上提升了我的实习体验，我们一起摸鱼，一起干饭，一起吐槽。真的是个很温柔的姐姐，能遇到这样温柔的人，真的是很开心的一件事情。（附上一张姐姐的美照，已取的当事人同意）&lt;br /&gt;
&lt;a href=&#34;https://imgloc.com/i/V2pd43&#34;&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pd43.png&#34; alt=&#34;V2pd43.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://imgloc.com/i/V2pXqa&#34;&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pXqa.jpeg&#34; alt=&#34;V2pXqa.jpeg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;和很多美好的人相遇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和很多美好的人相遇&#34;&gt;#&lt;/a&gt; 和很多美好的人相遇&lt;/h1&gt;
&lt;p&gt;一路上真的遇见了很多美好的人，也到到了很多他们的帮助， &lt;code&gt;🐏哥&lt;/code&gt; ， &lt;code&gt;舒佬&lt;/code&gt; ， &lt;code&gt;咖啡哥&lt;/code&gt; ，  &lt;code&gt;兰英姐&lt;/code&gt; ， &lt;code&gt;嘉晨&lt;/code&gt; ，  &lt;code&gt;沈七哥&lt;/code&gt; ，  &lt;code&gt;阳树哥&lt;/code&gt; ，  &lt;code&gt;研二哥&lt;/code&gt; ， &lt;code&gt;大专哥&lt;/code&gt; ， &lt;code&gt;小双哥&lt;/code&gt; ，  &lt;code&gt;陈老师&lt;/code&gt; ，  &lt;code&gt;林学长&lt;/code&gt; ， &lt;code&gt;匡姐&lt;/code&gt; ， &lt;code&gt;李佬&lt;/code&gt; &lt;br /&gt;
（附上第一次上海会师，🐏 哥超级帅）&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2ppIz.jpeg&#34; alt=&#34;V2ppIz.jpeg&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
