<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>花圃</title>
        <subtitle>理想的种子，于现实中绽放</subtitle>
        <icon>https://zimu-66ccff.github.io/images/favicon.ico</icon>
        <link>https://zimu-66ccff.github.io</link>
        <author>
          <name>ziMu</name>
        </author>
        <description>干净澄澈，真诚自然</description>
        <language>zh-CN</language>
        <pubDate>Thu, 16 Nov 2023 18:55:54 +0800</pubDate>
        <lastBuildDate>Thu, 16 Nov 2023 18:55:54 +0800</lastBuildDate>
        <category term="前端" />
        <category term=" Vue" />
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/globLearn/</guid>
            <title>glob语法详解</title>
            <link>https://zimu-66ccff.github.io/globLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="glob" scheme="https://zimu-66ccff.github.io/tags/glob/" />
            <pubDate>Thu, 16 Nov 2023 18:55:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础语法&#34;&gt;#&lt;/a&gt; 基础语法&lt;/h1&gt;
&lt;h2 id=&#34;分隔符和片段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分隔符和片段&#34;&gt;#&lt;/a&gt; 分隔符和片段&lt;/h2&gt;
&lt;h3 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;分隔符是・，通过・得到的数组每一项是片段。&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src/index.js&lt;/code&gt;  有两个片段，分别是  &lt;code&gt;src&lt;/code&gt;  和  &lt;code&gt;index.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/**/*.js&lt;/code&gt;  有三个片段，分别是 &lt;code&gt; src&lt;/code&gt; 、 &lt;code&gt;**&lt;/code&gt;  和  &lt;code&gt;*.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单个星号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单个星号&#34;&gt;#&lt;/a&gt; 单个星号&lt;/h2&gt;
&lt;h3 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;单个星号  &lt;code&gt;*&lt;/code&gt;  用于匹配单个片段中的零个或多个字符。&lt;/p&gt;
&lt;h3 id=&#34;示例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-2&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src/*.js&lt;/code&gt;  表示 &lt;code&gt;src&lt;/code&gt;  目录下所有以  &lt;code&gt;js&lt;/code&gt;  结尾的文件，但是不能匹配  &lt;code&gt;src &lt;/code&gt; 子目录中的文件，例如  &lt;code&gt;src/login/login.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/*/.bashrc &lt;/code&gt; 匹配所有用户的 .bashrc 文件&lt;div class=&#34;note danger&#34;&gt;
&lt;p&gt;需要注意的是， &lt;code&gt;*&lt;/code&gt;  不能匹配分隔符  &lt;code&gt;/&lt;/code&gt; ，也就是说不能跨片段匹配字符。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问号&#34;&gt;#&lt;/a&gt; 问号&lt;/h2&gt;
&lt;h3 id=&#34;概念-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-3&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;问号  &lt;code&gt;?&lt;/code&gt;  匹配单个片段中的单个字符。&lt;/p&gt;
&lt;h3 id=&#34;示例-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-3&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test/?at.js &lt;/code&gt; 匹配形如  &lt;code&gt;test/cat.js&lt;/code&gt; 、 &lt;code&gt;test/bat.js&lt;/code&gt;  等所有 3 个字符且后两位是  &lt;code&gt;at&lt;/code&gt;  的 js 文件，但是不能匹配  &lt;code&gt;test/flat.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/index.??&lt;/code&gt;  匹配  &lt;code&gt;src&lt;/code&gt;  目录下以  &lt;code&gt;index&lt;/code&gt;  打头，后缀名是两个字符的文件，例如可以匹配  &lt;code&gt;src/index.js &lt;/code&gt; 和  &lt;code&gt;src/index.md&lt;/code&gt; ，但不能匹配  &lt;code&gt;src/index.jsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;中括号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中括号&#34;&gt;#&lt;/a&gt; 中括号&lt;/h2&gt;
&lt;h3 id=&#34;概念-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-4&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;同样是匹配单个片段中的单个字符，但是字符集只能从括号内选择，如果字符集内有  &lt;code&gt;-&lt;/code&gt; ，表示范围。&lt;/p&gt;
&lt;h3 id=&#34;示例-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-4&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test/[bc]at.js &lt;/code&gt; 只能匹配  &lt;code&gt;test/bat.js&lt;/code&gt;  和  &lt;code&gt;test/cat.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test/[c-f]at.js&lt;/code&gt;  能匹配 &lt;code&gt; test/cat.js&lt;/code&gt; 、 &lt;code&gt;test/dat.js&lt;/code&gt; 、 &lt;code&gt;test/eat.js&lt;/code&gt;  和  &lt;code&gt;test/fat.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;惊叹号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#惊叹号&#34;&gt;#&lt;/a&gt; 惊叹号&lt;/h2&gt;
&lt;h3 id=&#34;概念-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-5&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;表示取反，即排除那些去掉惊叹号之后能够匹配到的文件。&lt;/p&gt;
&lt;h3 id=&#34;示例-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-5&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;test/[!bc]at.js&lt;/code&gt;  不能匹配  &lt;code&gt;test/bat.js&lt;/code&gt;  和  &lt;code&gt;test/cat.js&lt;/code&gt; ，但是可以匹配  &lt;code&gt;test/fat.js&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;!test/tmp/**&lt;/code&gt;  排除  &lt;code&gt;test/tmp&lt;/code&gt;  目录下的所有目录和文件&lt;/p&gt;
&lt;h1 id=&#34;扩展语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展语法&#34;&gt;#&lt;/a&gt; 扩展语法&lt;/h1&gt;
&lt;h2 id=&#34;两个星号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两个星号&#34;&gt;#&lt;/a&gt; 两个星号&lt;/h2&gt;
&lt;h3 id=&#34;概念-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-6&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;两个星号  &lt;code&gt;**&lt;/code&gt;  可以跨片段匹配零个或多个字符，也就是说  &lt;code&gt;**&lt;/code&gt;  是递归匹配所有文件和目录的，如果后面有分隔符，即  &lt;code&gt;**/ &lt;/code&gt; 的话，则表示只递归匹配所有目录（不含隐藏目录）。&lt;/p&gt;
&lt;h3 id=&#34;示例-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-6&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log/**&lt;/code&gt;  匹配  &lt;code&gt;/var/log&lt;/code&gt;  目录下所有文件和文件夹，以及文件夹里面所有子文件和子文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/**/*.log&lt;/code&gt;  匹配  &lt;code&gt;/var/log&lt;/code&gt;  及其子目录下的所有以 .log 结尾的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/*/.ssh/**/*.key&lt;/code&gt;  匹配所有用户的  &lt;code&gt;.ssh&lt;/code&gt;  目录及其子目录内的以  &lt;code&gt;.key&lt;/code&gt;  结尾的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大括号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大括号&#34;&gt;#&lt;/a&gt; 大括号&lt;/h2&gt;
&lt;h3 id=&#34;概念-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-7&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;匹配大括号内的所有模式，模式之间用逗号进行分隔，支持大括号嵌套，支持用  &lt;code&gt;..&lt;/code&gt;  匹配连续的字符，即  &lt;code&gt;&amp;#123;start..end&amp;#125;&lt;/code&gt;  语法。&lt;/p&gt;
&lt;h3 id=&#34;示例-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-7&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.&amp;#123;png,jp&amp;#123;,e&amp;#125;g&amp;#125;&lt;/code&gt;  匹配  &lt;code&gt;a.png&lt;/code&gt; 、 &lt;code&gt;a.jpg&lt;/code&gt; 、 &lt;code&gt;a.jpeg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;a..c&amp;#125;&amp;#123;1..2&amp;#125;&lt;/code&gt;  匹配  &lt;code&gt;a1`` a2&lt;/code&gt;   &lt;code&gt;b1&lt;/code&gt;   &lt;code&gt;b2 ``c1&lt;/code&gt;   &lt;code&gt;c2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;注意： &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  与  &lt;code&gt;[]&lt;/code&gt;  有一个很重要的区别：如果匹配的文件不存在， &lt;code&gt;[]&lt;/code&gt;  会失去模式的功能，变成一个单纯的字符串，而 &lt;code&gt; &amp;#123;&amp;#125;&lt;/code&gt;  依然可以展开。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;小括号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小括号&#34;&gt;#&lt;/a&gt; 小括号&lt;/h2&gt;
&lt;h3 id=&#34;概念-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-8&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;小括号必须跟在 &lt;code&gt; ?&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;!&lt;/code&gt;  后面使用，且小括号里面的内容是一组以  &lt;code&gt;| &lt;/code&gt; 分隔符的模式集合，例如： &lt;code&gt;abc|a?c|ac*&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;示例-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-8&#34;&gt;#&lt;/a&gt; 示例：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?(pattern|pattern|pattern)&lt;/code&gt; ：匹配 0 次或 1 次给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*(pattern|pattern|pattern)&lt;/code&gt; ：匹配 0 次或多次给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+(pattern|pattern|pattern)&lt;/code&gt; ：匹配 1 次或多次给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@(pattern|pattern|pattern)&lt;/code&gt; ：严格匹配给定的模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!(pattern|pattern|pattern)&lt;/code&gt; ：匹配非给定的模式&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/gitLearn/</guid>
            <title>git命令详解</title>
            <link>https://zimu-66ccff.github.io/gitLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="git" scheme="https://zimu-66ccff.github.io/tags/git/" />
            <pubDate>Thu, 16 Nov 2023 17:39:47 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;创建本地-git-仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建本地-git-仓库&#34;&gt;#&lt;/a&gt; 创建本地 git 仓库&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;  会在当前目录下创建一个.git 隐藏文件夹&lt;/p&gt;
&lt;h1 id=&#34;将本地仓库和远程仓库相关联&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将本地仓库和远程仓库相关联&#34;&gt;#&lt;/a&gt; 将本地仓库和远程仓库相关联&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add origin &amp;lt;registry-url&amp;gt;&lt;/code&gt;  将本地仓库和远程仓库相关联&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;  查看关联的远程仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;将本地对应的代码提交到暂存区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将本地对应的代码提交到暂存区&#34;&gt;#&lt;/a&gt; 将本地对应的代码提交到暂存区：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;file&amp;gt; &lt;/code&gt; 将指定的 file 提交到暂存区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add . &lt;/code&gt; 将所有有变动的文件提交到暂存区&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;将暂存区的代码提交到本地-git-仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将暂存区的代码提交到本地-git-仓库&#34;&gt;#&lt;/a&gt; 将暂存区的代码提交到本地 git 仓库：&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git commit -m &#39;&amp;lt;commit-msg&amp;gt;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;查看文件状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看文件状态&#34;&gt;#&lt;/a&gt; 查看文件状态&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;  可以查看哪些文件被修改了，哪些文件提交到暂存区了但是还没有 commit&lt;/p&gt;
&lt;h1 id=&#34;提交本地-git-仓库代码到远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提交本地-git-仓库代码到远程仓库&#34;&gt;#&lt;/a&gt; 提交本地 git 仓库代码到远程仓库:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;  会将当前分支的最新的 commit 提交到远程仓库对应的分支，然后本地的对应的远程分支 ( &lt;code&gt;remotes/origin/对应当前分支名&lt;/code&gt; ) 也会自动更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin &amp;lt;source&amp;gt; &lt;/code&gt; 会将本地的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 提交到远程仓库对应的分支，然后本地的对应的远程分支（ &lt;code&gt;remotes/origin/&amp;lt;source&amp;gt;&lt;/code&gt; ）也会自动更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin &amp;lt;source&amp;gt;:&amp;lt;destination&amp;gt;&lt;/code&gt;  会将本地的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 提交到远程仓库的 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt;  然后本地对应的远程分支 ( &lt;code&gt;remotes/origin&amp;lt;destination&amp;gt;&lt;/code&gt; ) 也会自动更新。 如果 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt; 不存在，会在远程仓库自动创建 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt; ，然后在本地创建对应的远程分支 ( &lt;code&gt;remotes/origin/&amp;lt;destination&amp;gt;&lt;/code&gt; ) 并更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin :&amp;lt;destination&amp;gt; &lt;/code&gt; 会在远程仓库直接删除 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  (个人感觉这样设计是因为 push 了一个空给 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt; ，所以 git 就理解为你要删除 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt; )&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;拉取远程仓库代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉取远程仓库代码&#34;&gt;#&lt;/a&gt; 拉取远程仓库代码：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt;  会拉取远程仓库的&lt;ins&gt;所有分支&lt;/ins&gt;各自对应的最新代码 将远程仓库所有的分支各自的最新的 commit 添加到对应的本地的各个远程分支（ &lt;code&gt;remotes/origin/\*&lt;/code&gt; ） &lt;ins&gt;但是不会合并分支&lt;/ins&gt;。&lt;ins&gt;也就是说 只需一次命令 就可以将远程仓库的所有的最新更新给拉下来&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch origin &amp;lt;source&amp;gt;&lt;/code&gt;  拉取远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 然后添加到本地对应的远程分支（ &lt;code&gt;remotes/origin/source&lt;/code&gt; ）但是不会合并分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch origin &amp;lt;source&amp;gt;:&amp;lt;destination&amp;gt; &lt;/code&gt; 拉取远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit 然后添加到本地的 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt;  但是不会合并分支。如果 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  不存在，会在本地以当前分支为基本自动创建 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt; 。&lt;br /&gt;
 &lt;code&gt;git fetch origin :&amp;lt;destination&amp;gt;&lt;/code&gt;  会在本地新建一个 &lt;code&gt;&amp;lt;destination&amp;gt;分支&lt;/code&gt;  （感觉这样设计是因为，相当于 fetch 了一个空到本地，所以 git 就会理解为你要新建一个分支）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;拉取远程仓库代码并和本地的分支做一个合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉取远程仓库代码并和本地的分支做一个合并&#34;&gt;#&lt;/a&gt; 拉取远程仓库代码，并和本地的分支做一个合并：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;  其实就是  &lt;code&gt;git fetch&lt;/code&gt;  和  &lt;code&gt;git merge&lt;/code&gt;  的缩写，在  &lt;code&gt;git fetch&lt;/code&gt;  的基础上 会将远程分支（ &lt;code&gt;remotes/origin/对应当前分支名&lt;/code&gt; ）和本地当前分支做一个合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin &amp;lt;source&amp;gt;&lt;/code&gt;  会拉取远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新 commit, 然后添加到对应的本地的远程分支上面 ( &lt;code&gt;remotes/origin/&amp;lt;source&amp;gt;&lt;/code&gt; )，再将这个远程分支和本地当前分支做一个合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin &amp;lt;source&amp;gt;:&amp;lt;destination&amp;gt;&lt;/code&gt;  会将远程仓库的 &lt;code&gt;&amp;lt;source&amp;gt;分支&lt;/code&gt; 的最新的 commit 添加到本地的 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  分支上面（如果 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  不存在，会自动创建），然后将 &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt;  合并到当前分支。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;创建分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建分支&#34;&gt;#&lt;/a&gt; 创建分支：&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git branch &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;查看分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看分支&#34;&gt;#&lt;/a&gt; 查看分支：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;  查看本地分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -r&lt;/code&gt;  查看远程分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -a&lt;/code&gt;  查看所有分支&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;删除分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除分支&#34;&gt;#&lt;/a&gt; 删除分支：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch -d &amp;lt;branch-name&amp;gt;&lt;/code&gt;  当被删除分支有新内容没有被合并的时候，使用 - d，会提示该分支有新内容没有被合并，不执行删除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -D &amp;lt;branch-name&amp;gt;&lt;/code&gt;  当被删除分支有新内容没有被合并的时候，使用 - D，会直接删除&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;切换分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切换分支&#34;&gt;#&lt;/a&gt; 切换分支:&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;创建并切换分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建并切换分支&#34;&gt;#&lt;/a&gt; 创建并切换分支:&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;将分支移动到指定-commit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将分支移动到指定-commit&#34;&gt;#&lt;/a&gt; 将分支移动到指定 commit：&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git branch -f &amp;lt;branch-name&amp;gt; &amp;lt;commit-hash&amp;gt;&lt;/code&gt; &lt;br /&gt;
 以&lt;ins&gt;相对移动&lt;/ins&gt;的方式将分支移动到指定 commit&lt;br /&gt;
 &lt;code&gt;git branch -f &amp;lt;branch-name&amp;gt; HEAD&amp;#123;^[num], ~[num]&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;代码回滚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码回滚&#34;&gt;#&lt;/a&gt; 代码回滚&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset --mixed &amp;lt;commit-hash&amp;gt;&lt;/code&gt;   &lt;code&gt;git reset &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  默认就是这个命令，将&lt;ins&gt;暂存区， 本地 git 仓库&lt;/ins&gt;回滚到指定 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  将&lt;ins&gt;本地代码，暂存区，本地 git 仓库&lt;/ins&gt;回滚到指定 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --soft &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  将&lt;ins&gt;本地 git 仓库&lt;/ins&gt;回滚到指定 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git revert &amp;lt;commit-hash&amp;gt; &lt;/code&gt; 会在当前分支新添加一个 commit 这个 commit 的作用是抵消之前的对应的 commit，也可以用于回滚分支。&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgs.ovh/2023/11/16/ndPCv.png&#34; alt=&#34;ndPCv.png&#34; /&gt;&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;从&lt;ins&gt;数据安全&lt;/ins&gt;上角度， &lt;code&gt;revert&lt;/code&gt;  比  &lt;code&gt;reset&lt;/code&gt;  安全，因为它的操作可以回溯，反转了还可以倒回来。 &lt;code&gt;reset &lt;/code&gt; 比较彻底，是直接丢弃了，不过可以考虑想第一个例子中创建一个备份分支来保证安全。&lt;br /&gt;
从&lt;ins&gt;分支历史&lt;/ins&gt;的长期维护角度， &lt;code&gt;reset&lt;/code&gt;  的历史比较干净， &lt;code&gt;revert &lt;/code&gt; 的反转提交没多大意义，毕竟很少有需求让你滚来滚去的。&lt;br /&gt;
在被撤销提交，不在分支顶端的场景上， &lt;code&gt;reset&lt;/code&gt;  无法使用， &lt;code&gt;revert&lt;/code&gt;  可以做到，。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;合并分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并分支&#34;&gt;#&lt;/a&gt; 合并分支：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git merge &amp;lt;branch-name&amp;gt;&lt;/code&gt;  将分支合并到当前分支，会在当前分支新增一个 commit（用来合并需要合并的分支）并且当前分支会自动更新 &lt;ins&gt;不是线性的&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase &amp;lt;target-branch-name&amp;gt;&lt;/code&gt;  将当前分支有的，但是目标分支没有的 commit 直接线性的添加到目标分支 但是目标分支不会自动更新 &lt;ins&gt;是线性的&lt;/ins&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgs.ovh/2023/11/16/nYGdI.png&#34; alt=&#34;gitlearn01.png&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;合并指定的-commit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并指定的-commit&#34;&gt;#&lt;/a&gt; 合并指定的 commit：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git check-chery &amp;lt;commit-hash&amp;gt;&lt;/code&gt;  将指定的 commit 添加到当前分支 可以一次添加多个  &lt;code&gt;commit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;切换-head&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切换-head&#34;&gt;#&lt;/a&gt; 切换 HEAD:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;commit hash&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout HEAD&amp;#123;^[num], ~[num]&amp;#125; &lt;/code&gt; 注：^ 后面的 num 指的是切换到第几个 parent commit (横向的) ~ 后面的 num 是指以当前 HEAD 为参考，切换到上面第几个 commit&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;查看-head-指针的移动记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看-head-指针的移动记录&#34;&gt;#&lt;/a&gt; 查看 HEAD 指针的移动记录&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;查看分支历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看分支历史&#34;&gt;#&lt;/a&gt; 查看分支历史&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;  显示 commit 的 SHA1 值，创建作者和时间，提交信息，会多行显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --oneline&lt;/code&gt;  只显示提交的 SHA1 值和提交信息，SHA1 还是缩短显示前几位，只在一行显示&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/npmLink/</guid>
            <title>npm link 详解</title>
            <link>https://zimu-66ccff.github.io/npmLink/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="npm link" scheme="https://zimu-66ccff.github.io/tags/npm-link/" />
            <pubDate>Sun, 12 Nov 2023 21:20:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;npm-link-的应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm-link-的应用场景&#34;&gt;#&lt;/a&gt; npm link 的应用场景&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;开发脚手架时，在本地调试命令&lt;br /&gt;
开发脚手架时，在项目所在目录，执行 &lt;code&gt;npm link&lt;/code&gt;  命令，就可以在全局执行项目的 &lt;code&gt;package.json&lt;/code&gt;  文件的 &lt;code&gt;bin&lt;/code&gt;  属性里面配置的命令&lt;/li&gt;
&lt;li&gt;可以在项目里，直接使用本地包，从而对本地包进行调试&lt;br /&gt;
当我们开发包 &lt;code&gt;a&lt;/code&gt;  时，可以在发布前直接 &lt;code&gt;npm link&lt;/code&gt; ，将包 &lt;code&gt;a&lt;/code&gt;  链接到全局，然后在项目里 &lt;code&gt;npm link a&lt;/code&gt; ，这样就可以在项目里面使用包 &lt;code&gt;a&lt;/code&gt; ，从而对包进行调试&lt;/li&gt;
&lt;li&gt;MultiRepo 多仓库多模块应用 本地开发时，多模块之间共享代码的一种解决方案&lt;br /&gt;
当仓库 &lt;code&gt;a&lt;/code&gt;  要使用仓库 &lt;code&gt;b&lt;/code&gt;  提供的代码的时候，可以在 &lt;code&gt;b&lt;/code&gt;  仓库目录下， &lt;code&gt;npm link&lt;/code&gt;  从而将仓库 &lt;code&gt;b&lt;/code&gt;  链接到全局，然后再在仓库 &lt;code&gt;a&lt;/code&gt;  里执行 &lt;code&gt;npm link b&lt;/code&gt; ， 然后就可以在 &lt;code&gt;a&lt;/code&gt;  里导入 &lt;code&gt;b&lt;/code&gt;  了。从而实现多仓库共享代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;本地包里执行-npm-link-发生了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地包里执行-npm-link-发生了什么&#34;&gt;#&lt;/a&gt; 本地包里执行 npm link 发生了什么？&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 npm 的全局模块目录（node 安装目录下的 &lt;code&gt;node_modules&lt;/code&gt; ）下会创建一个 &lt;code&gt;软连接（符号链接）&lt;/code&gt; ，指向本地包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据 &lt;code&gt;bin&lt;/code&gt;  配置的命令，在可执行目录下创建一个符号链接，指向 &lt;code&gt;bin&lt;/code&gt;  里配置的可执行文件。&lt;br /&gt;
例如，如果你的 &lt;code&gt; package.json&lt;/code&gt;  文件中有如下配置：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your-project&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;version&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;your-script&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./bin/your-script.js&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行  &lt;code&gt;npm link&lt;/code&gt;  后，将在全局的可执行文件目录下创建一个名为  &lt;code&gt;your-script&lt;/code&gt;  的符号链接，指向你项目中  &lt;code&gt;./bin/your-script.js&lt;/code&gt;  文件。所以当我们在命令行里执行 &lt;code&gt;your-script&lt;/code&gt;  的时候，实际相当于执行了 &lt;code&gt;./bin/your-script.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;当我们全局安装包的时候，对 &lt;code&gt;bin&lt;/code&gt;  的处理也是类似的，在全局的可执行目录下创建一个符号链接，指向 npm 全局模块目录下我们安装的全局包对应的可执行文件&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;项目里面执行-npm-link-package-name-发生了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目里面执行-npm-link-package-name-发生了什么&#34;&gt;#&lt;/a&gt; 项目里面执行  &lt;code&gt;npm link &amp;lt;package-name&amp;gt;&lt;/code&gt;  发生了什么&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在项目的 &lt;code&gt;node_modules&lt;/code&gt;  目录下创建一个符号链接，指向 npm 的 &lt;code&gt;全局模块目录&lt;/code&gt; 下对应的符号链接（这个符号链接是我们在对应的本地包里执行  &lt;code&gt;npm link&lt;/code&gt;  的时候创建的）。然后当我们导入这个包的时候，就会在项目的 &lt;code&gt;node_modules&lt;/code&gt;  里找，从而就会找到对应的符号链接，然后这个符号链接又指向 npm 全局模块目录下的符号链接，而这个符号链接又指向本地包文件，从而正确的导入和使用。&lt;/li&gt;
&lt;li&gt;在项目的 &lt;code&gt;node_modules/.bin&lt;/code&gt;  目录下根据对应本地包的 &lt;code&gt;bin&lt;/code&gt;  创建对应的符号链接指向 npm 全局模块的对应的符号链接的可执行文件。&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;当我们使用 &lt;code&gt;npx&lt;/code&gt;  执行命令的时候，实际上是在 &lt;code&gt;node_modules/.bin&lt;/code&gt;  找的对应的可执行文件执行的&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/whyMonorepo/</guid>
            <title>为什么选择monorepo架构</title>
            <link>https://zimu-66ccff.github.io/whyMonorepo/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="monorepo" scheme="https://zimu-66ccff.github.io/tags/monorepo/" />
            <pubDate>Fri, 10 Nov 2023 08:14:05 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;monolith-和-multirepo-存在什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monolith-和-multirepo-存在什么问题&#34;&gt;#&lt;/a&gt; Monolith 和 MultiRepo 存在什么问题&lt;/h1&gt;
&lt;h2 id=&#34;monolith-单仓库巨石应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monolith-单仓库巨石应用&#34;&gt;#&lt;/a&gt; Monolith 单仓库巨石应用&lt;/h2&gt;
&lt;p&gt;用一个 git 仓库来维护项目代码，随着业务复杂度的上升，代码量会急剧上升，最终项目会变得十分庞大，复杂， 难以继续维护，更新迭代，并且构建效率也会降低。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在的问题：
&lt;ol&gt;
&lt;li&gt;代码耦合度非常高，可能改了这里，又会影响那里，并且当我们排查问题时，难度也变得非常高，可能很多时间都花在了找代码上面。&lt;/li&gt;
&lt;li&gt;代码量非常大，项目构建的效率低下，明明只改了一点点代码，却要重新构建整个代码，构建花费的时间非常长。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;multirepo-多仓库多模块应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#multirepo-多仓库多模块应用&#34;&gt;#&lt;/a&gt; MultiRepo 多仓库多模块应用&lt;/h2&gt;
&lt;p&gt;将一个项目拆解为多个多个模块，放在多个 git 仓库里面管理，直接的对项目进行了解耦，每个单独的模块都可以独立的编码，测试，发布。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在的问题
&lt;ol&gt;
&lt;li&gt;各个仓库之间的代码共享非常困难，粗糙，一般想要进行代码的共享只有如下几种方式：
&lt;ol&gt;
&lt;li&gt;将需要共享的代码复制粘贴到自己的仓库里&lt;br /&gt;
这种方式会明显的造成&lt;ins&gt;代码体积变大&lt;/ins&gt;，从而&lt;ins&gt;影响构建效率&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;将需要共享的代码单独维护成一个仓库，发布成 npm 包，&lt;br /&gt;
这样方式很麻烦，&lt;ins&gt;每次都需要，重新发布 npm 包，然后在使用了这些共享的代码的仓库里 &lt;code&gt;npm install&lt;/code&gt;  更新 npm 包&lt;/ins&gt;。&lt;br /&gt;
&lt;ins&gt;并且当维护的 npm 包出现了 &lt;code&gt;break change&lt;/code&gt;  的时候，只有等到 npm 包发布，并且各个仓库更新了 npm 包的时候，才能发现问题，问题发现不及时，导致排查问题，解决问题，十分困难&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;npm link&lt;/code&gt;  来实现本地开发的时候共享代码，这种方式相比上面两种方式好了很多，但是依旧需要手动在需要共享代码的仓库里 &lt;code&gt;npm link&lt;/code&gt; ，在需要使用其他仓库共享的代码的仓库里 &lt;code&gt;npm link &amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;版本管理很困难，当一个仓库有更新，需要发布的时候，需要在其他所有依赖这个仓库的仓库里执行 &lt;code&gt;npm install&lt;/code&gt;  来使用这个刚更新仓库的最新版本。&lt;/li&gt;
&lt;li&gt;无法积累一个统一的工程化配置，从而复用，每次有新的项目的时候都要重新配置一次几乎一摸一样的， &lt;code&gt;ci&lt;/code&gt; , &lt;code&gt;lint&lt;/code&gt; ,  &lt;code&gt;构建&lt;/code&gt; ，等流程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;采用-monorepo-架构-可以解决这些问题吗会有哪些好处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#采用-monorepo-架构-可以解决这些问题吗会有哪些好处&#34;&gt;#&lt;/a&gt; 采用 Monorepo 架构 可以解决这些问题吗？会有哪些好处&lt;/h1&gt;
&lt;h2 id=&#34;将-monolith-巨石应用-换成-monorepo-架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将-monolith-巨石应用-换成-monorepo-架构&#34;&gt;#&lt;/a&gt; 将 Monolith 巨石应用 换成 Monorepo 架构&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将巨石应用，分为了不同的模块，在一定程度上进行了&lt;ins&gt;解耦&lt;/ins&gt;，明显的降低了耦合性，既&lt;ins&gt;降低了维护成本（找代码，改代码）&lt;/ins&gt;，&lt;ins&gt;也降低了新人上手门槛&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;当代码有更新，有变动的时候，只需要进行&lt;ins&gt;增量构建&lt;/ins&gt;，只构建，发布，有变动的模块和使用了有变动的模块的模块，而不需要构建所有的代码，大大提升了&lt;ins&gt;构建效率&lt;/ins&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;将-multirepo-多仓库多模块应用-换成-monorepo-架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将-multirepo-多仓库多模块应用-换成-monorepo-架构&#34;&gt;#&lt;/a&gt; 将 MultiRepo 多仓库多模块应用 换成 Monorepo 架构&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;模块之间的代码共享，更加&lt;ins&gt;便捷&lt;/ins&gt;，&lt;ins&gt;安全&lt;/ins&gt;，&lt;ins&gt;问题发现更加及时&lt;/ins&gt;。所有的模块都在一个仓库里，可以很轻松的使用维护的对外共享代码的模块共享的代码，并且当对外共享代码的模块出现问题时，在&lt;ins&gt;开发阶段&lt;/ins&gt;就可以及时发现，解决，而不是像 &lt;code&gt;MultiRepo&lt;/code&gt;  一样，只能等到 npm 包发布，才能发现。&lt;/li&gt;
&lt;li&gt;现代的众多 &lt;code&gt;monorepo&lt;/code&gt;  工具可以实现&lt;ins&gt;自动的版本管理&lt;/ins&gt;，当有模块更新的时候，自动更新该模块，和使用了该模块的模块。&lt;/li&gt;
&lt;li&gt;可以&lt;ins&gt;积累下统一的工程化配置&lt;/ins&gt;，多模块共同使用，&lt;ins&gt;当有新的项目的时候，可以作为一个新的模块直接接入，不再需要进行重复的工程化配置&lt;/ins&gt;。&lt;/li&gt;
&lt;li&gt;所有的项目，公共函数库，公共组件库，都作为一个模块在一个仓库里，作为&lt;ins&gt;数据资产落地&lt;/ins&gt;下来，&lt;ins&gt;便于新人快速上手&lt;/ins&gt;，知晓有哪些公共函数，公共组件，可以使用，并维护，提升开发效率。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;直接无脑的使用-monorepo-架构会带来哪些问题呢可以解决吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接无脑的使用-monorepo-架构会带来哪些问题呢可以解决吗&#34;&gt;#&lt;/a&gt; 直接无脑的使用 Monorepo 架构，会带来哪些问题呢，可以解决吗？&lt;/h1&gt;
&lt;h2 id=&#34;可能带来的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能带来的问题&#34;&gt;#&lt;/a&gt; 可能带来的问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;所有的项目都作为模块在同一个仓库里，可能出现改了其他模块的代码，并且负责该模块的同事还不知道，结果出现了问题。&lt;/li&gt;
&lt;li&gt;在维护对外共享代码的模块（比如，组件库，函数库， hooks 库）的时候，无意间造成了 &lt;code&gt;break change&lt;/code&gt; ，从而影响了其他使用了该模块的模块的正常运转。&lt;/li&gt;
&lt;li&gt;在更新对外共享代码的模块的时候，不通知更新内容，从而使其他同事不知道公共模块多了哪些东西，导致对外共享模块形同虚设，无法发挥作用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h2&gt;
&lt;p&gt;团队需要有严格的 &lt;code&gt;commit msg&lt;/code&gt;  规范，每次的 &lt;code&gt;commit msg&lt;/code&gt;  必须附上，更改的模块名；当公共模块有更新的时候，必须写上更新内容，并告知团队成员，一方面当不小心造成 &lt;code&gt;break change&lt;/code&gt;  时，团队成员能够及时发现，并解决。另一方面，团队成员可以及时知道公共模块更新了哪些内容，自己是否可以用到，从而放公共模块发挥作用。&lt;br /&gt;
团队需要有严格的 &lt;code&gt;code review&lt;/code&gt;  作为兜底&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;Monorepo 架构确实拥有着很大的优势（解耦；增量构建，提升构建效率；代码共享；积累统一的工程化配置，公共库，从而提高开发效率，积累数据资产；降低新人上手门槛），可以带来很多积极的作用，但是对团队规范有一定的要求，无脑的使用，可能会带来很多致命的问题，但是可以通过严格的团队规范来避免。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/pnpmLearn/</guid>
            <title>为什么选择pnpm来替代npm，yarn</title>
            <link>https://zimu-66ccff.github.io/pnpmLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="pnpm" scheme="https://zimu-66ccff.github.io/tags/pnpm/" />
            <category term="包管理器" scheme="https://zimu-66ccff.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/" />
            <pubDate>Tue, 31 Oct 2023 16:51:37 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;npm-yarn-遇到了什么问腿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm-yarn-遇到了什么问腿&#34;&gt;#&lt;/a&gt; npm, yarn, 遇到了什么问腿？&lt;/h1&gt;
&lt;p&gt;为了得到这个问题的答案，我们需要对 npm，yarn 执行 &lt;code&gt;npm install&lt;/code&gt;  or  &lt;code&gt;yarn install&lt;/code&gt;  后，在 &lt;code&gt;node_modules&lt;/code&gt;  文件夹里面是怎么管理依赖的。&lt;/p&gt;
&lt;h2 id=&#34;npm3-版本之前对依赖的管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之前对依赖的管理&#34;&gt;#&lt;/a&gt; npm3 版本之前对依赖的管理&lt;/h2&gt;
&lt;p&gt;npm3 版本之前在生成的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹对依赖的管理是&lt;ins&gt;嵌套结构&lt;/ins&gt;的&lt;/p&gt;
&lt;p&gt;假设我们有一个项目，它依赖于  &lt;code&gt;b&lt;/code&gt;  包， &lt;code&gt;c &lt;/code&gt; 包， &lt;code&gt;b&lt;/code&gt;  包又依赖于  &lt;code&gt;d&lt;/code&gt;  包和  &lt;code&gt;f&lt;/code&gt;  包，  &lt;code&gt;c&lt;/code&gt;  包又依赖于  &lt;code&gt;d&lt;/code&gt;  包和  &lt;code&gt;f&lt;/code&gt;  包&lt;br /&gt;
依赖关系如下：&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/31/AIEns.png&#34; alt=&#34;pnpmLearn01.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当我们运行 &lt;code&gt;npm install&lt;/code&gt;  的时候，生成的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹中对依赖的管理会是嵌套结构的，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
├── b
|   └── node_modules
|       └── d
|       └── f
├── c
|   └── node_modules
|       └── d
|       └── e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以发现，是和依赖关系对应的嵌套结构&lt;/p&gt;
&lt;h2 id=&#34;npm3-版本之前对依赖的管理方式嵌套式的-node_modules-文件结构的缺陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之前对依赖的管理方式嵌套式的-node_modules-文件结构的缺陷&#34;&gt;#&lt;/a&gt; npm3 版本之前对依赖的管理方式：嵌套式的 node_modules 文件结构的缺陷&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;嵌套的可能会非常深，就像  &lt;code&gt;d&lt;/code&gt;  又依赖于  &lt;code&gt;d1&lt;/code&gt; ， &lt;code&gt;d1&lt;/code&gt;  又依赖于  &lt;code&gt;d2&lt;/code&gt; ， &lt;code&gt;d2&lt;/code&gt;  又依赖于  &lt;code&gt;d3&lt;/code&gt; , 如此下去，嵌套的就会非常深，有的操作系统可能就难以支持了&lt;/li&gt;
&lt;li&gt;同一个项目里会出现依赖重复安装，我们可以看到 d 包是被安装了两次的，在 b 包的 &lt;code&gt;node_modules&lt;/code&gt;  里被安装了一次，在 &lt;code&gt;c&lt;/code&gt;  包的 &lt;code&gt;node_nodules&lt;/code&gt;  又被重复安装了一次&lt;/li&gt;
&lt;li&gt;不同的项目里都依赖同一个依赖的时候，这个依赖在磁盘里会被重复安装。比如 &lt;code&gt;x&lt;/code&gt;  项目和 &lt;code&gt;y&lt;/code&gt;  项目都依赖于 &lt;code&gt;z&lt;/code&gt;  包，那么 &lt;code&gt;z&lt;/code&gt;  包就会在磁盘里被安装两次&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;npm3-版本之后和-yarn-对依赖的管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之后和-yarn-对依赖的管理&#34;&gt;#&lt;/a&gt; npm3 版本之后和 yarn 对依赖的管理&lt;/h2&gt;
&lt;p&gt;npm3 以后的版本和 yarn 生成的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹是&lt;ins&gt;扁平结构的&lt;/ins&gt;&lt;br /&gt;
根据我们上面的项目例子，它的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹结构应该是如下的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
├── b
├── c
├── d
├── f
└── e

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以发现所有的依赖都被拍平了，是扁平化的，都被提升到了 node_modules 文件夹下面，而不是嵌套的。&lt;/p&gt;
&lt;h2 id=&#34;npm3-版本之后和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-解决了之前的哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之后和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-解决了之前的哪些问题&#34;&gt;#&lt;/a&gt; npm3 版本之后和 yarn 对依赖的管理方式：扁平式的 node_modules 文件结构 解决了之前的哪些问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;解决了嵌套的非常深的问题&lt;br /&gt;
采用了扁平式的结构，完全不存在嵌套&lt;/li&gt;
&lt;li&gt;解决了同一个项目里依赖重复安装的问题&lt;br /&gt;
我们可以看到 &lt;code&gt;d包&lt;/code&gt; 在 &lt;code&gt;node_modules&lt;/code&gt;  文件夹下面是只安装了一次的。&lt;br /&gt;
那么 &lt;code&gt;b包&lt;/code&gt;  or  &lt;code&gt;c包&lt;/code&gt; 包要怎么找到他们依赖的 &lt;code&gt;d&lt;/code&gt;  包呢，因为他们自己目录下没有 &lt;code&gt;node_modules&lt;/code&gt; ，就会到上层目录里找 &lt;code&gt;node_modules&lt;/code&gt; ，就可以找到项目根目录下面的 &lt;code&gt;node_modules&lt;/code&gt; ，里面就有他们需要的 &lt;code&gt;d&lt;/code&gt;  包&lt;br /&gt;
&lt;ins&gt; ps：依赖的查找方式是先在自己包目录下的 node_modules 目录下面找，如果不存在 or 没找到，就到上层目录的 node_modules 目录找，以此方式，不断的往上找&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;npm3-版本之后-和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-带来了哪些新的问题-还存在哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm3-版本之后-和-yarn-对依赖的管理方式扁平式的-node_modules-文件结构-带来了哪些新的问题-还存在哪些问题&#34;&gt;#&lt;/a&gt; npm3 版本之后 和 yarn 对依赖的管理方式：扁平式的 node_modules 文件结构 带来了哪些新的问题，还存在哪些问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;带来的新的问题
&lt;ol&gt;
&lt;li&gt;带了了 &lt;code&gt;幽灵依赖的问题&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;什么是幽灵依赖&lt;br /&gt;
在我们上面的例子里，我们项目 &lt;code&gt;a&lt;/code&gt;  只依赖于 &lt;code&gt;b&lt;/code&gt;  和 &lt;code&gt;c&lt;/code&gt; ，也就是说 &lt;code&gt;package.json&lt;/code&gt;  里的 &lt;code&gt;dependencies&lt;/code&gt;  只声明了 &lt;code&gt;b&lt;/code&gt;  和 &lt;code&gt;c&lt;/code&gt; ，但是因为扁平化的结构，我们可以在项目里使用 &lt;code&gt;package.json&lt;/code&gt;  的 &lt;code&gt;dependencies&lt;/code&gt;  里没有声明的 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt; 。 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt;  这三个依赖没有在项目目录的 &lt;code&gt;package.json&lt;/code&gt;  里声明，但是却可以使用，这种依赖就被称为 &lt;code&gt;幽灵依赖&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;幽灵依赖&lt;/code&gt; 会造成什么后果&lt;br /&gt;
 &lt;code&gt;d&lt;/code&gt;  是被 &lt;code&gt;b&lt;/code&gt;  依赖的，然后因为 &lt;code&gt;扁平化&lt;/code&gt; 的结构，我们才能使用，那么如果有一天 &lt;code&gt;b&lt;/code&gt;  不在依赖于 &lt;code&gt;d&lt;/code&gt;  了，那么我们一旦 &lt;code&gt;npm install&lt;/code&gt; ， &lt;code&gt;node_modules&lt;/code&gt;  里就不会再有 &lt;code&gt;d&lt;/code&gt;  了，而我们的项目代码还在使用 &lt;code&gt;d&lt;/code&gt; ，那么马上就会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;之前存在但是没有得到解决的问题
&lt;ol&gt;
&lt;li&gt;不同的项目里都依赖同一个依赖的时候，这个依赖在磁盘里会被重复安装。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;为什么选择-pnpmpnpm-的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么选择-pnpmpnpm-的优势&#34;&gt;#&lt;/a&gt; 为什么选择 pnpm（pnpm 的优势）&lt;/h1&gt;
&lt;h2 id=&#34;pnpm-对依赖的管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pnpm-对依赖的管理&#34;&gt;#&lt;/a&gt; pnpm 对依赖的管理&lt;/h2&gt;
&lt;p&gt;pnpm 对依赖的管理是一种扁平式和嵌套式相结合的，利用了软连接和硬链接的一种结构&lt;/p&gt;
&lt;p&gt;&lt;ins&gt;ps: 这里简单的讲解一下什么是软连接，什么是硬链接&lt;/ins&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬链接&lt;br /&gt;
在操作系统的文件系统里，磁盘的文件都会有一个编号叫索引节点号 (Inode Index)， 而硬链接就是文件名直接指向这个索引号，从而找到磁盘里的文件内容。并且可以存在多个文件硬链接同一个索引节点号。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。&lt;/li&gt;
&lt;li&gt;软连接&lt;br /&gt;
软连接也叫符号链接，它是一个保存有其他文件位置信息的文件，指向的是其他文件的位置信息，而不是磁盘里的文件的索引节点号。所以一旦它指向的那个文件被删除，它就找不到了&lt;/li&gt;
&lt;li&gt;详细的讲解请看这篇文章&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaXRlY2gvYXJjaGl2ZS8yMDA5LzA0LzEwLzE0MzMwNTIuaHRtbA==&#34;&gt; Linux 软连接和硬链接&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依旧是我们上面的例子，它的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹结构应该是如下的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
├── .pnpm
    └── b // 硬连接 指向的是磁盘里的b包
        └── node_modules
            └── d // 软连接 指向的是 .pnpm/d
            └── f // 软连接 指向的是 .pnpm/f
    └── c
        └── node_modules
            └── d // 软连接 指向的是 .pnpm/d
            └── e // 软连接 指向的是 .pnpm/e
    └── d // 硬连接 指向的是磁盘里的d包
    └── e // 硬连接 指向的是磁盘里的e包
    └── f // 硬连接 指向的是磁盘里的f包
    └── node_modules
        └── b // 软连接 指向的是.pnpm/b
        └── c // 软连接 指向的是.pnpm/c
        └── d // 软连接 指向的是.pnpm/d
        └── e // 软连接 指向的是.pnpm/e
        └── f // 软连接 指向的是.pnpm/f
├── b // 软连接 指向的是 .pnpm/b
├── c // 软连接 指向的是 .pnpm/c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到这个文件结构的时候第一感觉肯定是，好复杂啊，一下子多了好多东西，没关系，我接下来会逐一介绍为什么会是这样的，然后你就会发现这个结构真的是十分巧妙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;node_modules&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我们会发现 &lt;code&gt;node_modules&lt;/code&gt;  目录下的包文件和我们项目里的 &lt;code&gt;package.json&lt;/code&gt;  里 &lt;code&gt;dependencies&lt;/code&gt;  声明的包是一摸一样的。这样就可以有效的避免 &lt;code&gt;幽灵依赖的问题&lt;/code&gt; ，项目里就不能直接使用 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt;  , &lt;code&gt;f&lt;/code&gt;  这些幽灵依赖了，因为 &lt;code&gt;node_modules&lt;/code&gt;  里面没有。&lt;ins&gt;完美解决幽灵依赖的问题&lt;/ins&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;好，聪明的你马上就会问， &lt;code&gt;b&lt;/code&gt; ,  &lt;code&gt;c&lt;/code&gt;  都有各自的依赖呀，可是 &lt;code&gt;node_modules/b&lt;/code&gt; , &lt;code&gt;node_modules/c&lt;/code&gt;  里面没有 &lt;code&gt;node_modules&lt;/code&gt;  呀，那怎么找到他们的依赖呢。那么现在就告诉你真相， &lt;code&gt;node_modules/&lt;/code&gt;  下面的包文件全部都是 &lt;code&gt;软连接&lt;/code&gt; ，他们都指向 &lt;code&gt;node_modules/.pnpm/&lt;/code&gt;  目录下 对应的包，也就是 &lt;code&gt;node_modules/.pnpm/b&lt;/code&gt; ，  &lt;code&gt;node_modules/.pnpm/c&lt;/code&gt; , 他们下面就有对应的 &lt;code&gt;node_modules&lt;/code&gt;  来存储他们各自对应的依赖啦。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node_modules/.pnpm&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们会发现 &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  目录下拥有着我们项目所有的依赖， &lt;code&gt;b&lt;/code&gt; ,  &lt;code&gt;c&lt;/code&gt; ,  &lt;code&gt;d&lt;/code&gt;  , &lt;code&gt;e&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt; ，并且是扁平化的，而且他们都是 &lt;code&gt;硬链接&lt;/code&gt; 。都指向磁盘里的 &lt;code&gt;b&lt;/code&gt; ， &lt;code&gt;c&lt;/code&gt; ， &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;e&lt;/code&gt;  , &lt;code&gt;f&lt;/code&gt; 。这样当我们在其他项目里面也有这些依赖的时候，就不需要在磁盘里面重复安装，直接一个 &lt;code&gt;硬连接&lt;/code&gt; 指向磁盘里对应的文件就可以。&lt;ins&gt;完美解决不同项目里同样的依赖在磁盘里重复安装的问题&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node_modules/.pnpm/ 包文件 /node_modules&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们会发现 &lt;code&gt;node_modules/.pnpm/包文件/node_modules/&lt;/code&gt;  目录下拥有者包所需要的依赖， 而这些依赖其实都是软连接，指向 &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  目录下对应的包文件。在这里就是 &lt;code&gt;node_modules/.pnpm/b/&lt;/code&gt;  下面有着 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt; , 但其实这个 &lt;code&gt;d&lt;/code&gt; ,  &lt;code&gt;f&lt;/code&gt;  都是软连接，指向 &lt;code&gt;node_modules/.pnpm/d&lt;/code&gt; ,  &lt;code&gt;node_modules/.pnpm/f&lt;/code&gt; 。这样虽然 &lt;code&gt;b&lt;/code&gt; ,  &lt;code&gt;c&lt;/code&gt;  都依赖于 &lt;code&gt;d&lt;/code&gt; , 但是却不会重复安装，而是都指向 &lt;code&gt;node_modules/.pnpm/d&lt;/code&gt; 。 &lt;ins&gt;完美解决同一项目里依赖重复安装的问题&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node_modules/.pnpm/node_modules&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们会发现 &lt;code&gt;node_modules/.pnpm/node_modules&lt;/code&gt;  这个目录下存有项目的所有依赖。当然，都是软连接，指向 &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  下面的包，那么这个文件夹到底是什么作用呢。&lt;/li&gt;
&lt;li&gt;我们都知道 &lt;code&gt;幽灵依赖&lt;/code&gt; 是不安全的，是很容易导致问题的，但是现实是，依旧很多第三方包使用了幽灵依赖，而我们的 pnpm 也对幽灵依赖做了兼容，在特定的情况下是允许幽灵依赖的，那么幽灵依赖在哪找呢，就是这个目录下面，这个目录是扁平化的，拥有项目所有的包。 &lt;ins&gt;实现了对幽灵依赖的支持 但是最好不要这样 因为幽灵依赖并不安全&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pnpm-的优势解决了哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pnpm-的优势解决了哪些问题&#34;&gt;#&lt;/a&gt; pnpm 的优势，解决了哪些问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过软连接避免了 &lt;code&gt;幽灵依赖&lt;/code&gt; 的问题&lt;/li&gt;
&lt;li&gt;通过硬连接解决了 &lt;code&gt;不同项目的相同依赖&lt;/code&gt; 在磁盘重复安装的问题，提升了速度&lt;/li&gt;
&lt;li&gt;通过软连接，  &lt;code&gt;node_modules/.pnpm&lt;/code&gt;  的 &lt;code&gt;扁平化&lt;/code&gt; 结构解决了 &lt;code&gt;同一项目里相同依赖&lt;/code&gt; 重复安装的问题&lt;/li&gt;
&lt;li&gt;通过软连接和 &lt;code&gt;node_modules/.pnpm/node_modules&lt;/code&gt;  目录，兼容了 &lt;code&gt;幽灵依赖&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/plopLearn/</guid>
            <title>plop-一个基于模板的代码生成器</title>
            <link>https://zimu-66ccff.github.io/plopLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="plop" scheme="https://zimu-66ccff.github.io/tags/plop/" />
            <category term="脚手架" scheme="https://zimu-66ccff.github.io/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/" />
            <pubDate>Sun, 29 Oct 2023 17:53:34 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;plop-是什么为什么需要-plop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#plop-是什么为什么需要-plop&#34;&gt;#&lt;/a&gt; plop 是什么，为什么需要 plop&lt;/h1&gt;
&lt;p&gt;Plop is a little tool that saves you time and helps your team build new files with consistency.&lt;br /&gt;
 这是官网对于 plop 的评价，实际上也确实是这样， plop 可以通过命令和用户配置的 hbs 模板文件来在指定的目录下生成对应的模板代码。想一想，我们只需要通过一个命令，就可以在我们需要的目录下生成对应的文件，里面有本来需要我们手写的结构代码，这该是一件多爽的事情，可以大大的节约我们的时间&lt;/p&gt;
&lt;h1 id=&#34;plop-体验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#plop-体验&#34;&gt;#&lt;/a&gt; plop 体验&lt;/h1&gt;
&lt;h2 id=&#34;下载-plop推荐全局下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载-plop推荐全局下载&#34;&gt;#&lt;/a&gt; 下载 plop (推荐全局下载)&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;pnpm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; plop &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;编写模板代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写模板代码&#34;&gt;#&lt;/a&gt; 编写模板代码&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- templates/sfc/index.vue.hbs --&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
&amp;#123;&amp;#123;&gt; importVueRef&amp;#125;&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;
&amp;#123;&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在根目录下新建一个文件夹存放我们对应的模板代码，plop 后面会根据这些模板代码来生成我们需要的代码&lt;/p&gt;
&lt;p&gt;你可能已经发现了出现了 &lt;code&gt;&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;&lt;/code&gt;  这样的代码  &lt;code&gt;&amp;#123;&amp;#123;&amp;#125;&amp;#125;&lt;/code&gt;  这个叫模板语法，你可能会说这不是和 vue 的模板语法是一样的嘛 是的 是一样的 因为 vue 的模板语法就是借鉴（抄）的这个 那么你应该会好奇 componentName 的值是什么呢 这个将会在命令里传递 请继续往下看&lt;/p&gt;
&lt;h3 id=&#34;在项目根目录创建我们的-plopfilejs-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在项目根目录创建我们的-plopfilejs-文件&#34;&gt;#&lt;/a&gt; 在项目根目录创建我们的 plopfile.js 文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;export default function (plop) &amp;#123;
  plop.setGenerator(&#39;createSFC&#39;, &amp;#123;
    description: &#39;create one SFC&#39;,
    prompts: [&amp;#123; type: &#39;input&#39;, name: &#39;componentName&#39;, message: &#39;input componentName&#39; &amp;#125;],
    actions: (data) =&amp;gt; &amp;#123;
      return [
        &amp;#123;
          type: &#39;add&#39;,
          path: &#39;./src/&amp;#123;&amp;#123;camelCase componentName&amp;#125;&amp;#125;/index.vue&#39;,
          templateFile: &#39;./templates/sfc/index.vue.hbs&#39;,
        &amp;#125;,
      ];
    &amp;#125;,
  &amp;#125;);
  plop.setPartial(&#39;importVueRef&#39;, `import &amp;#123;Ref&amp;#125; from &#39;vue&#39; `);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单讲解一下，我们用 &lt;code&gt;plop&lt;/code&gt;  这个对象身上的 &lt;code&gt;setGenerator&lt;/code&gt;  命令，配置了一个命令， &lt;code&gt;createSFC&lt;/code&gt;  是这个命令的名字（自己取），然后通过终端输入 &lt;code&gt;plop createSFC&lt;/code&gt;  这个命令来使用。&lt;br /&gt;
 &lt;code&gt;description&lt;/code&gt;  是对这个命令功能的描述，当我们输入 &lt;code&gt;plop&lt;/code&gt;  命令的时候，终端会列出所有的 plop 命令和它的描述（就是我们这里 description 写的）.&lt;br /&gt;
 &lt;code&gt;prompts&lt;/code&gt;  是一个数组，数组里面的元素是一个对象（用来描述终端提示语的）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type&lt;br /&gt;
 这个提示的类型，这里是 &#39;input&#39;,&lt;/li&gt;
&lt;li&gt;name&lt;br /&gt;
 定义变量名 (这里的变量名是 componentName)，用来存储用户将从终端输入的值 (因为是 input 类型，所以是用户输入一个值)。&lt;/li&gt;
&lt;li&gt;message&lt;br /&gt;
 提示信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;action&lt;/code&gt;  是这个命令具体将执行的操作，是一个数组，因为一个命令是可以执行多个操作的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type&lt;br /&gt;
 操作的类型，这里是 &#39;add&#39;, 也就是在指定目录下生成一个文件&lt;/li&gt;
&lt;li&gt;path&lt;br /&gt;
 生成的文件的路径， &lt;code&gt;&#39;./src/&amp;#123;&amp;#123;camelCase componentName&amp;#125;&amp;#125;/index.vue&#39;&lt;/code&gt; ， 这里又出现了插值语法， &lt;code&gt;componentName&lt;/code&gt;  是我们在 &lt;code&gt;prompts&lt;/code&gt;  里面配置的用户输入的，我们假设输入的是 &#39;button-success&#39;， 你可能注意到了前面还有一个 &lt;code&gt;camelCase&lt;/code&gt; ，这个是一个 &lt;code&gt;helper&lt;/code&gt; ，它的作用是把 componentName 的值变成驼峰形式，也就是说用户输入的 &#39;button-success&#39; 会变成 &#39;buttonSuccess&#39;。也就是说实际上生成的文件路径会是 &lt;code&gt;./src/buttonSuccess/index.vue&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
 我们写的模板代码，也就是 hbs 文件的路径，在这里就是生成的 &lt;code&gt;index.vue&lt;/code&gt;  文件的代码将会是这个 &lt;code&gt;&#39;./templates/sfc/index.vue.hbs&#39;&lt;/code&gt;  文件里的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在-packagejson-文件的-script-里面配置脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在-packagejson-文件的-script-里面配置脚本&#34;&gt;#&lt;/a&gt; 在 package.json 文件的 script 里面配置脚本&lt;/h2&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;scripts&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;plop&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;plop&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;执行命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行命令&#34;&gt;#&lt;/a&gt; 执行命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;执行 &lt;code&gt;pnpm plop&lt;/code&gt;  命令&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/29/AVTPm.png&#34; alt=&#34;plopLearn01.png&#34; /&gt;&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;componentName&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/29/AVq6N.png&#34; alt=&#34;plopLearn02.png&#34; /&gt;&lt;/li&gt;
&lt;li&gt;src/buttonSuccess 目录下就生成了 index.vue 代码了&lt;/li&gt;
&lt;li&gt;查看 src/buttonSuccess/index.vue 的代码&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/29/AVGGp.png&#34; alt=&#34;plop03.png&#34; /&gt;&lt;br /&gt;
 我们可以发现和我们的模板代码 hbs 文件几乎是一样的，并且 &lt;code&gt;&amp;#123;&amp;#123;componentName&amp;#125;&amp;#125;&lt;/code&gt;  这种插值语法也已经被正确的替换为了用户输入的 &lt;code&gt;buttonSucess&lt;/code&gt;  (用户输入的 button-success， 但是被我们设置的 camelCase 给转化成了驼峰形式)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;plop-的-api-讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#plop-的-api-讲解&#34;&gt;#&lt;/a&gt; plop 的 api 讲解&lt;/h1&gt;
&lt;h2 id=&#34;sethelper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sethelper&#34;&gt;#&lt;/a&gt; setHelper&lt;/h2&gt;
&lt;p&gt;用来自定义 &lt;code&gt;helper&lt;/code&gt; ,  &lt;code&gt;helper&lt;/code&gt;  用来对值做转换，例如:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;plop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  plop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHelper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;upperCase&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toUpperCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一个参数为 helper 的名字，这里是 &amp;quot;upperCase&amp;quot;, 第二个参数为处理函数，这里是将值转换为大写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用方式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;&amp;#123;upperCase componentName&amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;效果：&lt;br /&gt;
假设 componentName 本来的值是 &amp;quot;button&amp;quot;， 那么它最终会被转换成 &#39;BUTTON&#39;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自带的 helper（这些 helper 为 plop 自带的，可以直接使用）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;camelCase: changeFormatToThis&lt;/li&gt;
&lt;li&gt;snakeCase: change_format_to_this&lt;/li&gt;
&lt;li&gt;dashCase/kebabCase: change-format-to-this&lt;/li&gt;
&lt;li&gt;dotCase: change.format.to.this&lt;/li&gt;
&lt;li&gt;pathCase: change/format/to/this&lt;/li&gt;
&lt;li&gt;properCase/pascalCase: ChangeFormatToThis&lt;/li&gt;
&lt;li&gt;lowerCase: change format to this&lt;/li&gt;
&lt;li&gt;sentenceCase: Change format to this,&lt;/li&gt;
&lt;li&gt;constantCase: CHANGE_FORMAT_TO_THIS&lt;/li&gt;
&lt;li&gt;titleCase: Change Format To This&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setpartial&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setpartial&#34;&gt;#&lt;/a&gt; setPartial&lt;/h2&gt;
&lt;p&gt;用来自定义局部的模板，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;/** @type &amp;#123;import(&#39;plop&#39;).NodePlopAPI&amp;#125; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  plop&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  plop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setPartial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;importVueRef&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;import &amp;#123;Ref&amp;#125; from &#39;vue&#39; &lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一个参数为局部模板的名字，这里是 &#39;importVueRef&#39;, 第二个人参数为模板，这里是 &#39;import {Ref} from &#39;vue&#39;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;&amp;#123;&gt; importVueRef&amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;效果：&lt;br /&gt;
 &lt;code&gt;&amp;#123;&amp;#123;&gt; importVueRef&amp;#125;&amp;#125;&lt;/code&gt;  会变成  &lt;code&gt;import &amp;#123;Ref&amp;#125; from &#39;vue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内置的-actions-type&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置的-actions-type&#34;&gt;#&lt;/a&gt; 内置的 actions type&lt;/h1&gt;
&lt;h2 id=&#34;add&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#add&#34;&gt;#&lt;/a&gt; add&lt;/h2&gt;
&lt;p&gt;用来在指定的路径生成文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;path&lt;br /&gt;
string 类型，生成的文件的路径&lt;/li&gt;
&lt;li&gt;template&lt;br /&gt;
string 类型，模板，以这个模板来生成文件（说白点，就是生成的文件的代码会和这个模板一摸一样）&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
string 类型，模板代码文件的路径，会以这个路径的模板文件来生成文件&lt;/li&gt;
&lt;li&gt;force&lt;br /&gt;
boolean 类型，当该文件已经存在的时候，是否覆盖&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 对象或者函数类型（函数要返回一个对象），为模板提供额外的数据（就是为那些插值语法提供额外的数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;addmany&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addmany&#34;&gt;#&lt;/a&gt; addMany&lt;/h2&gt;
&lt;p&gt;将多个目录和文件添加到指定目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;destination&lt;br /&gt;
string 类型，在该路径下添加文件&lt;/li&gt;
&lt;li&gt;base&lt;br /&gt;
string 类型， 在该路径下匹配目录和文件，匹配到的目录和文件将会被添加到对应路径下面&lt;/li&gt;
&lt;li&gt;templateFiles&lt;br /&gt;
glob 类型， 以该模式匹配目录和文件的模式， 比如 templates/components/*, 就是匹配 templates 目录下的 components 目录下的所有文件&lt;/li&gt;
&lt;li&gt;stripExtensions&lt;br /&gt;
 添加到指定目录时自动删掉对应的后缀名，默认值为 [&#39;hbs&#39;]， 也就是说添加文件的时候.hbs 后缀会被默认删掉。比如说文件名为 index.vue.hbs, 添加的时候就会变成 index.vue&lt;/li&gt;
&lt;li&gt;force&lt;br /&gt;
boolean 类型，当该文件已经存在的时候，是否覆盖&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 对象或者函数类型（函数要返回一个对象），为模板提供额外的数据（就是为那些插值语法提供额外的数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modify&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modify&#34;&gt;#&lt;/a&gt; modify&lt;/h2&gt;
&lt;p&gt;用于替换指定文件中的匹配到的文本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;path&lt;br /&gt;
 同上&lt;/li&gt;
&lt;li&gt;pattern&lt;br /&gt;
 正则表达式，用于匹配文本&lt;/li&gt;
&lt;li&gt;template&lt;br /&gt;
string 类型，用于将匹配到的文本替换成这个模板&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
string 类型， 模板的路径，以该路径的模板来替换匹配到的文本&lt;/li&gt;
&lt;li&gt;transform&lt;br /&gt;
 函数类型，用来转换文件内容&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;append&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#append&#34;&gt;#&lt;/a&gt; append&lt;/h2&gt;
&lt;p&gt;用于在指定文件中匹配到的文本后面添加内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用属性（其他属性请查官网）
&lt;ul&gt;
&lt;li&gt;path&lt;br /&gt;
 同上&lt;/li&gt;
&lt;li&gt;pattern&lt;br /&gt;
 正则表达式，用于匹配文本&lt;/li&gt;
&lt;li&gt;template&lt;br /&gt;
string 类型，用于在匹配到的文本后面添加这个模板&lt;/li&gt;
&lt;li&gt;templateFile&lt;br /&gt;
string 类型， 模板的路径，将该路径的模板添加到匹配到的文本后面&lt;/li&gt;
&lt;li&gt;transform&lt;br /&gt;
 函数类型，用来转换文件内容&lt;/li&gt;
&lt;li&gt;data&lt;br /&gt;
 同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内置的-promps-type&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置的-promps-type&#34;&gt;#&lt;/a&gt; 内置的 promps type&lt;/h2&gt;
&lt;p&gt;和 inquire 的一样 详细的可以查看 inquire 的官网&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NCb3Vkcmlhcy9JbnF1aXJlci5qcw==&#34;&gt; https://github.com/SBoudrias/Inquirer.js&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/packageJsonLearn/</guid>
            <title>package.json文件详解</title>
            <link>https://zimu-66ccff.github.io/packageJsonLearn/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="package.json文件" scheme="https://zimu-66ccff.github.io/tags/package-json%E6%96%87%E4%BB%B6/" />
            <pubDate>Sat, 28 Oct 2023 14:56:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;packagejson-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#packagejson-是什么&#34;&gt;#&lt;/a&gt; package.json 是什么&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;  文件会描述我们项目的所有配置信息（名称，版本，使用协议），所有 npm 包的信息（版本，是否是开发环境依赖）&lt;/p&gt;
&lt;h1 id=&#34;怎么创建-packagejson-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么创建-packagejson-文件&#34;&gt;#&lt;/a&gt; 怎么创建 package.json 文件&lt;/h1&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# npm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# pnpm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;pnpm&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;属性介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性介绍&#34;&gt;#&lt;/a&gt; 属性介绍&lt;/h1&gt;
&lt;h2 id=&#34;name&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#name&#34;&gt;#&lt;/a&gt; name&lt;/h2&gt;
&lt;p&gt;包的名字， 不能以 &lt;code&gt;.&lt;/code&gt; ,  &lt;code&gt;_&lt;/code&gt; ,  &lt;code&gt;大写字母&lt;/code&gt; 开头&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm 域级包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;介绍及其作用&lt;br /&gt;
在 npm 的包管理系统中，有一种  &lt;code&gt;scoped packages&lt;/code&gt;  机制，用于将一些 npm 包以 &lt;code&gt;@scope/package&lt;/code&gt;  的命名形式集中在一个命名空间下面，实现域级的包管理。域级包不仅不用担心会和别人的包名重复，同时也能对功能类似的包进行统一的划分和管理；比如我们用 vue 脚手架搭建的项目，里面就有 &lt;code&gt;@vue/cli-plugin-babel&lt;/code&gt; 、 &lt;code&gt;@vue/cli-plugin-eslint&lt;/code&gt;  等等域级包。相同域级范围内的包会被安装在相同的文件路径下，比如 &lt;code&gt;node_modules/@username/&lt;/code&gt; ，可以包含任意数量的作用域包；安装域级包也需要指明其作用域范围：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; @username/package&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们在初始化项目时可以使用命令行来添加  &lt;code&gt;scope&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; init &lt;span class=&#34;token parameter variable&#34;&gt;--scope&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;username&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;version&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#version&#34;&gt;#&lt;/a&gt; version&lt;/h2&gt;
&lt;p&gt;包的版本号，npm 包的版本号也是有规范要求的，通用的就是遵循  &lt;code&gt;semver&lt;/code&gt;  语义化版本规范，版本格式为： &lt;code&gt;major.minor.patch&lt;/code&gt; ，每个字母代表的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主版本号 (major)：当你做了不兼容的 API 修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;次版本号 (minor)：当你做了向下兼容的功能性新增&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修订号 (patch)：当你做了向下兼容的问题修正&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先行版本号：先行版本号是加到修订号的后面，作为版本号的延伸；当要发行大版本或核心功能时，但不能保证这个版本完全正常，就要先发一个先行版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式&lt;br /&gt;
先行版本号的格式是在修订版本号后面加上一个连接号（-），再加上一连串以点（.）分割的标识符，标识符可以由英文、数字和连接号（[0-9A-Za-z-]）组成。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.0​​.0-alpha
1.0.0-alpha.1
1.0.0-0.3.7
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见先行版本号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alpha：不稳定版本，一般而言，该版本的 Bug 较多，需要继续修改，是测试版本&lt;/li&gt;
&lt;li&gt;beta：基本稳定，相对于 Alpha 版已经有了很大的进步，消除了严重错误&lt;/li&gt;
&lt;li&gt;rc：和正式版基本相同，基本上不存在导致错误的 Bug&lt;/li&gt;
&lt;li&gt;release：最终版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;当主版本号升级后，次版本号和修订号需要重置为 0，次版本号进行升级后，修订版本需要重置为 0。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;description-keywords&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#description-keywords&#34;&gt;#&lt;/a&gt; description, keywords&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;description&lt;br /&gt;
 &lt;code&gt;String&lt;/code&gt;  类型，描述项目的信息， 可以显示在 &lt;code&gt;npm search&lt;/code&gt;  命令的返回结果中&lt;/li&gt;
&lt;li&gt;keywords&lt;br /&gt;
Array &lt;code&gt;类型， 描述项目的信息， 可以显示在&lt;/code&gt;  npm search` 命令的返回结果中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;homepage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homepage&#34;&gt;#&lt;/a&gt; homepage&lt;/h2&gt;
&lt;p&gt;用来指定项目的主页 or 部署网站的根目录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开发环境的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免路径问题&lt;/p&gt;
&lt;p&gt;一些前端框架和构建工具在路由和资源加载时依赖于  &lt;code&gt;homepage&lt;/code&gt;  属性。如果你不在开发环境中设置  &lt;code&gt;homepage&lt;/code&gt; ，可能会在构建应用时遇到问题，尤其是当你使用前端路由（如  &lt;code&gt;React Router&lt;/code&gt; ）时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试相对路径:&lt;/p&gt;
&lt;p&gt;开发环境中的开发服务器通常使用相对路径来加载资源，而不需要指定完整的 URL。设置  &lt;code&gt;homepage&lt;/code&gt;  属性可以帮助你测试应用在不同路径上的行为，以确保它在生产环境中正常工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生产环境的作用&lt;br /&gt;
指定应用程序的根 URL，确保所有资源（例如 CSS、JavaScript 文件等）的加载路径正确。这是非常关键的，因为在生产环境中，你的应用可能托管在不同的域名、子目录或路径上，而  &lt;code&gt;homepage&lt;/code&gt;  可以确保资源正确加载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;author-contributors-maintainers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#author-contributors-maintainers&#34;&gt;#&lt;/a&gt; author, contributors, maintainers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;author&lt;br /&gt;
 作者， &lt;code&gt;string | &amp;#123;name: string, url?: sting, email?: string&amp;#125;&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;contributors&lt;br /&gt;
 贡献者列表，  &lt;code&gt;Array&amp;lt;string | &amp;#123;name: string, url?: sting, email?: string&amp;#125;&amp;gt;&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;maintainers&lt;br /&gt;
 维护者列表， &lt;code&gt;Array&amp;lt;string | &amp;#123;name: string, url?: sting, email?: string&amp;#125;&amp;gt;&lt;/code&gt;  类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bugs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bugs&#34;&gt;#&lt;/a&gt; bugs&lt;/h2&gt;
&lt;p&gt;提供地址来让用户反馈存在的问题， &lt;code&gt;&amp;#123;url: string, email: string&amp;#125;&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;license-license&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#license-license&#34;&gt;#&lt;/a&gt; license, license&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;license&lt;br /&gt;
 开源协议名称， &lt;code&gt;string&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;licenses&lt;br /&gt;
 多个包的开源协议名称， &lt;code&gt;Array&amp;lt;&amp;#123;type: string, url: string&amp;#125;&amp;gt;&lt;/code&gt;  类型&lt;br /&gt;
&lt;img data-src=&#34;https://i0.imgs.ovh/2023/10/28/FDPvK.png&#34; alt=&#34;license.png&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;main-module-browser&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#main-module-browser&#34;&gt;#&lt;/a&gt; main, module, browser&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;main&lt;br /&gt;
 指定加载时的入口文件， &lt;code&gt;cmd&lt;/code&gt;  模块规范导入的时候就会加载这个文件，默认为根目录下的 &lt;code&gt;index.js&lt;/code&gt;  文件，  &lt;code&gt;browser&lt;/code&gt;  和 &lt;code&gt;node&lt;/code&gt;  环境下均可使用， &lt;code&gt;string&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;module&lt;br /&gt;
 指定 &lt;code&gt;esm&lt;/code&gt;  模块规范时的入口文件， &lt;code&gt;browser&lt;/code&gt;  和 &lt;code&gt;node&lt;/code&gt;  环境下均可使用， &lt;code&gt;string&lt;/code&gt;  类型&lt;/li&gt;
&lt;li&gt;browser&lt;br /&gt;
 指定 &lt;code&gt;browser&lt;/code&gt;  环境下的入口文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dependencies-devdependencies&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dependencies-devdependencies&#34;&gt;#&lt;/a&gt; dependencies, devDependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dependencies&lt;br /&gt;
 项目 &lt;code&gt;运行&lt;/code&gt; 所需的依赖， &lt;code&gt;开发&lt;/code&gt; 和 &lt;code&gt;生产&lt;/code&gt; 环境都需要的依赖，命令如下:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 不缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx &lt;span class=&#34;token parameter variable&#34;&gt;--save&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;devDependencies&lt;br /&gt;
 项目 &lt;code&gt;开发&lt;/code&gt; 所需的依赖，只会在 &lt;code&gt;开发&lt;/code&gt; 环境被安装，命令如下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 不缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx --save-dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 缩写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; xxx &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;版本号规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有任何符号：完全百分百匹配，必须使用当前版本号&lt;/li&gt;
&lt;li&gt;对比符号类的：&amp;gt;(大于) &amp;gt;=(大于等于) &amp;lt;(小于) &amp;lt;=(小于等于)&lt;/li&gt;
&lt;li&gt;波浪符号&lt;sub&gt;：固定主版本号和次版本号，修订号可以随意更改，例如&lt;/sub&gt; 2.0.0，可以使 用 2.0.0、2.0.2 、2.0.9 的版本。&lt;/li&gt;
&lt;li&gt;插入符号&lt;sup&gt;：固定主版本号，次版本号和修订号可以随意更改，例如&lt;/sup&gt; 2.0.0，可以使 用 2.0.1、2.2.2 、2.9.9 的版本。&lt;/li&gt;
&lt;li&gt;任意版本 *：对版本没有限制，一般不用&lt;/li&gt;
&lt;li&gt;或符号：|| 可以用来设置多个版本号限制规则，例如 &amp;gt;= 3.0.0 || &amp;lt;= 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;peerdependencies-bundleddependencies-optionaldependencies&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#peerdependencies-bundleddependencies-optionaldependencies&#34;&gt;#&lt;/a&gt; peerDependencies, bundledDependencies, optionalDependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;peerDependencies&lt;br /&gt;
 用来告诉别人当使用这个依赖的时候，需要使用那些特定版本的依赖，比如 &lt;code&gt;依赖 A&lt;/code&gt;  的  &lt;code&gt;package.json&lt;/code&gt;  中声明了  &lt;code&gt;peerDependencies&lt;/code&gt; ,  &lt;code&gt;xxx6.0&lt;/code&gt;  吗，那么如果安装了 &lt;code&gt;依赖 A&lt;/code&gt;  就也应该安装  &lt;code&gt;xxx6.0&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;但是请注意， &lt;code&gt;peerDependencies&lt;/code&gt;  下的依赖并不会被强行安装，它只是告诉你，应该安装 对应版本的这些依赖，因为该依赖依赖于这些依赖，如果不安装，可能会出现问题&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bundledDependencies&lt;/p&gt;
&lt;p&gt;依赖默认时不会被打包的，但是 &lt;code&gt;bundledDependencies&lt;/code&gt;  下的依赖也会被一起打包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optionalDependencies&lt;/p&gt;
&lt;p&gt;指定一些可选的依赖，这些依赖也会被 &lt;code&gt;npm install&lt;/code&gt;  安装，但是安装失败了，不会报错，不会导致整个 &lt;code&gt;npm install&lt;/code&gt;  失败&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#files&#34;&gt;#&lt;/a&gt; files&lt;/h2&gt;
&lt;p&gt;用来指定 npm 发包时应该包括哪些目录和文件， &lt;code&gt;string | Array&amp;lt;string&amp;gt;&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;bin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bin&#34;&gt;#&lt;/a&gt; bin&lt;/h2&gt;
&lt;p&gt;用来指定命令和对应的可执行文件，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;my-cli-tool&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;version&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;my-command&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;bin/my-command.js&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;bin&lt;/code&gt;  中的键（例如  &lt;code&gt;&amp;quot;my-command&amp;quot;&lt;/code&gt; ）是用户在命令行中执行的命令名称。 &lt;code&gt;bin&lt;/code&gt;  中的值是指向模块中实际可执行文件的相对路径。当全局安装 &lt;code&gt;my-cli-tool&lt;/code&gt;  的时候，系统会创建一个符号链接，将  &lt;code&gt;bin&lt;/code&gt;  中指定的命令名称与相应的可执行文件关联，然后这个符号连接会被添加到系统的 &lt;code&gt;PATH&lt;/code&gt;  变量中。当我们执行 &lt;code&gt;my-command&lt;/code&gt;  命令的时候，系统就会通过 &lt;code&gt;PATH&lt;/code&gt;  的符号连接找到对应的 &lt;code&gt;bin/my-command&lt;/code&gt;  文件并执行其中的代码。如果我们的包以 &lt;code&gt;依赖&lt;/code&gt; 的方式被安装时，如果有 &lt;code&gt;bin&lt;/code&gt; ，就会在 &lt;code&gt;node_modules/.bin/&lt;/code&gt;  生成对应的文件，然后建立符号链接，所有 &lt;code&gt;node_modules/.bin/&lt;/code&gt;  目录下的命令都可以使用 &lt;code&gt;npm run [命令]&lt;/code&gt;  的格式下运行。&lt;/p&gt;
&lt;h2 id=&#34;directories&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#directories&#34;&gt;#&lt;/a&gt; directories&lt;/h2&gt;
&lt;p&gt;展示项目的目录结构信息，用来告诉用户每个目录在什么位置， 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;my-module&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;version&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;directories&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;bin&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;lib&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;src&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;doc&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;docs&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用来告诉用户 or 其他开发者 可执行文件请放到  &lt;code&gt;bin&lt;/code&gt;  目录，库的核心代码请放到  &lt;code&gt;lib&lt;/code&gt;  目录，文档代码请放到  &lt;code&gt;doc&lt;/code&gt;  目录。&lt;/p&gt;
&lt;h2 id=&#34;repository&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#repository&#34;&gt;#&lt;/a&gt; repository&lt;/h2&gt;
&lt;p&gt;用来告诉想要加入我们，对我们的代码做贡献的人，我们的代码仓库在哪里， &lt;code&gt;&amp;#123;type: string, url: string, directory: string&amp;#125;&lt;/code&gt;  类型。比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;&#34;repository&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;git&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;url&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://github.com/DomeSy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;directory&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;描述话语&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;script&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#script&#34;&gt;#&lt;/a&gt; script&lt;/h2&gt;
&lt;p&gt;指定对应命令的脚本（缩写）, 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;&#34;scripts&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token property&#34;&gt;&#34;start&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;cross-env UMI_ENV=dev umi dev&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当执行 &lt;code&gt;npm run script&lt;/code&gt;  的时候就相当于执行了 &lt;code&gt;cross-env UMI_ENV=dev umi dev&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;config&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#config&#34;&gt;#&lt;/a&gt; config&lt;/h2&gt;
&lt;p&gt;用来添加命令行的环境变量， 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;domesy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;config&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;port&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;8088&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;script&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;start&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;node server.js&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当我们在 node 环境中打印 &lt;code&gt;process.npm_package_config_port&lt;/code&gt;  的时候就会打印出 8080&lt;/p&gt;
&lt;h2 id=&#34;engines&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#engines&#34;&gt;#&lt;/a&gt; engines&lt;/h2&gt;
&lt;p&gt;用来指定本库的运行条件， 比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;engines&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;node&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&gt;=0.10.3 &amp;lt;0.12&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里就限制了，如果想要运行本库，node 的版本必须大于等于 0.10.3 小于 0.12&lt;/p&gt;
&lt;h2 id=&#34;os&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#os&#34;&gt;#&lt;/a&gt; os&lt;/h2&gt;
&lt;p&gt;用来指定可以在哪些操作系统上运行，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;os&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;linux&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;win64&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;就说明可以在 &lt;code&gt;linux&lt;/code&gt;  和 &lt;code&gt;64位的windows&lt;/code&gt;  操作系统上运行&lt;/p&gt;
&lt;h2 id=&#34;cpu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt; cpu&lt;/h2&gt;
&lt;p&gt;用来指定可以在哪些架构下的 &lt;code&gt;cpu&lt;/code&gt;  上运行， 比如:&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;cpu&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;x64&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ia32&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;private&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#private&#34;&gt;#&lt;/a&gt; private&lt;/h2&gt;
&lt;p&gt;用来指定这是否是一个私人的库，如果是，那么就不能在 npm 上面发布公开，  &lt;code&gt;boolean&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;publishconfig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#publishconfig&#34;&gt;#&lt;/a&gt; publishConfig&lt;/h2&gt;
&lt;p&gt;用来指定发包时候的一些配置，比如发到哪个包管理服务器上面，是发布哪个版本，访问级别（哪些用户可以访问）比如：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;publishConfig&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;tag&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1.0.0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 发布 1.0.0 版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;registry&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://www.npmjs.com/package/domesy-cli&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 发布到这个包管理服务器上面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;access&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;public&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 所有用户都可以访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;preferglobal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preferglobal&#34;&gt;#&lt;/a&gt; preferGlobal&lt;/h2&gt;
&lt;p&gt;用来指定当用户不全局下载该库的时候是否发出警告，  &lt;code&gt;boolean&lt;/code&gt;  类型&lt;/p&gt;
&lt;h2 id=&#34;browserslist&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#browserslist&#34;&gt;#&lt;/a&gt; browserslist&lt;/h2&gt;
&lt;p&gt;指定该库支持的浏览器类型， 比如&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;browserslist&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;production&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&gt;0.2%&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;not dead&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;not op_mini all&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;development&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;last 1 chrome version&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;last 1 firefox version&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;last 1 safari version&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/vite%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BE%97%E5%8A%9B%E5%8A%A9%E6%89%8B-esbuild-rollup/</guid>
            <title>vite的两个得力助手-esbuild-rollup</title>
            <link>https://zimu-66ccff.github.io/vite%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BE%97%E5%8A%9B%E5%8A%A9%E6%89%8B-esbuild-rollup/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="深入浅出vite" scheme="https://zimu-66ccff.github.io/tags/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAvite/" />
            <pubDate>Wed, 26 Jul 2023 17:47:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;esbuild&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esbuild&#34;&gt;#&lt;/a&gt; esbuild&lt;/h1&gt;
&lt;h3 id=&#34;esubuild-为什么快vite-选择-esbuild-在开发环境打包第三方依赖的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esubuild-为什么快vite-选择-esbuild-在开发环境打包第三方依赖的原因&#34;&gt;#&lt;/a&gt; esubuild 为什么快 (vite 选择 esbuild 在开发环境打包第三方依赖的原因)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 Go 开发&lt;br /&gt;
 Go 的代码会被直接编译成原生机器码，而不需要像 JS 一样先解析为字节码，然后再转换成字节码，大大的节省了程序运行的时间、&lt;/li&gt;
&lt;li&gt;多核并行&lt;br /&gt;
因为 Go 中多线程共享内存的优势，内部打包算法充分的利用了多核 CPU 的多核优势，使得所有步骤尽可能的并行&lt;/li&gt;
&lt;li&gt;从零造轮子&lt;br /&gt;
几乎没有使用第三方库，全部是自己编写的逻辑，保证了代码的极致性能&lt;/li&gt;
&lt;li&gt;高效的内存利用&lt;br /&gt;
 Esbuild 中从头到尾尽可能地复用一份 AST 节点数据，而不用像 JS 打包工具中频繁地解析和传递 AST 数据（如 string -&amp;gt; TS -&amp;gt; JS -&amp;gt; string)，造成内存的大量浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;esbuild-的不足vite-为什么在生产环境不选择-esbuild-而选择了-rollup-来进行打包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esbuild-的不足vite-为什么在生产环境不选择-esbuild-而选择了-rollup-来进行打包&#34;&gt;#&lt;/a&gt; esbuild 的不足（vite 为什么在生产环境不选择 esbuild 而选择了 rollup 来进行打包）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无法兼容低端浏览器&lt;br /&gt;
不支持把语法降级到 &lt;code&gt;es5&lt;/code&gt; ，不支持 &lt;code&gt;const enum&lt;/code&gt;  等高级语法&lt;/li&gt;
&lt;li&gt;无法灵活处理打包产物，无法自定义拆包&lt;br /&gt;
没有提供操作打包产物的接口，没有提供子定义拆包策略的 api&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vite-用-esbuild-做了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vite-用-esbuild-做了什么&#34;&gt;#&lt;/a&gt; vite 用 esbuild 做了什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bunder
&lt;ol&gt;
&lt;li&gt;在开发环境，为了顺利的实现 &lt;code&gt;no-bunder&lt;/code&gt; ，在&lt;strong&gt;预构建&lt;/strong&gt;使用 esuild 来将其他的模块化规范转换成了 &lt;code&gt;esm&lt;/code&gt; （因为 &lt;code&gt;no-bundler&lt;/code&gt;  本质上是利用了浏览器原生支持 esm，让浏览器来请求对应模块）&lt;/li&gt;
&lt;li&gt;使用 esbuild 来对第三方依赖进行打包（避免出现请求瀑布流，浏览器发起过多请求，导致首屏时间过长）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;transformer&lt;br /&gt;
 进行单文件编译，作为 TS, JSX, TSX 的编译工具，并且在&lt;strong&gt;生产环境&lt;/strong&gt;也是用的 esbuild 来进行编译。但是无法进行 ts 的类型检查，所以还是需要利用 &lt;code&gt;tsc&lt;/code&gt;  来进行类型检查&lt;/li&gt;
&lt;li&gt;minifier&lt;br /&gt;
 对 css, js 文件进行压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rollup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rollup&#34;&gt;#&lt;/a&gt; rollup&lt;/h1&gt;
&lt;h3 id=&#34;vite-用-rollup-做了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vite-用-rollup-做了什么&#34;&gt;#&lt;/a&gt; vite 用 rollup 做了什么&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生产环境利用 &lt;code&gt;rollup&lt;/code&gt;  进行打包，并对其进行扩展和优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS 代码分割&lt;br /&gt;
如果某个异步模块中引入了一些 CSS 代码，Vite 就会自动将这些 CSS 抽取出来生成单独的文件，提高线上产物的缓存复用率。&lt;/li&gt;
&lt;li&gt;自动预加载&lt;br /&gt;
 Vite 会自动为入口 chunk 的依赖自动生成预加载标签 &lt;code&gt;&amp;lt;link       rel=&amp;quot;modulepreload&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;异步 Chunk 加载优化&lt;br /&gt;
在异步引入的 Chunk 中，通常会有一些公用的模块，如现有两个 异 步引入的 Chunk: A 和 B，而且两者有一个公共依赖 C，一般 情况 下，Rollup 打包之后，会先请求 A，然后浏览器在加载 A 的过程 中才决定请求和加载 C，但 Vite 进行优化之后，请求 A 的同时会 自动预加载 C，通过优化 Rollup 产物依赖加载方式节省 了不必要 的网络开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兼容了 &lt;code&gt;rollup&lt;/code&gt;  的插件机制&lt;br /&gt;
 vite 插件可以直接传入 rollup 作为插件使用，但是 rollup 的插件不一定能直接传入 vite 作为 vite 插件使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/engineeringProblems-viteLearning/</guid>
            <title>前端工程化痛点-vite的解决方案-深入浅出vite学习</title>
            <link>https://zimu-66ccff.github.io/engineeringProblems-viteLearning/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="深入浅出vite" scheme="https://zimu-66ccff.github.io/tags/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAvite/" />
            <pubDate>Wed, 26 Jul 2023 15:04:39 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端工程化的痛点及-vite-的解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端工程化的痛点及-vite-的解决方案&#34;&gt;#&lt;/a&gt; 前端工程化的痛点及 vite 的解决方案&lt;/h1&gt;
&lt;h3 id=&#34;痛点一模块化规范太多需要一个支持和兼容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点一模块化规范太多需要一个支持和兼容&#34;&gt;#&lt;/a&gt; 痛点一：模块化规范太多，需要一个支持和兼容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;支持 ESM 模块化方案（支持异步，浏览器原生支持），由于浏览器原生支持 ESM，所以可以基于 ESM 实现  &lt;code&gt;no-bunder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;兼容其他的模块化方案，通过在 &lt;code&gt;预构建&lt;/code&gt; 过程中来使用 &lt;code&gt;esbuild&lt;/code&gt;  来将其他模块化方案转换成 ESM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化方案面对的问题
&lt;ul&gt;
&lt;li&gt;模块的拆分&lt;/li&gt;
&lt;li&gt;模块的依赖关系导致的加载顺序（a 模块依赖 b 模块，那就需要先引入 b 模块再引入 a 模块）&lt;/li&gt;
&lt;li&gt;变量命名冲突&lt;/li&gt;
&lt;li&gt;浏览器是否兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化方案发展历史
&lt;ul&gt;
&lt;li&gt;第一阶段：通过 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  来做模块化，但是存在变量命名冲突，模块加载顺序的问题&lt;/li&gt;
&lt;li&gt;第二阶段：通过 &lt;code&gt;命名空间（window.moduleA, window,moduleB）&lt;/code&gt; 来做模块化，解决了变量命名冲突，但是 没有解决模块加载顺序的问题&lt;/li&gt;
&lt;li&gt;第三阶段：通过  &lt;code&gt;IIFE（立即执行函数）&lt;/code&gt; 来做模块化，解决了变量命名冲突，但是没有解决模块加载顺序的问题&lt;/li&gt;
&lt;li&gt;第四阶段：通过  &lt;code&gt;CommonJS&lt;/code&gt;  规范来做模块化，解决了变量冲突，模块加载顺序的问题，但是存在一个加载是同 步的问题（这在浏览器是个大问题，当加载的模块过大时，会阻塞后续代码的执行，会造成界面白屏时间过长），并且 浏览器并不支持这个模块化方案&lt;/li&gt;
&lt;li&gt;第五阶段：通过  &lt;code&gt;AMD&lt;/code&gt;  来做模块化，也就是异步模块定义方案，解决了上述的问题，但是写起来太麻烦，并且也 没有得到浏览器的支持&lt;/li&gt;
&lt;li&gt;最终阶段：通过 &lt;code&gt;ESM&lt;/code&gt;  来做模块化，完美解决了上述问题所有问题（变量命名冲突，模块加载顺序），并且加载是 异步的，不会阻塞页面渲染，并且是浏览器原生支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛点二需要对-tstsx-等高级语法做一个转译对静态资源做处理使其能作为一个正常模块加载能够对语法做一个降级并注入一些高级语法以支持低级浏览器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点二需要对-tstsx-等高级语法做一个转译对静态资源做处理使其能作为一个正常模块加载能够对语法做一个降级并注入一些高级语法以支持低级浏览器&#34;&gt;#&lt;/a&gt; 痛点二：需要对 ts，tsx 等高级语法做一个转译，对静态资源做处理，使其能作为一个正常模块加载，能够对语法做一个降级，并注入一些高级语法，以支持低级浏览器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;esbuild&lt;/code&gt;  来对 ts，tsx 等语法来进行一个转译（但是 ts 的语法检查还是需要 &lt;code&gt;tsc&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;vite 内置对 JSON 模块的加载（底层使用 @rollup/pluginutils 的 dataToEsm 方法将 JSON 对象转换为一 个包含各种具名导出的 ES 模块）&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;bable&lt;/code&gt;  来将高级语法编译成低级语法（比如把箭头函数变成普通函数），通过 &lt;code&gt;corejs&lt;/code&gt;  来注入一些高级 API (比如 promise)，从而兼容低版本的浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛点三提高产物质量要能给对代码进行压缩和-treeshaking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点三提高产物质量要能给对代码进行压缩和-treeshaking&#34;&gt;#&lt;/a&gt; 痛点三：提高产物质量，要能给对代码进行压缩和 Treeshaking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;esbuild&lt;/code&gt;  来对代码进行一个压缩&lt;/li&gt;
&lt;li&gt;treeShaking (待更新)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛点四开发效率低下开发启动时间很长热更新很慢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痛点四开发效率低下开发启动时间很长热更新很慢&#34;&gt;#&lt;/a&gt; 痛点四：开发效率低下，开发启动时间很长，热更新很慢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vite 的解决方案
&lt;ul&gt;
&lt;li&gt;开发阶段直接 &lt;code&gt;no-bunder&lt;/code&gt;  不打包直接启动，利用浏览器原生支持 ESM 的这一点，让浏览器来加载源代码对应的模块（在预构建过程中，利用 &lt;code&gt;esbuild&lt;/code&gt;  来将其他模块化方案转换成 ESM，并打包第三方依赖，避免请求瀑布的出现，导致白屏时间过长）&lt;/li&gt;
&lt;li&gt;热更新（待更新）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/download/</guid>
            <title>前端实现文件下载的几种方式</title>
            <link>https://zimu-66ccff.github.io/download/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="项目" scheme="https://zimu-66ccff.github.io/categories/note/project/" />
            <category term="项目" scheme="https://zimu-66ccff.github.io/tags/%E9%A1%B9%E7%9B%AE/" />
            <category term="文件下载" scheme="https://zimu-66ccff.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/" />
            <pubDate>Tue, 18 Jul 2023 10:13:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;后端提供的下载文件的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后端提供的下载文件的方式&#34;&gt;#&lt;/a&gt; 后端提供的下载文件的方式&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;直接返回文件的网络地址（一般用在静态文件上，比如图片以及各种音视频资源等）&lt;/li&gt;
&lt;li&gt;返回文件流（一般用在动态文件上，比如根据前端选择，导出不同的统计结果 excel 等）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;不同方式前端的处理方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不同方式前端的处理方案&#34;&gt;#&lt;/a&gt; 不同方式，前端的处理方案&lt;/h1&gt;
&lt;h4 id=&#34;第一种&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一种&#34;&gt;#&lt;/a&gt; 第一种&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 a 标签的 &lt;code&gt;download&lt;/code&gt;  属性和 &lt;code&gt;click&lt;/code&gt;  函数&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;https://www.baidu.top.pdf&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;download&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;附件.pdf&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;下载文件&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;window.location.href&lt;/code&gt;  (推荐)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javaScript&#34;&gt;&amp;lt;script&amp;gt;
function Download() &amp;#123;
  window.location.href = &#39;www.baidu.pdf&#39;
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;window.open&lt;/code&gt;  (推荐)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javaScript&#34;&gt;&amp;lt;script&amp;gt;
  function Download() &amp;#123;
    window.open(&#39;www.baidu.pdf&#39;)
  &amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第二种-使用-blob-文件流下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二种-使用-blob-文件流下载&#34;&gt;#&lt;/a&gt; 第二种 使用 blob 文件流下载&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-javaScript&#34;&gt; &amp;lt;script&amp;gt;
    function Download() &amp;#123;
      axios(&amp;#123;
        url: &amp;quot;www.baidu.pdf&amp;quot;,
        method: &#39;GET&#39;,
        responseType: &#39;blob&#39;, // 这里就是转化为blob文件流
        headers: &amp;#123;
          token: &#39;sss&#39;     // 可以携带token
        &amp;#125;
      &amp;#125;).then(res =&amp;gt; &amp;#123;
        const href = URL.createObjectURL(res.data)
        const box = document.createElement(&#39;a&#39;)
        box.download = &#39;附件.pdf&#39;
        box.href = href
        box.click()
      &amp;#125;)
    &amp;#125;
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/omi/</guid>
            <title>腾讯犀牛鸟开源活动-OMI开源申请书</title>
            <link>https://zimu-66ccff.github.io/omi/</link>
            <category term="开源" scheme="https://zimu-66ccff.github.io/categories/openSource/" />
            <category term="开源" scheme="https://zimu-66ccff.github.io/tags/%E5%BC%80%E6%BA%90/" />
            <category term="omi" scheme="https://zimu-66ccff.github.io/tags/omi/" />
            <pubDate>Mon, 17 Jul 2023 09:40:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;omi-开源申请书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#omi-开源申请书&#34;&gt;#&lt;/a&gt; OMI 开源申请书&lt;/h1&gt;
&lt;h2 id=&#34;技术方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术方案&#34;&gt;#&lt;/a&gt; 技术方案&lt;/h2&gt;
&lt;h4 id=&#34;omi-编程任务分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#omi-编程任务分解&#34;&gt;#&lt;/a&gt; OMI 编程任务分解&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;开发脚手架搭建&lt;/li&gt;
&lt;li&gt;组件开发&lt;/li&gt;
&lt;li&gt;组件设计器开发&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任务-1开发-omi-组件库脚手架以自动生成-omi-组件模板辅助后续组件开发并集成-tdesign-common-提供的-tdesign-样式文件和工具函数保持组件的样式风格一致&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务-1开发-omi-组件库脚手架以自动生成-omi-组件模板辅助后续组件开发并集成-tdesign-common-提供的-tdesign-样式文件和工具函数保持组件的样式风格一致&#34;&gt;#&lt;/a&gt; 任务 1：开发 OMI 组件库脚手架，以自动生成 OMI 组件模板辅助后续组件开发，并集成 Tdesign-common 提供的 Tdesign 样式文件和工具函数，保持组件的样式风格一致&lt;/h4&gt;
&lt;p&gt;实战周期 2--3 周&lt;/p&gt;
&lt;p&gt;目标一：借鉴生态成熟的组件库脚手架 比如 valet-cli 抽离出 OMI 的 webComponents 的公共模板 以自动生成组件模板辅助开发&lt;br /&gt;
预计耗时： 一周&lt;/p&gt;
&lt;p&gt;目标二：在脚手架里集成 Tdesign-common 提供的样式文件和工具函数，以实现通过命令生成对应组件模板的时候可以根据配置选择是否自动导入类似组件的样式文件&lt;br /&gt;
预计耗时：一周&lt;/p&gt;
&lt;p&gt;本人优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;研究过 varlet-cli 源码，有脚手架开发经验&lt;/li&gt;
&lt;li&gt;开发过简易脚手架，来自动化实现相关配置和集成&lt;br /&gt;
链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2ZmL3ppTXUtY2xp&#34;&gt;https://github.com/ziMu-66ccff/ziMu-cli&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;可以熟练使用 inquirer，figlet，fs-extra，chalk， commander 等工具库&lt;/li&gt;
&lt;li&gt;有比较好的审美&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任务-2利用上一步提供的脚手架来辅助开发基于-omi-和-tdesign-common-的相关组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务-2利用上一步提供的脚手架来辅助开发基于-omi-和-tdesign-common-的相关组件&#34;&gt;#&lt;/a&gt; 任务 2：利用上一步提供的脚手架来辅助开发基于 OMI 和 Tdesign-common 的相关组件&lt;/h4&gt;
&lt;p&gt;实战周期：2-3 周&lt;/p&gt;
&lt;p&gt;目标一：通过对组件的复杂程度排个序，来从简到难的逐步开发相关的组件，可以借鉴主流的生态完善的组件库 比如 ant-design&lt;br /&gt;
 预计耗时 2.5 周&lt;/p&gt;
&lt;p&gt;本人优势:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在合合信息实习时 参与过部门的高度定制化的组件库的开发，有一定的组件库开发能力&lt;/li&gt;
&lt;li&gt;参加字节青训营时，和小伙伴们一起开发过 lucky-Componets 组件库&lt;br /&gt;
链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xpdVNlbjY4OC9sdWNreUNvbXBvbmVudHM=&#34;&gt;https://github.com/LiuSen688/luckyComponents&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任务-3开发基于-omi-的组件设计器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务-3开发基于-omi-的组件设计器&#34;&gt;#&lt;/a&gt; 任务 3：开发基于 OMI 的组件设计器&lt;/h4&gt;
&lt;p&gt;实战周期： 3 周以上&lt;/p&gt;
&lt;p&gt;目标：在相关导师的指导下，完善自己低代码开发的能力，努力再努力，热情再热情的完成这个组件设计器的开发&lt;/p&gt;
&lt;h4 id=&#34;申请人项目经历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#申请人项目经历&#34;&gt;#&lt;/a&gt; 申请人项目经历&lt;/h4&gt;
&lt;p&gt;github：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2Zm&#34;&gt;https://github.com/ziMu-66ccff&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ziMu-cli， 一款简单的开箱即用的搭建 vue，react 项目的脚手架&lt;br /&gt;
项目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2ZmL3ppTXUtY2xp&#34;&gt;https://github.com/ziMu-66ccff/ziMu-cli&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;lucky-components， 一款合作完成的适配 vue3 的组件库&lt;br /&gt;
项目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xpdVNlbjY4OC9sdWNreUNvbXBvbmVudHM=&#34;&gt;https://github.com/LiuSen688/luckyComponents&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;mini-vue3 自己学习 vue3 源码后 写的一个简单的 vue3 框架&lt;br /&gt;
项目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ppTXUtNjZjY2ZmL21pbmktdnVlMw==&#34;&gt;https://github.com/ziMu-66ccff/mini-vue3&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;前端全栈开发能力 熟练使用 Vue.js， OMI， Nest.js, mongoDB 等&lt;/li&gt;
&lt;li&gt;对 vite，webpack 有一定了解&lt;/li&gt;
&lt;li&gt;目前大二，在合合信息实习&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;姓名：李文豪&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/bigProject/</guid>
            <title>瑞翼工坊暑期大项目宣讲会</title>
            <link>https://zimu-66ccff.github.io/bigProject/</link>
            <category term="学校" scheme="https://zimu-66ccff.github.io/categories/school/" />
            <category term="学校" scheme="https://zimu-66ccff.github.io/tags/%E5%AD%A6%E6%A0%A1/" />
            <category term="瑞翼工坊" scheme="https://zimu-66ccff.github.io/tags/%E7%91%9E%E7%BF%BC%E5%B7%A5%E5%9D%8A/" />
            <pubDate>Fri, 07 Jul 2023 15:53:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;为什么我们需要做这样的一个平台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么我们需要做这样的一个平台&#34;&gt;#&lt;/a&gt; 为什么我们需要做这样的一个平台？&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;工坊的很多东西 散落在各个地方 刚进来的人无法知道工坊的财富 无法得到自己需要的东西 所以我们用这样的一个平台对其做一个整合，让工坊成员都能得到自己想要的东西&lt;/li&gt;
&lt;li&gt;开发部门的新人缺少一个项目开发的经验，我们以这样的一个平台，来让新人得到锻炼，并且提供一对一的指导&lt;/li&gt;
&lt;li&gt;有新的技术，奇妙的想法，无法付诸于实践， 所以我们提供这样的一个可扩展的平台，随时对其进行扩展。&lt;/li&gt;
&lt;li&gt;开发部门的新人们简历上缺乏一个优秀的，高技术的，真正的项目（有访问量的），缺乏项目部署的经验，业务思维，而我们提供这样的一个项目&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;开发完毕后我们将得到什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发完毕后我们将得到什么&#34;&gt;#&lt;/a&gt; 开发完毕后，我们将得到什么&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;一个真正的项目开发经验，部署经验（这是区别于网上的项目的）&lt;/li&gt;
&lt;li&gt;获得业务思维，提升业务能力 （业务能力也是面试时很看重的一点，而这种真正的项目，不是为了做而做的项目，有背景的项目可以很好的提升业务思维）&lt;/li&gt;
&lt;li&gt;获取一定的名誉，如果可以的话，项目将向全计信推广，我们也会将开发者的名字放到项目里&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;具体开发信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体开发信息&#34;&gt;#&lt;/a&gt; 具体开发信息&lt;/h1&gt;
&lt;h3 id=&#34;模块拆分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块拆分&#34;&gt;#&lt;/a&gt; 模块拆分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工坊（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;瑞翼荣耀 （小卡片）&lt;/li&gt;
&lt;li&gt;场地助手 （小卡片）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;技术学习（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;方向介绍 （小卡片）
&lt;ul&gt;
&lt;li&gt;前端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;服务端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;vr （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;算法部 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学习路线 （小卡片）
&lt;ul&gt;
&lt;li&gt;前端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;服务端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;vr （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;算法部 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每日一问 （小卡片）
&lt;ul&gt;
&lt;li&gt;前端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;服务端 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;vr （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;算法部 （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;暑期实习，秋招公司信息 （小卡片）&lt;/li&gt;
&lt;li&gt;开发平台 （小卡片）
&lt;ul&gt;
&lt;li&gt;jekins （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;coding （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;li&gt;tapd （小卡片 or 左侧导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活动（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;训练营 （小卡片） ps：建议支持一键组队功能&lt;/li&gt;
&lt;li&gt;开源活动 （小卡片） ps：建议支持一键组队功能&lt;/li&gt;
&lt;li&gt;比赛 （小卡片） ps: 建议支持一键组队功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;练习（顶部导航栏）
&lt;ul&gt;
&lt;li&gt;工坊 oj 平台 （小卡片）&lt;/li&gt;
&lt;li&gt;leetcode （小卡片）&lt;/li&gt;
&lt;li&gt;前端刷题网站 （小卡片）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学校 （顶部导航栏）
&lt;ul&gt;
&lt;li&gt;学校平台 （小卡片）
&lt;ul&gt;
&lt;li&gt;湖大 vpn （小卡片）&lt;/li&gt;
&lt;li&gt;智慧服务中心 （小卡片）&lt;/li&gt;
&lt;li&gt;教务系统 （小卡片）&lt;/li&gt;
&lt;li&gt;实践系统 （小卡片）&lt;/li&gt;
&lt;li&gt;图书管理系统 （小卡片）&lt;/li&gt;
&lt;li&gt;体测系统 （小卡片）&lt;/li&gt;
&lt;li&gt;LMS 课程平台 （小卡片）&lt;/li&gt;
&lt;li&gt;宿管系统 （小卡片）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;课程资料 （小卡片）
&lt;ul&gt;
&lt;li&gt;cpp （小卡片 or 左侧一级导航栏） ps： 只是一个例子
&lt;ul&gt;
&lt;li&gt;知识总结 （小卡片 or 左侧二级导航栏）&lt;/li&gt;
&lt;li&gt;推荐书籍 （小卡片 or 左侧二级导航栏）&lt;/li&gt;
&lt;li&gt;课后习题答案 （小卡片 or 左侧二级导航栏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;友链 （顶部导航栏）&lt;/li&gt;
&lt;li&gt;小工具 （顶部导航栏）&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/workflowConfig/</guid>
            <title>前端工作流配置——代码不仅是给机器看的，也是给人看的（持续更新中）</title>
            <link>https://zimu-66ccff.github.io/workflowConfig/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="工作流配置" scheme="https://zimu-66ccff.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81%E9%85%8D%E7%BD%AE/" />
            <pubDate>Mon, 19 Jun 2023 19:41:24 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslint&#34;&gt;#&lt;/a&gt; eslint&lt;/h1&gt;
&lt;h3 id=&#34;为什么需要-eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要-eslint&#34;&gt;#&lt;/a&gt; 为什么需要 eslint&lt;/h3&gt;
&lt;p&gt;因为我们写的代码有时候可能质量并不高，所以我们需要这样的一个工具来 &lt;code&gt;规范我们的代码&lt;/code&gt; ，保障我们的 &lt;code&gt;代码质量&lt;/code&gt; （比如我们写了一个变量 但是这个变量我们没有使用 那么这个变量就是多余的 这时候我们的 eslint 可以直接报错 让我们知道这个多余的变量应该删除）&lt;/p&gt;
&lt;h3 id=&#34;怎么在项目中集成-eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么在项目中集成-eslint&#34;&gt;#&lt;/a&gt; 怎么在项目中集成 eslint&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载 eslint&lt;br /&gt;
 使用你的包管理工具（pnpm，yarn，npm，npx）安装 eslint 具体命令  &lt;code&gt;pnpm install eslint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化 eslint（）&lt;br /&gt;
具体命令  &lt;code&gt;pnpm eslint --init&lt;/code&gt; , 执行该命令后会让你 &lt;code&gt;回答相关问题&lt;/code&gt; ，从而选择适合你的规则来约束你的代码，目的只有一个提高你的代码质量
&lt;ul&gt;
&lt;li&gt;how would you like to use eslint?（你想使用 eslint 来做什么）
&lt;ul&gt;
&lt;li&gt;to check syntax only（只检查语法）&lt;/li&gt;
&lt;li&gt;to check syntax and find problems（检查语法并找出错误）&lt;/li&gt;
&lt;li&gt;to check syntax, find problems, and enforce code style （检查语法，找出错误，规范代码）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what type of modules does your project use? （你想使用什么模块化规范）
&lt;ul&gt;
&lt;li&gt;javascript modules (import/export)&lt;/li&gt;
&lt;li&gt;commonjs (require/exports)&lt;/li&gt;
&lt;li&gt;none of these&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;which framework does your project use? （你想使用什么框架）
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;none of these&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Does your project use Typescript No/Yes （是否要使用 ts）&lt;/li&gt;
&lt;li&gt;Where does your code run? （代码运行在什么环境，一般两个都选）
&lt;ul&gt;
&lt;li&gt;Browser&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How would you like to define a style for your project? （你想怎么来定义 eslint 的规则， 推荐直接使用流行的规范）
&lt;ul&gt;
&lt;li&gt;use a popular style guide （使用流行的规范）&lt;/li&gt;
&lt;li&gt;answer questions about your style （通过询问问题 得到你想要的规范吧）&lt;/li&gt;
&lt;li&gt;inspect your javascript files （根据配置文件 生成规范）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Which style guide do you want to to follow? （你想使用哪个流行的规范）
&lt;ul&gt;
&lt;li&gt;Standard&lt;/li&gt;
&lt;li&gt;XO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What format do you want your config file to be in ? （配置文件的格式 建议直接选择 JavaScript）
&lt;ul&gt;
&lt;li&gt;javascript&lt;/li&gt;
&lt;li&gt;yaml&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vscode 安装 eslint 插件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;eslintcjs-配置文件的相关配置项解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eslintcjs-配置文件的相关配置项解析&#34;&gt;#&lt;/a&gt; .eslint.cjs 配置文件的相关配置项解析&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;parser - 解析器&lt;br /&gt;
 ESLint 底层默认使用 Espree 来进行 AST 解析，这个解析器目前已经基于 Acron 来实现，虽然说 Acron 目前能够解析绝大多数的 ECMAScript 规范的语法，但还是不支持 TypeScript ，因此需要引入其他的解析器完成 TS 的解析。&lt;/p&gt;
&lt;p&gt;社区提供了 @typescript-eslint/parser 这个解决方案，专门为了 TypeScript 的解析而诞生，将 TS 代码转换为 Espree 能够识别的格式 (即 Estree 格式)，然后在 Eslint 下通过 Espree 进行格式检查， 以此兼容了 TypeScript 语法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parserOptions - 解析器选项&lt;br /&gt;
这个配置可以对上述的解析器进行能力定制，默认情况下 ESLint 支持 ES5 语法，你可以配置这个选项，具体内容如下:&lt;/p&gt;
&lt;p&gt;ecmaVersion: 这个配置和 Acron 的 ecmaVersion 是兼容的，可以配置 ES + 数字 (如 ES6) 或者 ES + 年份 (如 ES2015)，也可以直接配置为 latest，启用最新的 ES 语法。&lt;br /&gt;
sourceType: 默认为 script，如果使用 ES Module 则应设置为 module&lt;br /&gt;
ecmaFeatures: 为一个对象，表示想使用的额外语言特性，如开启 jsx。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rules - 具体代码规则&lt;br /&gt;
 rules 配置即代表在 ESLint 中手动调整哪些代码规则，比如禁止在 if 语句中使用赋值语句这条规则可以像如下的方式配置:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 其它配置省略&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//key 为规则名，value 配置内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string-property property&#34;&gt;&#39;no-cond-assign&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;always&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 rules 对象中，key 一般为规则名，value 为具体的配置内容，在上述的例子中我们设置为一个数组，数组第一项为规则的 ID，第二项为规则的配置。&lt;/p&gt;
&lt;p&gt;这里重点说一说规则的 ID，它的语法对所有规则都适用，你可以设置以下的值:&lt;/p&gt;
&lt;p&gt;off 或 0: 表示关闭规则。&lt;/p&gt;
&lt;p&gt;warn 或 1: 表示开启规则，不过违背规则后只抛出 warning，而不会导致程序退出。&lt;br /&gt;
error 或 2: 表示开启规则，不过违背规则后抛出 error，程序会退出。&lt;br /&gt;
具体的规则配置可能会不一样，有的是一个字符串，有的可以配置一个对象，你可以参考 ESLint 官方文档。&lt;/p&gt;
&lt;p&gt;当然，你也能直接将 rules 对象的 value 配置成 ID，如: &amp;quot;no-cond-assign&amp;quot;: &amp;quot;error&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plugins&lt;br /&gt;
 上面提到过 ESLint 的 parser 基于 Acorn 实现，不能直接解析 TypeScript，需要我们指定 parser 选项为 @typescript-eslint/parser 才能兼容 TS 的解析。同理，ESLint 本身也没有内置 TypeScript 的代码规则，这个时候 ESLint 的插件系统就派上用场了。我们需要通过添加 ESLint 插件来增加一些特定的规则，比如添加 @typescript-eslint/eslint-plugin 来拓展一些关于 TS 代码的规则，如下代码所示:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 添加 TS 规则，可省略 `eslint-plugin`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;@typescript-eslint&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;值得注意的是，添加插件后只是拓展了 ESLint 本身的规则集，但 ESLint 默认并没有 开启这些规则的校验！如果要开启或者调整这些规则，你需要在 rules 中进行配置，如:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 开启一些 TS 规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string-property property&#34;&gt;&#39;@typescript-eslint/ban-ts-comment&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string-property property&#34;&gt;&#39;@typescript-eslint/no-explicit-any&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;warn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;extends - 继承配置&lt;br /&gt;
 extends 相当于继承另外一份 ESLint 配置，可以配置为一个字符串，也可以配置成一个 字符串数组。主要分如下 3 种情况:&lt;/p&gt;
&lt;p&gt;从 ESLint 本身继承；&lt;br /&gt;
从类似 eslint-config-xxx 的 npm 包继承；&lt;br /&gt;
从 ESLint 插件继承。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string-property property&#34;&gt;&#34;extends&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第 1 种情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;eslint:recommended&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第 2 种情况，一般配置的时候可以省略 `eslint-config`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;standard&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第 3 种情况，可以省略包名中的 `eslint-plugin`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 格式一般为: `plugin:$&amp;#123;pluginName&amp;#125;/$&amp;#123;configName&amp;#125;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;plugin:react/recommended&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;plugin:@typescript-eslint/recommended&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;有了 extends 的配置，对于之前所说的 ESLint 插件中的繁多配置，我们就不需要手动 一一开启了，通过 extends 字段即可自动开启插件中的推荐规则:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;plugin:@typescript-eslint/recommended&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;env 和 globals&lt;br /&gt;
 这两个配置分别表示运行环境和全局变量，在指定的运行环境中会预设一些全局变量，比如:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslint.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;browser&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;指定上述的 env 配置后便会启用浏览器和 Node.js 环境，这两个环境中的一些全局变量 (如 window、global 等) 会同时启用。&lt;/p&gt;
&lt;p&gt;有些全局变量是业务代码引入的第三方库所声明，这里就需要在 globals 配置中声明全局变 量了。每个全局变量的配置值有 3 种情况:&lt;/p&gt;
&lt;p&gt;&amp;quot;writable&amp;quot; 或者 true，表示变量可重写；&lt;br /&gt;
&amp;quot;readonly&amp;quot; 或者 false，表示变量不可重写；&lt;br /&gt;
&amp;quot;off&amp;quot;，表示禁用该全局变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prettier&#34;&gt;#&lt;/a&gt; prettier&lt;/h1&gt;
&lt;h3 id=&#34;为啥需要-prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为啥需要-prettier&#34;&gt;#&lt;/a&gt; 为啥需要 prettier&lt;/h3&gt;
&lt;p&gt;因为我们写的代码有时候需要可以的控制格式 比如：换行 缩进之类的 当代码量多起来 这就显得非常麻烦 所以我们需要一个工具 来自动帮我们格式化代码（让代码格式变正确）&lt;/p&gt;
&lt;h3 id=&#34;怎么在项目中集成-prettier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么在项目中集成-prettier&#34;&gt;#&lt;/a&gt; 怎么在项目中集成 prettier&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载 prettier 命令：  &lt;code&gt;pnpm install prettier&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和 eslint 适配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载 eslint-config-prettier (用于用 prettier 的规则来覆盖部分 eslint 的规则) eslint-plugin-prettier（用来让 prettier 来接管 eslint 修复代码的功能）&lt;/li&gt;
&lt;li&gt;在.eslintrc.cjs 文件里面的 &lt;code&gt;extend&lt;/code&gt;  属性里面添加 &lt;code&gt;&amp;quot;prettier&amp;quot;&lt;/code&gt;  来解决 eslint 和 prettier 的冲突，让 prerrier 适配 eslint&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .eslintrc.cjs&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;prettier&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加.prettierrc 文件来配置 prettier 相关规则&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// .prettierrc.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;printWidth&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 一行的字符数，如果超过会进行换行，默认为 80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;tabWidth&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 一个 tab 代表几个空格数，默认为 2 个&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;useTabs&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 是否使用 tab 进行缩进，默认为 false，表示用空格进行缩减&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;singleQuote&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 字符串是否使用单引号，默认为 false，使用双引号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;semi&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 行尾是否使用分号，默认为 true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;trailingComma&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 是否使用尾逗号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;bracketSpacing&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 对象大括号直接是否有空格，默认为 true，效果：&amp;#123;a: 1&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vscode 下载 prettier 插件&lt;br /&gt;
 vscode 下载了 prettier 插件后 在 vscode 的设置里面将 Format on Save 开启。这样当你 ctrl + s 保存的时候代码就会自动被 prettier 格式化&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/19/Vj92oU.png&#34; alt=&#34;Vj92oU.png&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/firstInternship/</guid>
            <title>埋种一年半，终破土而出</title>
            <link>https://zimu-66ccff.github.io/firstInternship/</link>
            <category term="随笔" scheme="https://zimu-66ccff.github.io/categories/life/" />
            <category term="自我" scheme="https://zimu-66ccff.github.io/tags/%E8%87%AA%E6%88%91/" />
            <pubDate>Fri, 09 Jun 2023 18:37:32 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;故事开始埋下种子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故事开始埋下种子&#34;&gt;#&lt;/a&gt; 故事开始，埋下种子&lt;/h1&gt;
&lt;p&gt;我想，如果我没有记错的话，我应该是 2022 年的 2 月份埋下了这颗种子，在一个敲可爱的学长（ &lt;code&gt;舒总&lt;/code&gt; ，敲击强的字节跳动大佬）的带动下开始邂逅前端开发，那时不知道前方是什么，只是觉得很新鲜，很酷，并未想到它会给我带来这么多美好的东西（与很多有趣，努力，温柔的人相遇；为我带来未来就业的极大便利）&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pvEF.jpeg&#34; alt=&#34;V2pvEF.jpeg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;加入瑞翼工坊学校的一个工作室&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加入瑞翼工坊学校的一个工作室&#34;&gt;#&lt;/a&gt; 加入瑞翼工坊（学校的一个工作室）&lt;/h1&gt;
&lt;p&gt;后来，加入了学校的工作室，目的其实也很简单，只是想遇见一些同行的人，有一个学习技术，追求技术的空间；实际上，我后来的时间也基本上全是在这里。早上睡醒了就去，晚上夜深而归，会有很多一同学习技术的人在这里学习到很晚，真的是一个很好的环境和氛围。&lt;br /&gt;
认识了很多有趣的人， &lt;code&gt;舒总&lt;/code&gt; ， &lt;code&gt;小双哥&lt;/code&gt; ， &lt;code&gt;陈老师&lt;/code&gt; ， &lt;code&gt;林学长&lt;/code&gt; ， &lt;code&gt;匡学姐&lt;/code&gt; ， &lt;code&gt;李佬&lt;/code&gt; ， &lt;code&gt;王佬&lt;/code&gt; ， &lt;code&gt;叶桑&lt;/code&gt; ， &lt;code&gt;博神&lt;/code&gt; 等...，&lt;strong&gt;人与人的相遇总是美好的&lt;/strong&gt;。&lt;br /&gt;
也遇到了很多大一的后辈们，都很努力，很认真， &lt;code&gt;梦玉&lt;/code&gt; ， &lt;code&gt;于瑛&lt;/code&gt; ， &lt;code&gt;杨冉&lt;/code&gt; ， &lt;code&gt;蔡典&lt;/code&gt; ， &lt;code&gt;孙子龙&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pSu8.jpeg&#34; alt=&#34;V2pSu8.jpeg&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2psHZ.jpeg&#34; alt=&#34;V2psHZ.jpeg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;新年小愿望的许下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新年小愿望的许下&#34;&gt;#&lt;/a&gt; 新年小愿望的许下&lt;/h1&gt;
&lt;p&gt;在 2023 年来临的时候，许下了一些小愿望，希望可以找到实习，可以和更多温柔的人相遇，身边的两三个很重要的人依旧在我身边&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2p5d5.jpeg&#34; alt=&#34;V2p5d5.jpeg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;找实习的痛苦温柔的人的帮助和鼓励第一段实习真的太难找了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找实习的痛苦温柔的人的帮助和鼓励第一段实习真的太难找了&#34;&gt;#&lt;/a&gt; 找实习的痛苦，温柔的人的帮助和鼓励（第一段实习真的太难找了）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;寒气逼人&lt;br /&gt;
现在行情确实很不好，真的是寒气逼人，找第一段实习真的是很困难，学校是双非，学历并没有有事，第一次找实习，当然也没有实习经历，真的就是全考运气。记得在 boss 直聘上面沟通了八九十次，简历却只投出去了了了几份，甚至没人约面。那段时间真的是很绝望，对自己的打击也确实很大，那时经常会到实训大楼的顶层吹风，以图忘记一切烦恼。&lt;/li&gt;
&lt;li&gt;帮助与鼓励&lt;br /&gt;
好在遇到了很多温柔的人， &lt;code&gt;咖啡哥&lt;/code&gt; 耐心的给我做模拟面试，给我鼓劲，让我再耐心的沉淀沉淀。 &lt;code&gt;嘉晨&lt;/code&gt; ， &lt;code&gt;沈七哥&lt;/code&gt; ，我们互相鼓励，一同前行，最终结果也都很好。我在 &lt;code&gt;小双哥&lt;/code&gt; 的内推下，顺利进入&lt;em&gt;合合信息&lt;/em&gt;；嘉晨则是进入&lt;em&gt;绿盟&lt;/em&gt;；沈七哥也顺利进入&lt;em&gt;第四范式&lt;/em&gt;，&lt;strong&gt;一个人只能走很短的路，而一群人可以走的很远&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://imgloc.com/i/V2phNy&#34;&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2phNy.jpeg&#34; alt=&#34;V2phNy.jpeg&#34; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;终破土而出顺利开启实习生活&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终破土而出顺利开启实习生活&#34;&gt;#&lt;/a&gt; 终破土而出（顺利开启实习生活）&lt;/h1&gt;
&lt;p&gt;后来终于拿到了合合信息的前端实习生岗位的 offer，在这里体验到了真正的企业开发，事情不是很多，但是上线那会真的把我忙炸了，需求疯狂调整，一天发布好几次。不过整体真的是个很好的经历&lt;br /&gt;
也遇见了很多有趣的人，部门 boss &lt;code&gt;徐杰哥&lt;/code&gt; （请我们部门全员吃了贼好吃的冰激凌，笑死了，进来一个月我不认识部门 boss） leader &lt;code&gt;佳骏哥&lt;/code&gt; （人超级好，全能，超级厉害，啥都会），mentor  &lt;code&gt;seven哥&lt;/code&gt; （前端架构师，超级厉害）带教 mentor &lt;code&gt;慧东哥&lt;/code&gt; （超级温柔，耐心，经常请我们喝咖啡），组长 &lt;code&gt;付同哥&lt;/code&gt; （后端架构师，经常和我们开玩笑，聊天），后端老哥  &lt;code&gt;建辉哥&lt;/code&gt; （很耐心，对我们很宽容）， 后端老哥  &lt;code&gt;永辉哥&lt;/code&gt; （凶凶的，又很搞笑），产品经理  &lt;code&gt;崔老师&lt;/code&gt; （人很好，会让我们慢慢做需求，虽然上线那几天需求变动频繁给我搞麻了）等...&lt;br /&gt;
 当然还有另外一个实习生姐姐， &lt;code&gt;兰英姐&lt;/code&gt; （嘤嘤嘤），部门就我们两个前端实习生，算是相依为命了，也确实是相依为命。姐姐超级可爱，温柔，好看，很大程度上提升了我的实习体验，我们一起摸鱼，一起干饭，一起吐槽。真的是个很温柔的姐姐，能遇到这样温柔的人，真的是很开心的一件事情。（附上一张姐姐的美照，已取的当事人同意）&lt;br /&gt;
&lt;a href=&#34;https://imgloc.com/i/V2pd43&#34;&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pd43.png&#34; alt=&#34;V2pd43.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://imgloc.com/i/V2pXqa&#34;&gt;&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2pXqa.jpeg&#34; alt=&#34;V2pXqa.jpeg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;和很多美好的人相遇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和很多美好的人相遇&#34;&gt;#&lt;/a&gt; 和很多美好的人相遇&lt;/h1&gt;
&lt;p&gt;一路上真的遇见了很多美好的人，也到到了很多他们的帮助， &lt;code&gt;🐏哥&lt;/code&gt; ， &lt;code&gt;舒佬&lt;/code&gt; ， &lt;code&gt;咖啡哥&lt;/code&gt; ，  &lt;code&gt;兰英姐&lt;/code&gt; ， &lt;code&gt;嘉晨&lt;/code&gt; ，  &lt;code&gt;沈七哥&lt;/code&gt; ，  &lt;code&gt;阳树哥&lt;/code&gt; ，  &lt;code&gt;研二哥&lt;/code&gt; ， &lt;code&gt;大专哥&lt;/code&gt; ， &lt;code&gt;小双哥&lt;/code&gt; ，  &lt;code&gt;陈老师&lt;/code&gt; ，  &lt;code&gt;林学长&lt;/code&gt; ， &lt;code&gt;匡姐&lt;/code&gt; ， &lt;code&gt;李佬&lt;/code&gt; &lt;br /&gt;
（附上第一次上海会师，🐏 哥超级帅）&lt;br /&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/09/V2ppIz.jpeg&#34; alt=&#34;V2ppIz.jpeg&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/frontEndModularity/</guid>
            <title>前端模块化分析与对比</title>
            <link>https://zimu-66ccff.github.io/frontEndModularity/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/categories/note/front-end/engineering/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="前端工程化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
            <category term="前端模块化" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/" />
            <pubDate>Tue, 18 Apr 2023 13:50:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;commonjs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commonjs&#34;&gt;#&lt;/a&gt; CommonJS&lt;/h1&gt;
&lt;h2 id=&#34;核心函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心函数&#34;&gt;#&lt;/a&gt; 核心函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;exports&lt;br /&gt;
 &lt;code&gt;exports&lt;/code&gt;  是一个 object，可以在它身上添加需要导出的属性，是默认的根本导出的对象&lt;/li&gt;
&lt;li&gt;module.exports&lt;br /&gt;
 &lt;code&gt;module.exports&lt;/code&gt;  是被模块直接导出的对象，它实际上默认是 &lt;code&gt;exports&lt;/code&gt;  的引用&lt;/li&gt;
&lt;li&gt;require&lt;br /&gt;
 &lt;code&gt;require&lt;/code&gt;  实际上是会执行要导出的模块里的 code，然后导入被导入模块的 &lt;code&gt;module.exports&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加载模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载模式&#34;&gt;#&lt;/a&gt; 加载模式&lt;/h2&gt;
&lt;p&gt;commonJS 的加载模式是&lt;strong&gt;运行时&lt;/strong&gt;的，&lt;strong&gt;同步&lt;/strong&gt;的，它是当代码运行到 &lt;code&gt;require&lt;/code&gt;  函数的这一行时，才会开始加载模块，并且执行模块里面的代码，模块里的代码执行完毕才会执行下一行。&lt;/p&gt;
&lt;h2 id=&#34;加载模式带来的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载模式带来的特点&#34;&gt;#&lt;/a&gt; 加载模式带来的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于这个运行时的机制，require 才可以在&lt;strong&gt;任何地方&lt;/strong&gt;使用，并且在路径里面可以&lt;strong&gt;使用变量&lt;/strong&gt;，因为此时变量已经有了值&lt;/li&gt;
&lt;li&gt;基于这个同步的机制，当 require 的模块还在加载中时，导入的变量的值会是 &lt;code&gt;undefined&lt;/code&gt;  (常见于循环引用中，比如 b 依赖于 a， 而 a 又没执行完毕， 那么 &lt;code&gt;require A&lt;/code&gt;  的值则会是 &lt;code&gt;undefined&lt;/code&gt; )&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;commonjs对循环依赖的处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commonjs对循环依赖的处理&#34;&gt;#&lt;/a&gt; CommonJS 对循环依赖的处理&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// index.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./counter.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;exports&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello world!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// counter.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./index.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;exports&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打印的结果为： 5 undefined&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先加载 &lt;code&gt;index.js&lt;/code&gt; ，执行到第一行的时候遇到 require，开始加载 &lt;code&gt;counter.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counter.js&lt;/code&gt;  的第一行被执行，又遇到 require，需要去加载 &lt;code&gt;index.js&lt;/code&gt; ，但此时 &lt;code&gt;index.js&lt;/code&gt;  还没有加载完毕， 所以此时 message 的值为 undefined&lt;/li&gt;
&lt;li&gt;count 变量被导出&lt;/li&gt;
&lt;li&gt;注册定时器宏任务，打印 message（值为 undefined）&lt;/li&gt;
&lt;li&gt;回到 &lt;code&gt;index.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打印 count（值为 5）&lt;/li&gt;
&lt;li&gt;导出 message（值为 ‘hello world’）， 然而已经没用了，因为 &lt;code&gt;counter.js&lt;/code&gt;  里面的 message 的值已经被解析为了 undefined&lt;/li&gt;
&lt;li&gt;执行定时器宏任务，打印 message（值为 undefined）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;esmodule&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esmodule&#34;&gt;#&lt;/a&gt; ESModule&lt;/h1&gt;
&lt;h2 id=&#34;加载模式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载模式-2&#34;&gt;#&lt;/a&gt; 加载模式&lt;/h2&gt;
&lt;p&gt;ESModule 的加载模式是分为构建阶段，实例化阶段，执行阶段的， 并且所有模块都是&lt;strong&gt;异步递归加载解析的&lt;/strong&gt;。而对依赖关系的处理是在构建阶段，也就是&lt;strong&gt;解析时&lt;/strong&gt;进行&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;构建阶段&lt;/strong&gt;&lt;br /&gt;
主要是浏览器尝试下载所有需要的模块文件，并形成模块记录的过程&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;浏览器开始解析入口模块文件（是解析，不是执行，只是为了确定依赖），确定入口文件的依赖模块，从而发送请求，下载相关依赖模块。等到依赖模块文件返回后，浏览器继续解析这些依赖模块文件，从而确定依赖文件的依赖，然后发请求下载，并解析，如此循环递归，直到所有依赖文件全部被下载。&lt;/li&gt;
&lt;li&gt;每个模块加载完毕后，都会创建相应的&lt;strong&gt;模块记录&lt;/strong&gt;，同时浏览器还会维护一张&lt;strong&gt;模块映射表&lt;/strong&gt;，它保存了&lt;strong&gt;模块路径 -- 模块记录&lt;/strong&gt;的映射关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;实例化阶段&lt;/strong&gt;&lt;br /&gt;
主要是将模块里面的&lt;strong&gt; export 和 import&lt;/strong&gt; 和&lt;strong&gt;内存&lt;/strong&gt;建立起关系， 也就是为&lt;strong&gt; export&lt;/strong&gt; 开辟内存空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;实现 JS 引擎慧创建一个模块环境记录，用来管理模块中导入和导出的变量&lt;/li&gt;
&lt;li&gt;首先处理&lt;strong&gt; export&lt;/strong&gt;, 为每一个&lt;strong&gt; export&lt;/strong&gt; 在内存中开辟一个对应的空间，但是这个时候内存空间里面没有值，赋值操作是在执行阶段发生的。&lt;/li&gt;
&lt;li&gt;JS 引擎处理完模块所有的导出之后，才会开始处理模块的导入，对同一个模块的导入和导出指&lt;strong&gt;向的是内存中的同一片内存空间&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;执行阶段&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;开始执行 js 代码，进行赋值操作，将变量的值填充到对应的内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加载模式带来的特点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载模式带来的特点-2&#34;&gt;#&lt;/a&gt; 加载模式带来的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ESModule 对模块的下载和解析是发生在构建阶段的时候的，这个时候 js 代码还没执行，变量还没值（js 引擎连内存空间都还没给它开辟），所以&lt;strong&gt; import 语句不能携带变量&lt;/strong&gt;，&lt;strong&gt;不能直接在代码块中嵌入&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;esmodule-对循环依赖的处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#esmodule-对循环依赖的处理&#34;&gt;#&lt;/a&gt; ESModule 对循环依赖的处理&lt;/h1&gt;
&lt;p&gt;下面让我们来看一个循环依赖的例子，并分析和处理。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// index.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; count &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./counter.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;666&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; message &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// counter.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; message &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./index.js&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; count &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打印的结果为：5 666&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建阶段
&lt;ul&gt;
&lt;li&gt;浏览器下载 &lt;code&gt;index.js&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;下载完毕后，开始解析 &lt;code&gt;index.js&lt;/code&gt;  文件，发现 &lt;code&gt;index.js&lt;/code&gt;  依赖 &lt;code&gt;counter.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载 &lt;code&gt;counter.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载完毕后，解析 &lt;code&gt;counter.js&lt;/code&gt;  文件，发现没有依赖&lt;/li&gt;
&lt;li&gt;构建阶段完毕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实例化阶段
&lt;ul&gt;
&lt;li&gt;为 &lt;code&gt;index.js&lt;/code&gt;  和 &lt;code&gt;counter.js&lt;/code&gt;  的 &lt;code&gt;export&lt;/code&gt;  在内存中开辟一段内存空间&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;import&lt;/code&gt;  指向其对应的模块的 &lt;code&gt;export&lt;/code&gt;  的内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行阶段
&lt;ul&gt;
&lt;li&gt;执行 &lt;code&gt;index.js&lt;/code&gt;  中的代码，将局部变量 message 赋值为 666（此时 message 还没有被写入到 export 的那片内存）&lt;/li&gt;
&lt;li&gt;打印导入的 count，但是此时 import 指向的那片内存，count 还没有被填充，所以开始执行 &lt;code&gt;counter.js&lt;/code&gt;  的代码。&lt;/li&gt;
&lt;li&gt;将局部变量 count 赋值为 5（此时 count 还没有被写入到 export 的那片内存）&lt;/li&gt;
&lt;li&gt;将定时器宏任务加入消息队列&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;export&lt;/code&gt;  来将 count 填充到内存空间&lt;/li&gt;
&lt;li&gt;继续执行 &lt;code&gt;index.js&lt;/code&gt; ，此时 import 指向的内存空间（就是 counter.js 的 export 的内存空间）count 已经被填充，顺利打印出 5.&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;export&lt;/code&gt;  来将 message 填充到内存空间&lt;/li&gt;
&lt;li&gt;执行计时器宏任务中的 callback，此时 &lt;code&gt;counter.js&lt;/code&gt;  的 &lt;code&gt;import&lt;/code&gt;  指向的内存空间（就是 index.js 的 export 的内存空间）message 已经被填充，顺利答应出 666&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/reactHooks/</guid>
            <title>ReactHooks的原理解析</title>
            <link>https://zimu-66ccff.github.io/reactHooks/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="React" scheme="https://zimu-66ccff.github.io/categories/note/front-end/react/" />
            <category term="React学习" scheme="https://zimu-66ccff.github.io/categories/note/front-end/react/reactLearn/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="React" scheme="https://zimu-66ccff.github.io/tags/React/" />
            <category term="ReactHooks" scheme="https://zimu-66ccff.github.io/tags/ReactHooks/" />
            <pubDate>Sat, 04 Mar 2023 12:25:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;hooks-使用规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hooks-使用规则&#34;&gt;#&lt;/a&gt; hooks 使用规则&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;hooks 只能在函数组件 or 自定义 hook 的顶部使用&lt;/li&gt;
&lt;li&gt;不能在条件，循环，嵌套函数中使用 hooks&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;为什么会有这样的规则hooks-究竟是怎么保存我们函数组件的状态的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么会有这样的规则hooks-究竟是怎么保存我们函数组件的状态的&#34;&gt;#&lt;/a&gt; 为什么会有这样的规则，hooks 究竟是怎么保存我们函数组件的状态的？&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Not Magic, Just Arrays&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本原理&#34;&gt;#&lt;/a&gt; 基本原理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;函数组件初次执行阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;React 会维护一个数组 &lt;code&gt;componentHooks&lt;/code&gt; ，和一个索引 &lt;code&gt;componentHookIndex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数组件中的 &lt;code&gt;useState&lt;/code&gt;  被调用时，初始值和修改初始值的方法被存进 &lt;code&gt;pair&lt;/code&gt;  数组，然后再将 &lt;code&gt;pair&lt;/code&gt;  数组通过索引 &lt;code&gt;componentHookIndex&lt;/code&gt;  存进 &lt;code&gt;componentHooks&lt;/code&gt;  数组，然后 &lt;code&gt;componentHookIndex++&lt;/code&gt;  指向下一个空位。&lt;/li&gt;
&lt;li&gt;随着 &lt;code&gt;useState&lt;/code&gt;  的顺序调用，一个个保存着初始值和修改初始值方法的 &lt;code&gt;pair&lt;/code&gt;  被存进 &lt;code&gt;componentHookIndex&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;函数组件的更新阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;随着修改初始值的方法被调用，函数组件会被重新执行，并且 &lt;code&gt;componentHookIndex&lt;/code&gt;  会被重置为 &lt;code&gt;0&lt;/code&gt; , 然后因为我们是按照规则使用的 hooks，所以 hooks 的调用是按照固定的顺序的（&lt;strong&gt;这个固定的顺序，就是为什么要遵守 hooks 的使用规则&lt;/strong&gt;）， &lt;code&gt;useState&lt;/code&gt;  就可以通过 &lt;code&gt;componentHooks&lt;/code&gt;  和 &lt;code&gt;componentsHooksIndex&lt;/code&gt;  把我们保存的 &lt;code&gt;pair&lt;/code&gt;  返回给我们，然后 &lt;code&gt;componentHookIndex++&lt;/code&gt;  指向下一个保存的 &lt;code&gt;pair&lt;/code&gt; 。以此来完成之前保存的状态和修改状态的方法的返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;代码实现此代码实现来自官方文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现此代码实现来自官方文档&#34;&gt;#&lt;/a&gt; 代码实现（此代码实现来自官方文档）&lt;/h1&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; componentHooks &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; currentHookIndex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// How useState works inside React (simplified).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;initialState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; pair &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; componentHooks&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;currentHookIndex&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pair&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// This is not the first render,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// so the state pair already exists.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// Return it and prepare for next Hook call.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    currentHookIndex&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; pair&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// This is the first time we&#39;re rendering,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// so create a state pair and store it.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  pair &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;initialState&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; setState&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;nextState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// When the user requests a state change,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// put the new value into the pair.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    pair&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nextState&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;updateDOM&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// Store the pair for future renders&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// and prepare for the next Hook call.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  componentHooks&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;currentHookIndex&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pair&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  currentHookIndex&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; pair&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Gallery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// Each useState() call will get the next pair.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; setIndex&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;showMore&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; setShowMore&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;handleNextClick&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;setIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;handleMoreClick&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;setShowMore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;showMore&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; sculpture &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sculptureList&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// This example doesn&#39;t use React, so&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// return an output object instead of JSX.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;onNextClick&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; handleNextClick&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;onMoreClick&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; handleMoreClick&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;sculpture&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt; by &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;sculpture&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;artist&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;index &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt; of &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;sculptureList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;more&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;showMore &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Hide&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt; details&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; showMore &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; sculpture&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;description &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;imageSrc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; sculpture&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;imageAlt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; sculpture&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;alt&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;updateDOM&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// Reset the current Hook index&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// before rendering the component.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  currentHookIndex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; output &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Gallery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// Update the DOM to match the output.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// This is the part React does for you.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  nextButton&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;onclick &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;onNextClick&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  header&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;textContent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;header&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  moreButton&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;onclick &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;onMoreClick&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  moreButton&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;textContent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;more&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  image&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;imageSrc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  image&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;alt &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;imageAlt&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;description &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    description&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;textContent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;description&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    description&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;display &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    description&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;display &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; nextButton &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;nextButton&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; header &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;header&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; moreButton &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;moreButton&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; description &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;description&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; image &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;image&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; sculptureList &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Homenaje a la Neurocirugía&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Marta Colvin Andrade&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/Mx7dA2Y.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A bronze statue of two crossed hands delicately holding a human brain in their fingertips.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Floralis Genérica&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Eduardo Catalano&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/ZF6s192m.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Eternal Presence&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;John Woodrow Wilson&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as &#34;a symbolic Black presence infused with a sense of universal humanity.&#34;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/aTtVpES.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Moai&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Unknown Artist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/RCwLEoQm.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Three monumental stone busts with the heads that are disproportionately large with somber faces.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Blue Nana&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Niki de Saint Phalle&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/Sd1AgUOm.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Ultimate Form&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Barbara Hepworth&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/2heNQDcm.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A tall sculpture made of three elements stacked on each other reminding of a human figure.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Cavaliere&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Lamidi Olonade Fakeye&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#34;Descended from four generations of woodcarvers, Fakeye&#39;s work blended traditional and contemporary Yoruba themes.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/wIdGuZwm.png&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Big Bellies&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Alina Szapocznikow&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;149&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;150&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/AlHTAdDm.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;151&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;152&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;153&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;154&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Terracotta Army&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;155&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Unknown Artist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;156&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;157&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;158&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/HMFmH6m.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;159&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;160&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;161&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;162&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Lunar Landscape&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;163&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Louise Nevelson&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;164&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;165&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;166&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/rN7hY6om.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;167&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A black matte sculpture where the individual elements are initially indistinguishable.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;168&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;169&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;170&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Aureole&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;171&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Ranjani Shettar&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;172&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;173&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a &#34;fine synthesis of unlikely materials.&#34;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;174&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/okTpbHhm.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;175&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;176&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;177&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;178&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Hippos&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;179&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Taipei Zoo&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;180&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;181&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token string&#34;&gt;&#39;The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;182&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://i.imgur.com/6o5Vuyu.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;183&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;184&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;185&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;186&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;187&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// Make UI match the initial state.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;188&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;updateDOM&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;官方文档关于这部分的讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官方文档关于这部分的讲解&#34;&gt;#&lt;/a&gt; 官方文档关于这部分的讲解&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.328888.xyz/2023/03/04/G4KFq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iZXRhLnJlYWN0anMub3JnL2xlYXJuL3N0YXRlLWEtY29tcG9uZW50cy1tZW1vcnkjZ2l2aW5nLWEtY29tcG9uZW50LW11bHRpcGxlLXN0YXRlLXZhcmlhYmxlcw==&#34;&gt;官方文档这部分解释的链接&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/differenceWithVue/</guid>
            <title>React 和 Vue的区别</title>
            <link>https://zimu-66ccff.github.io/differenceWithVue/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="React" scheme="https://zimu-66ccff.github.io/categories/note/front-end/react/" />
            <category term="React学习" scheme="https://zimu-66ccff.github.io/categories/note/front-end/react/reactLearn/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="React" scheme="https://zimu-66ccff.github.io/tags/React/" />
            <category term="React和Vue的区别" scheme="https://zimu-66ccff.github.io/tags/React%E5%92%8CVue%E7%9A%84%E5%8C%BA%E5%88%AB/" />
            <pubDate>Sat, 25 Feb 2023 16:52:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;对数据管理和页面渲染的解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对数据管理和页面渲染的解析&#34;&gt;#&lt;/a&gt; 对数据管理和页面渲染的解析&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue
&lt;ul&gt;
&lt;li&gt;用户只需要去关心数据，而完全不需要关心界面是怎么渲染怎么更新的，响应式数据一改变，vue 内部就会做数据劫持，触发收集的依赖，从而调用 render 函数完成视图的更新，这都是 vue 帮我们做好的，我们只需要关心数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React
&lt;ul&gt;
&lt;li&gt;React 是没有数据劫持的，我们想要界面随着数据更新而更新就必须调用 &lt;code&gt;setState&lt;/code&gt; , 而调用 &lt;code&gt;setState&lt;/code&gt;  实际上不仅改了数据，内部还相当于调用了 &lt;code&gt;render&lt;/code&gt;  函数来对页面进行更新，也就是说用户不仅仅需要去关心数据的改变，还需要手动的去触发页面的渲染更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;dom-的渲染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom-的渲染&#34;&gt;#&lt;/a&gt; DOM 的渲染&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;template -&amp;gt; 编译器 -&amp;gt; h 函数 -&amp;gt; 虚拟 DOM -&amp;gt; render 函数 -&amp;gt; 真实 DOM&lt;/li&gt;
&lt;li&gt;组件的 render 函数里面的 h 函数 -&amp;gt; 虚拟 DOM -&amp;gt; render 函数 -&amp;gt; 真实 DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;React&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSX -&amp;gt; React.createElement () -&amp;gt; 虚拟 DOM -&amp;gt; ReactDom.render () -&amp;gt; 真实 DOM&lt;/li&gt;
&lt;li&gt;React.createElement () -&amp;gt; 虚拟 DOM -&amp;gt; ReactDom.render () -&amp;gt; 真实 DOM&lt;br /&gt;
ps: babel 会自动将 JSX 代码交给 React.createElement 来处理以生成虚拟 DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;组件的创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件的创建&#34;&gt;#&lt;/a&gt; 组件的创建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
SFC 单文件组件，即.vue 文件&lt;/li&gt;
&lt;li&gt;React
&lt;ol&gt;
&lt;li&gt;函数组件，类组件，本质都是返回一个 JSX.&lt;/li&gt;
&lt;li&gt;类组件有自己的状态 &lt;code&gt;state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数组件需要借助 hooks 来拥有自己的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;书写-html-的形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#书写-html-的形式&#34;&gt;#&lt;/a&gt; 书写 html 的形式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vue&lt;br /&gt;
&lt;strong&gt; 模板语法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;&amp;#123;&amp;#123;&amp;#125;&amp;#125;&lt;/code&gt;  里面书写 js 表达式，存在模板语法，v-bind，v-model，v-on 等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;React&lt;br /&gt;
&lt;strong&gt;JSX&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只能有一个根节点&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  里面写 JS 表达式，但是写子文本节点的时候有以下规则&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Number，String， Array 类型可以直接显示为子文本节点，Array 类型会转成字符串展示为文本节点&lt;/li&gt;
&lt;li&gt;null， undefined，Boolean 会显示为空文本节点&lt;/li&gt;
&lt;li&gt;object 类型不能作为子文本节点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;注释要以 &lt;code&gt;&amp;#123;/* */&amp;#125;&lt;/code&gt;  的形式书写&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;让组件接收-dom-并展示在组件里的指定位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#让组件接收-dom-并展示在组件里的指定位置&#34;&gt;#&lt;/a&gt; 让组件接收 DOM 并展示在组件里的指定位置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
 &lt;code&gt;slot&lt;/code&gt;  插槽来实现
&lt;ul&gt;
&lt;li&gt;作用域插槽，让插槽的内容能够访问到子组件的状态&lt;br /&gt;
在子组件的 &lt;code&gt;&amp;lt;slot/&amp;gt;&lt;/code&gt;  上通过属性来定义传递给父组件的信息，父组件在插槽里通过 &lt;code&gt;v-slot=xxx&lt;/code&gt;  来获取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;prop.children&lt;/code&gt;  属性来实现，在组件里面写的内容会被添加到 &lt;code&gt;prop.children&lt;/code&gt; ，当子节点个数为一个的时候， &lt;code&gt;children&lt;/code&gt;  就为这个子节点，当子节点为多个的时候， &lt;code&gt;children&lt;/code&gt;  为一个数组&lt;/li&gt;
&lt;li&gt;通过给 &lt;code&gt;prop&lt;/code&gt;  传递 JSX 来实现（更推荐这种）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;类似作用域插槽的实现&lt;br /&gt;
父组件传递给子组件一个属性，属性值为一个函数，返回一个 JSX，JSX 也就是要让子组件展示的内容；然后子组件调用这个函数，通过传参数来给父组件传递信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期&#34;&gt;#&lt;/a&gt; 生命周期&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/27/e2qPy.png&#34; alt=&#34;Vue生命周期&#34; /&gt;&lt;/li&gt;
&lt;li&gt;React&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/27/eH4IH.png&#34; alt=&#34;React生命周期&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;父子组件通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#父子组件通信&#34;&gt;#&lt;/a&gt; 父子组件通信&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue
&lt;ul&gt;
&lt;li&gt;父传子时子组件对传递过来的属性做验证，设置默认值&lt;br /&gt;
通过 &lt;code&gt;defineProps&lt;/code&gt;  给其传递一个校验对象，在校验对象里面设置默认值&lt;/li&gt;
&lt;li&gt;子组件向父组件传递事件&lt;br /&gt;
通过 &lt;code&gt;defineEmit&lt;/code&gt;  定义事件，父组件监听这个事件，然后子组件通过 &lt;code&gt;emit&lt;/code&gt;  发送事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React
&lt;ul&gt;
&lt;li&gt;父传子时子组件对传递过来的属性做验证&lt;br /&gt;
通过从 &lt;code&gt;prop-types&lt;/code&gt;  包中导入 &lt;code&gt;PropTypes&lt;/code&gt;  进行校验，通过给组件添加 &lt;code&gt;deafultProps&lt;/code&gt;  属性来添加默认值&lt;/li&gt;
&lt;li&gt;子组件向父组件传递事件&lt;br /&gt;
父组件给子组件传递一个函数作为 &lt;code&gt;prop&lt;/code&gt; , 子组件调用父组件传过来的属性里面存储的函数，来修改父组件的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;爷孙组件通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爷孙组件通信&#34;&gt;#&lt;/a&gt; 爷孙组件通信&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
provide, inject&lt;/li&gt;
&lt;li&gt;React
&lt;ul&gt;
&lt;li&gt;Context（超级麻烦，一般不用）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;React.createContext()&lt;/code&gt;  返回一个上下文组件比如 &lt;code&gt;MyContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在爷爷组件里面用 &lt;code&gt;&amp;lt;MyContext.Provider&amp;gt;&amp;lt;/MyContext.Provider&amp;gt;&lt;/code&gt; , 通过 value 属性来传递要传递给孙子的值， 上下文组件里面嵌套要传递给哪个孙子组件的后代。&lt;/li&gt;
&lt;li&gt;在孙子组件里面，如果是类组件比如 &lt;code&gt;sunZi&lt;/code&gt; ，就通过 &lt;code&gt;sunZi.contextType = MyContext&lt;/code&gt;  来指定自己接收哪个 context，然后通过 &lt;code&gt;this.context&lt;/code&gt;  来使用。如果是函数组件，则通过 &lt;code&gt;&amp;lt;MyContext.consumer&amp;gt;(value) =&amp;gt; &amp;#123;&amp;#125;&amp;lt;/MyContext.consumer&amp;gt;&lt;/code&gt;  来使用，参数 value 就是传递过来的数据&lt;br /&gt;
&lt;strong&gt;这。。。。。。谁发明的反人类的玩意，其他具体的使用去看文档吧，实在不想写了&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;界面的更新为异步操作在修改状态后使用新的状态的解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#界面的更新为异步操作在修改状态后使用新的状态的解决方案&#34;&gt;#&lt;/a&gt; 界面的更新为异步操作，在修改状态后，使用新的状态的解决方案&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
nextick 里面传一个回调函数，这个回调函数会在页面更新后调用&lt;/li&gt;
&lt;li&gt;React&lt;br /&gt;
setState 中给第二个参数传一个回调函数，这个回调函数会在页面更新完毕后调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;界面的更新为异步操作的原因：&lt;br /&gt;
Vue 和 React 都是一样的，都是避免状态的多次改变导致多次调用 render 函数，影响性能，都想在同步代码（包含对状态的修改）执行完毕后，再一次性的调用 render 函数，对界面进行更新，提高性能。&lt;/li&gt;
&lt;li&gt;二者的不同：&lt;br /&gt;
Vue 对响应式数据的更新是同步的，所以它会把触发的多次副作用（对界面的更新）放进一个 &lt;code&gt;Set&lt;/code&gt; ，利用自动去重的机制，相同的渲染操作只执行一次。&lt;br /&gt;
React 对状态的更改也是异步的，所以它会把多次状态的更改放进一个队列，然后合并每次对状态的修改，然后拿这个最终的状态去更改状态，并调用 render 函数进行渲染，从而做到只执行一次渲染。&lt;/li&gt;
&lt;li&gt;React18 之前的版本和 React18 版本中对于 setState 特殊情况的处理&lt;br /&gt;
 React18 之前的版本：在事件里面，setTimeout，Promise 等这些的 &lt;code&gt;callback&lt;/code&gt;  中 &lt;code&gt;setState&lt;/code&gt;  是同步的&lt;br /&gt;
 React18 中：上面这些特殊情况里面 &lt;code&gt;setState&lt;/code&gt;  也已经是异步的了，原因同上，如果这些特殊情况还是想让 &lt;code&gt;setState&lt;/code&gt;  为同步的话，需要从 &lt;code&gt;react-dom&lt;/code&gt;  中引入一个 &lt;code&gt;flashSync&lt;/code&gt;  方法，在里面传递一个 &lt;code&gt;callback&lt;/code&gt; ，在 &lt;code&gt;callback&lt;/code&gt;  里面调用 &lt;code&gt;setState&lt;/code&gt;  则为同步&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;react-性能优化我认为是比-vue-强大的一点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react-性能优化我认为是比-vue-强大的一点&#34;&gt;#&lt;/a&gt; React 性能优化 (我认为是比 Vue 强大的一点)&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SCU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理:&lt;br /&gt;
 可以在 shouldComponentUpdate 这个生命周期钩子函数里面，从参数里拿到 &lt;code&gt;newState&lt;/code&gt; , &lt;code&gt;newProps&lt;/code&gt;  和当前的 &lt;code&gt;state&lt;/code&gt; , &lt;code&gt;props&lt;/code&gt;  作比较，当有 &lt;code&gt;key&lt;/code&gt;  对应的 &lt;code&gt;value&lt;/code&gt;  不一样的时候才返回 &lt;code&gt;true&lt;/code&gt;  才调用 render 函数返回 jsx，进行 diff，然后更新变化了的部分。（而 Vue 完全没有这个说法，只要父组件发生了更新，就会对子组件调用 render 函数生成虚拟 DOM，然后开始比较新旧 DOM, 这个过程是避免不了的，只不过 Vue 是在 render 函数内部对新旧 DOM 做了一个比较判断，但是虚拟 DOM 生成这一步的开销避免不了）&lt;/li&gt;
&lt;li&gt;自动化 SCU 解决方案&lt;br /&gt;
类组件：extends pureComponent&lt;br /&gt;
 函数组件：用 memo 方法把函数组件包裹起来 然后返回一个新的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;对表单元素的处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对表单元素的处理&#34;&gt;#&lt;/a&gt; 对表单元素的处理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
 利用 &lt;code&gt;v-model&lt;/code&gt;  语法糖来实现双向绑定&lt;/li&gt;
&lt;li&gt;React&lt;br /&gt;
React 没有双向绑定，需要给 JSX 表单元素的 &lt;code&gt;value&lt;/code&gt;  属性手动绑定一个变量，然后监听 change 事件，当 change 事件被触发的时候拿 &lt;code&gt;event.target.value&lt;/code&gt;  来通过 &lt;code&gt;setState&lt;/code&gt;  修改绑定的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;对-dom-和-component-的获取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对-dom-和-component-的获取&#34;&gt;#&lt;/a&gt; 对 DOM 和 Component 的获取&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
 通过给 DOM, Component 传递 &lt;code&gt;ref&lt;/code&gt;  属性，然后用一个 &lt;code&gt;ref&lt;/code&gt;  属性值同名的响应式变量来接收 DOM, Component。&lt;/li&gt;
&lt;li&gt;React
&lt;ol&gt;
&lt;li&gt;对于 DOM, 类组件，在 &lt;code&gt;state&lt;/code&gt;  里通过 &lt;code&gt;createRef&lt;/code&gt;  来创建一个存储 DOM, 类组件的变量，然后把这个变量赋值给 DOM, 类组件的 &lt;code&gt;ref&lt;/code&gt;  属性。这个变量保存的就是 DOM，变量的 &lt;code&gt;current&lt;/code&gt;  属性保存的就是 Component&lt;/li&gt;
&lt;li&gt;对于函数组件，通过 &lt;code&gt;forwardRef&lt;/code&gt;  高阶函数来对函数组件进行一个包裹，此时函数组件将会有两个参数， &lt;code&gt;props&lt;/code&gt; , &lt;code&gt;ref&lt;/code&gt; , 再把 &lt;code&gt;ref&lt;/code&gt;  这个参数用 ref 属性绑定到函数组件返回的 JSX 中的 DOM 上&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;css-的书写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-的书写&#34;&gt;#&lt;/a&gt; CSS 的书写&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
 直接在 SFC 里面的 &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;  标签里面写，通过 &lt;code&gt;lang&lt;/code&gt;  属性来设置自己想用的预处理器，非常方便&lt;/li&gt;
&lt;li&gt;React&lt;br /&gt;
 一般是使用 &lt;code&gt;css in js&lt;/code&gt;  方案，需要用到 &lt;code&gt;styled-components&lt;/code&gt;  库，然后默认导出一个 &lt;code&gt;styled&lt;/code&gt;  方法 下面是一个使用案列&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/03/01/6Vqnd.png&#34; alt=&#34;6Vqnd.png&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;动态添加类名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态添加类名&#34;&gt;#&lt;/a&gt; 动态添加类名&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vue&lt;br /&gt;
 利用 &lt;code&gt;v-bind&lt;/code&gt;  绑定 class&lt;/li&gt;
&lt;li&gt;React&lt;br /&gt;
 利用一个 &lt;code&gt;classnames&lt;/code&gt;  的库，然后默认导出一个 &lt;code&gt;classNames&lt;/code&gt;  方法，下面是一个使用案列&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/03/01/6flyy.png&#34; alt=&#34;6flyy.png&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/dynamicRouter/</guid>
            <title>基于菜单的动态路由</title>
            <link>https://zimu-66ccff.github.io/dynamicRouter/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="项目" scheme="https://zimu-66ccff.github.io/categories/note/project/" />
            <category term="项目" scheme="https://zimu-66ccff.github.io/tags/%E9%A1%B9%E7%9B%AE/" />
            <category term="动态路由" scheme="https://zimu-66ccff.github.io/tags/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/" />
            <pubDate>Wed, 22 Feb 2023 14:28:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本原理&#34;&gt;#&lt;/a&gt; 基本原理&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;根据用户的 id 发送请求获取用户能够看到的菜单&lt;/li&gt;
&lt;li&gt;将需要动态注册的路由对象放到一个数组里面
&lt;ul&gt;
&lt;li&gt;路由对象在一个个单独的文件里面&lt;/li&gt;
&lt;li&gt;需要从文件中读取路由对象，然后放到数组里面（这一步我们将进行自动化操作）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据菜单去匹配对应的路由对象，并将其注册
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Router.addRoute(&#39;main&#39;, route)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;详细步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#详细步骤&#34;&gt;#&lt;/a&gt; 详细步骤&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据用户的 id 发送请求获取用户能够看到的菜单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里我们看一下服务器返回给我们的信息&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/22/xySLq.png&#34; alt=&#34;返回的菜单信息&#34; /&gt;&lt;/li&gt;
&lt;li&gt;对返回的信息进行一波浅浅的分析 🤔&lt;br /&gt;
是一个数组，数组里面存储的是所有一级菜单的信息， &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;url&lt;/code&gt; ，然后我们发现还有一个 &lt;code&gt;children&lt;/code&gt;  熟悉，也是一个数组，里面存储的是二级菜单的信息&lt;/li&gt;
&lt;li&gt;好家伙，你现在是不是有想法了 🤔&lt;br /&gt;
我们直接拿着这个服务器返回给我们的数据，然后去生成菜单不就可以了吗，这样用户看见的就是他能看见的菜单了，他看不到的菜单我们也不会渲染，万事大吉 😁。&lt;/li&gt;
&lt;li&gt;这样操作带来的问题&lt;br /&gt;
如果用户也是一个前端呢，他直接在 url 那里输入他没有权限访问的路由，不就可以进入他本不能访问的界面了吗？哦豁，完蛋 🥲。所以我们需要动态注册路由啦，连路由都没有，我看他怎么访问，嗯哼。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将需要动态注册的路由对象放到一个数组里面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先明白一点，我们的路由对象是放在一个个文件里面的，这样结构更清晰&lt;br /&gt;
举个列子，在 &lt;code&gt;router/main/analysis/dashboard/dashboard.ts&lt;/code&gt;  里面才有我们导出的路由对象，如下图&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/22/x4g2p.png&#34; alt=&#34;路由对象列子&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像这样的文件及其里面的路由对象还有很多，接下来我们要做的就是将其放进一个数组里面，这里我们会进行自动化操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;import.meta.glob(path, options)&lt;/code&gt;  这个方法来自动获取 &lt;code&gt;path&lt;/code&gt;  路径里面的所有文件，那么我们先用 &lt;code&gt;files = import.meta.glob(&#39;../router/main/**/*.ts&#39;)&lt;/code&gt;  来获取一下我们在此路径里面的 ts 文件导出的路由对象吧，接下来给你们打印一下 &lt;code&gt;files&lt;/code&gt;  看看。&lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/22/x4G48.png&#34; alt=&#34;获取的files&#34; /&gt;&lt;br /&gt;
 我们发现是一个对象，key 是文件的 &lt;code&gt;path&lt;/code&gt;  路径，value 却是一个箭头函数，这是因为他默认是懒加载获取的文件的，可是这样问题就来了，这样我们要怎么取出文件里面导出的路由对象呢 🤔？&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;options&lt;/code&gt;  选项来获取路由对象&lt;br /&gt;
别急别急， &lt;code&gt;import.meta.glob(path, options)&lt;/code&gt;  方法不是还有第二个参数 &lt;code&gt;options&lt;/code&gt;  吗，它是一个配置对象，我们可以设置这个配置对象的 &lt;code&gt;eager&lt;/code&gt;  属性为 &lt;code&gt;true&lt;/code&gt; ，好的，那我们接下来 &lt;code&gt;files = import.meta.glob(&#39;../router/main/**/*.ts&#39;, &amp;#123;eager: true&amp;#125;)&lt;/code&gt;  这样试一下，给你们看看这样做后打印的 &lt;code&gt;files&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;https://i.328888.xyz/2023/02/22/x4P4J.png&#34; alt=&#34;配置eager后的files&#34; /&gt;&lt;br /&gt;
 怎么样，是不是 value 由箭头函数变成了模块 Moudule，这个模块其实就是一个对象，然后对象里面有个 &lt;code&gt;default&lt;/code&gt;  属性， &lt;code&gt;default&lt;/code&gt;  属性的 value 可不就是我们导出的路由对象吗，欧克，大功告成，至此我们已经能够获取我们在文件里面导出的路由对象了。&lt;/li&gt;
&lt;li&gt;将路由对象注册到数组里面&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; files&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; module &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; files&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  localRoutes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;default&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;欧克，这样我们就成功的将我们在文件里面导出的路由对象放到 &lt;code&gt;localRoutes&lt;/code&gt;  这个对象里面了，大功告成，顺便提醒一下这里用 &lt;code&gt;for in&lt;/code&gt;  是因为数组也是一个对象嘛，相信你肯定是知道的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最后读取文件里面导出的路由对象并放到一个数组里面的操作，我们最好给封装到一个函数里面，接下来是封装的函数的代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadLocalRoutes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1. 动态获取所有的路由对象，放到数组中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// * 路由对象都在独立的文件中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// * 从文件中将所有路由对象先读取数组中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; localRoutes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RouteRecordRaw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1.1. 读取 router/main 所有的 ts 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; files&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Record&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;meta&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../router/main/*_/_.ts&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    eager&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1.2. 将加载的对象放到 localRoutes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; files&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; module &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; files&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    localRoutes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;default&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; localRoutes&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据菜单去匹配对应的路由对象，并将其注册&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据菜单匹配需要注册的路由对象，并将其放进一个数组&lt;br /&gt;
我们可以发现我们请求菜单返回的数据里面每一个一级菜单 or 二级菜单都是有一个 url 的，并且这个 url 和我们的路由对象的 path 是对应的，所以我们就可以基于这个来匹配。&lt;em&gt;但是有一个注意点，一级菜单是没有对应的界面，所以注册一级菜单对应的路由的时候，我们应该将其重定向到子菜单的第一个选项的路由&lt;/em&gt; 。&lt;strong&gt;同样，这些操作，我们也可以将其封装到一个函数里面，下面是函数的实现&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mapMenusToRoutes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userMenus&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1. 加载本地路由&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; localRoutes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadLocalRoutes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 2. 根据菜单去匹配正确的路由&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; routes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RouteRecordRaw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; menu &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; userMenus&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; submenu &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; menu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;children&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; route &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; localRoutes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; submenu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 1. 给 route 的顶层菜单增加重定向功能 (但是只需要添加一次即可)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;routes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; menu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          routes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; menu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; redirect&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 2. 将二级菜单对应的路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        routes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 记录第一个被匹配到的菜单&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;firstMenu &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; firstMenu &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; submenu&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; routes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后遍历 &lt;code&gt;routes&lt;/code&gt;  将里面存储的需要注册的路由对象，动态注册就可以啦&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; routes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mapMenusToRoutes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userMenus&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;routes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addRoute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;main&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意事项&lt;br /&gt;
这个动态注册路由的操作，应该是在进行登录操作，并且在登录成功跳转到 main 界面之前进行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请思考，在登录操作里面跳转到主页面里面对路由做一个动态的注册真的就万事大吉了吗 🤔。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题：&lt;br /&gt;
想象这样的一个场景，用户在登录之后进入了主界面，点击了它能看到的菜单，并进入了对应的界面，这时候用户点击了刷新会发生什么呢？答案很简单，我们在登录操作里面注册的动态路由没有了，因为用户刷新之后是不会再执行登陆操作的，也就是说刚才注册的路由不会再注册一遍，所以我们需要解决这个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;粗糙的解决方案:&lt;br /&gt;
 在 &lt;code&gt;main.ts&lt;/code&gt;  里面再执行获取需要注册的路由对象，并遍历将其注册的操作，因为刷新的时候 &lt;code&gt;main.ts&lt;/code&gt;  会执行，但是我们是一般不希望 &lt;code&gt;main.ts&lt;/code&gt;  里面有过多的业务代码的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优雅的解决方案：&lt;br /&gt;
将上面的操作封装成一个函数 &lt;code&gt;loadLocalCacheAction&lt;/code&gt;  放进 Pinia 的 loginStore 里的 &lt;code&gt;action&lt;/code&gt; , 然后在 &lt;code&gt;Store/index.ts&lt;/code&gt;  里面导出一个 &lt;code&gt;registerStore&lt;/code&gt;  函数，函数里面进行 &lt;code&gt;app.use(Pinia)&lt;/code&gt;  使用 pinia 插件操作和 &lt;code&gt;loadLocalCacheAction&lt;/code&gt;  操作，详细代码如下&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createPinia &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pinia&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; App &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; useLoginStore &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./login/login&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; pinia &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createPinia&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;registerStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;app&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; App&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Element&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1.use 的 pinia&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pinia&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 2. 加载本地的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; loginStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useLoginStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  loginStore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadLocalCacheAction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; registerStore&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后在 &lt;code&gt;main.js&lt;/code&gt;  里面 &lt;code&gt;app.use(registerStore)&lt;/code&gt;  调用 registerStore 函数，完成对 pinia 插件的使用，并执行 &lt;code&gt;loadLocalCacheAction&lt;/code&gt;  函数，完成对动态路由的注册&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/security/</guid>
            <title>浏览器安全</title>
            <link>https://zimu-66ccff.github.io/security/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="浏览器原理" scheme="https://zimu-66ccff.github.io/categories/note/front-end/browser/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="浏览器原理" scheme="https://zimu-66ccff.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/" />
            <category term="浏览器安全" scheme="https://zimu-66ccff.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/" />
            <pubDate>Sun, 19 Feb 2023 23:15:13 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;xss-攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss-攻击&#34;&gt;#&lt;/a&gt; XSS 攻击&lt;/h1&gt;
&lt;h3 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h3&gt;
&lt;p&gt;XSS 指的是&lt;strong&gt;跨站脚本攻击&lt;/strong&gt;，是一种代码注入攻击，本质是网站没有对恶意脚本进行过滤，导致其和普通代码混在了一起，最终被浏览器执行。&lt;/p&gt;
&lt;h3 id=&#34;可以进行的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以进行的操作&#34;&gt;#&lt;/a&gt; 可以进行的操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取页面的数据，比如 DOM，cookie，localStorage，sessionStorage&lt;/li&gt;
&lt;li&gt;DOS 攻击，向服务器发送大量的请求，占用服务器资源，导致用户无法访问服务器&lt;/li&gt;
&lt;li&gt;破坏页面结构&lt;/li&gt;
&lt;li&gt;流量劫持（将链接指向其他网站）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;xss-攻击类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss-攻击类型&#34;&gt;#&lt;/a&gt; XSS 攻击类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存储型 XSS 攻击&lt;br /&gt;
指的是恶意脚本会存储在服务器上，等到浏览器请求数据的时候，恶意脚本会返回，并执行。&lt;/li&gt;
&lt;li&gt;反射型 XSS 攻击&lt;br /&gt;
指的是诱导用户访问一个带有恶意代码的 url 后，服务器接收到数据后，把带有恶意代码的数据返回给浏览器，浏览器解析带有恶意脚本的数据，当作脚本执行，进行 XSS 攻击&lt;/li&gt;
&lt;li&gt;DOM 型 XSS 攻击&lt;br /&gt;
指的是直接通过操作 DOM 节点进行 XSS 攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何防御-xss-攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何防御-xss-攻击&#34;&gt;#&lt;/a&gt; 如何防御 XSS 攻击&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前端程序员永远不要相信用户提交的数据，在进行拼凑 HTML 的时候，应该对字符串进行必要的转义，要考虑到拿来拼串的字符串可能带有恶意脚本。&lt;/li&gt;
&lt;li&gt;使用 CSP，CSP 的本质是建立一个白名单，这个白名单可以告诉浏览器哪些外部资源可以加载和执行，避免恶意代码的注入攻击。&lt;/li&gt;
&lt;li&gt;对敏感信息进行保护，比如对 cookie 使用 &lt;code&gt;http-only&lt;/code&gt; ，使得脚本无法获取，或者使用验证码，避免脚本伪装成用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;csrf-攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csrf-攻击&#34;&gt;#&lt;/a&gt; CSRF 攻击&lt;/h1&gt;
&lt;h3 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念&lt;/h3&gt;
&lt;p&gt;CSRF 攻击是一种跨站伪造请求攻击，攻击者诱导用户进入一个第三方网站，然后这个第三方网站就会向被攻击网站发送跨站请求，如果用户保持了登录状态，那么攻击者就会利用这个登录状态，冒充用户执行一些操作。&lt;br /&gt;
其本质是利用 cookie 会在同源请求中携带发送给服务器，以此来实现用户的冒充。&lt;/p&gt;
&lt;h3 id=&#34;常见的攻击类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的攻击类型&#34;&gt;#&lt;/a&gt; 常见的攻击类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GET 类型的 CSRF 攻击，比如在 img 标签里面构造一个请求，当用户打开这个网站的时候，就会发送请求。&lt;/li&gt;
&lt;li&gt;POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏他，当用户进入页面的时候自动提交表单&lt;/li&gt;
&lt;li&gt;链接类型的 CSRF 攻击，构造一个 a 标签，然后用户点击的时候触发攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;怎么防止-csrf-攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么防止-csrf-攻击&#34;&gt;#&lt;/a&gt; 怎么防止 CSRF 攻击&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同源检测&lt;br /&gt;
服务器更具请求头中的 origin 和 referer 来判断请求是否来自允许访问的站点，但是 referer 可以仿造，并且会把搜索引擎的链接也给屏蔽了&lt;/li&gt;
&lt;li&gt;利用 token 进行验证&lt;br /&gt;
服务器向用户返回一个 token，然后用户每次请求的时候都要带 token，服务器再对这个 token 进行验证，缺点是给每个请求都加上 token 比较繁琐，并且如果请求经过负载均衡转移到了其他服务器，然后其他服务器的 session 中没有存储 token，就无法验证。&lt;/li&gt;
&lt;li&gt;利用 cookie 进行双重验证&lt;br /&gt;
用户在访问页面的时候，服务器向其域名添加一个 cookie，然后用户再次向服务器发送请求的时候，将这个 cookie 添加到 url 的参数中，服务器根据 cookie 中的数据和参数中的数据进行对比来验证。&lt;/li&gt;
&lt;li&gt;在设置 cookie 属性的时候设置 Samesite，限制 cookie 不能被第三方使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;中间人攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中间人攻击&#34;&gt;#&lt;/a&gt; 中间人攻击&lt;/h1&gt;
&lt;h3 id=&#34;概念-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-3&#34;&gt;#&lt;/a&gt; 概念&lt;/h3&gt;
&lt;p&gt;中间人攻击是指攻击者分别与通信的两端建立联系，交换其所收到的数据，让通信的两端认为他们正在通过一个私密的链接直接与对方对话，攻击者可以拦截双非的对话，并插入新的内容。&lt;/p&gt;
&lt;h3 id=&#34;攻击过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击过程&#34;&gt;#&lt;/a&gt; 攻击过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送请求到服务端，请求被中间人截获&lt;/li&gt;
&lt;li&gt;服务端向客户端返回公钥&lt;/li&gt;
&lt;li&gt;公钥被中间人截获，并生成一个伪造的公钥返回给客户端&lt;/li&gt;
&lt;li&gt;客户端收到伪造的公钥后，用伪造的公钥生成加密 hash 值发给服务器。&lt;/li&gt;
&lt;li&gt;中间人用自己的私钥解密获取真密钥，然后同时生成一个伪造的 hash 值发给服务器&lt;/li&gt;
&lt;li&gt;服务器用私钥解密获取假密钥，然后加密数据返回给客户端。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zimu-66ccff.github.io/httpVersionDifference/</guid>
            <title>浅谈http协议各版本之间，http协议与https协议之间的区别</title>
            <link>https://zimu-66ccff.github.io/httpVersionDifference/</link>
            <category term="笔记" scheme="https://zimu-66ccff.github.io/categories/note/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/categories/note/front-end/" />
            <category term="计算机网络" scheme="https://zimu-66ccff.github.io/categories/note/front-end/computerNetwork/" />
            <category term="前端" scheme="https://zimu-66ccff.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <category term="计算机网络" scheme="https://zimu-66ccff.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
            <category term="http1.0" scheme="https://zimu-66ccff.github.io/tags/http1-0/" />
            <category term="http1.1" scheme="https://zimu-66ccff.github.io/tags/http1-1/" />
            <category term="http2.0" scheme="https://zimu-66ccff.github.io/tags/http2-0/" />
            <category term="http3.0" scheme="https://zimu-66ccff.github.io/tags/http3-0/" />
            <category term="https" scheme="https://zimu-66ccff.github.io/tags/https/" />
            <pubDate>Sun, 19 Feb 2023 15:51:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;http11-与-http10-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http11-与-http10-的区别&#34;&gt;#&lt;/a&gt; http1.1 与 http1.0 的区别&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;连接方面&lt;br /&gt;
 http1.0 不是持久连接，每次发送请求都需要建立一个连接；http1.1 是持久连接，多次请求服用一个 tcp 连接。&lt;/li&gt;
&lt;li&gt;缓存方面&lt;br /&gt;
 http1.0 的缓存主要是使用请求头中的 If-Modified-Sine,Expires 作为缓存判断的标准。http1.1 则增加了 Etag, if-None-match,if-Match 等更多选项来控制缓存策略&lt;/li&gt;
&lt;li&gt;资源请求方面&lt;br /&gt;
 http1.0 请求资源的时候，有时候只是需要请求一点东西，但是服务器会把整个对象返回，存在浪费带宽的现象，并且不支持断点续传。http1.1 则在请求同中增加了 range 选项，支持只请求资源的某个部分，返回 206 状态码&lt;/li&gt;
&lt;li&gt;新增了 host 字段，来指定服务器的域名&lt;/li&gt;
&lt;li&gt;新增了 PUT,DELETE,TRACE,OPTIONS 请求方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;http20-与-http11-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http20-与-http11-的区别&#34;&gt;#&lt;/a&gt; http2.0 与 http1.1 的区别&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;二进制协议&lt;br /&gt;
 http1.1 里头信息必须是文本，数据体可以是文本可以是二进制。而 http2.0 则是个完全的二进制协议，头信息和数据体都必须是二进制，统称为 &#39; 帧&#39;，分为头信息帧和数据帧。&lt;/li&gt;
&lt;li&gt;多路复用&lt;br /&gt;
 http2.0 实现了多路复用，http2.0 依旧复用 tcp 连接，但是客户端和服务端都可以同时发送多个请求 or 响应，而且不用按照顺序一一发送，避免了 http 的队头阻塞。&lt;/li&gt;
&lt;li&gt;数据流&lt;br /&gt;
 http2.0 使用了数据流的概念，因为 http2.0 的数据包不是按照顺序发送的，多个连续的数据包可能来自不同的请求 or 响应，所以需要指定他们来自哪个请求，哪个响应。http2.0 将请求 or 响应对应的所有数据包&lt;br /&gt;
称为一个数据流，每个数据流都有一个独一无二的编号，每个数据包发送的时候都必须带上数据流 ip，来指明它属于哪个数据流。&lt;/li&gt;
&lt;li&gt;头信息压缩&lt;br /&gt;
 http1.1 协议不带状态，每次请求都必须带上所有的信息，所以很多字段都是重复的，这会浪费带宽，也会影响速度&lt;/li&gt;
&lt;li&gt;服务器推送&lt;br /&gt;
 http2.0 允许服务器未经请求，主动的向客户端发送一些静态资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;https-和-http-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https-和-http-的区别&#34;&gt;#&lt;/a&gt; https 和 http 的区别&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https 协议需要 CA 证书，费用较高，而 http 协议不需要&lt;/li&gt;
&lt;li&gt;http 协议是超文本传输协议，信息是明文传输的，https 是 ssl 加密传输协议，具有安全性&lt;/li&gt;
&lt;li&gt;使用不同的传输方式，端口号也不同，http 协议是运行在 80 端口 ，https 协议是运行在 443 端口&lt;/li&gt;
&lt;li&gt;http 协议很简单是无状态的，https 协议是用 ssl 协议和 http 协议构建的可加密传输，身份认证的网络协议，比 http 更安全。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
